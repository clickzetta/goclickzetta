// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: ingestion/ingestion.proto

package ingestion

import (
	context "context"
	util "github.com/clickzetta/goclickzetta/protos/bulkload/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// all gateway method list.
type MethodEnum int32

const (
	MethodEnum_GATEWAY_RPC_CALL   MethodEnum = 0
	MethodEnum_GET_TABLE_META     MethodEnum = 1
	MethodEnum_CREATE_TABLET      MethodEnum = 2
	MethodEnum_GET_MUTATE_WORKER  MethodEnum = 3
	MethodEnum_COMMIT_TABLET      MethodEnum = 4
	MethodEnum_DROP_TABLET        MethodEnum = 5
	MethodEnum_CHECK_TABLE_EXISTS MethodEnum = 6
	// ** BEGIN ENUMS TO DEPRECATE **
	MethodEnum_CREATE_PENDING_STREAM MethodEnum = 7
	MethodEnum_COMMIT_PENDING_STREAM MethodEnum = 8
	MethodEnum_GET_PENDING_STREAM    MethodEnum = 9
	MethodEnum_JOIN_PENDING_STREAM   MethodEnum = 10
	// ** END ENUMS TO DEPRECATE **
	MethodEnum_CREATE_BULK_LOAD_STREAM        MethodEnum = 11
	MethodEnum_GET_BULK_LOAD_STREAM           MethodEnum = 12
	MethodEnum_COMMIT_BULK_LOAD_STREAM        MethodEnum = 13
	MethodEnum_OPEN_BULK_LOAD_STREAM_WRITER   MethodEnum = 14
	MethodEnum_FINISH_BULK_LOAD_STREAM_WRITER MethodEnum = 15
	// ** V2 INTERFACE ENUMS **
	MethodEnum_CREATE_OR_GET_STREAM_V2           MethodEnum = 16
	MethodEnum_CLOSE_STREAM_V2                   MethodEnum = 17
	MethodEnum_GET_ROUTE_WORKER_V2               MethodEnum = 18
	MethodEnum_CREATE_BULK_LOAD_STREAM_V2        MethodEnum = 19
	MethodEnum_GET_BULK_LOAD_STREAM_V2           MethodEnum = 20
	MethodEnum_COMMIT_BULK_LOAD_STREAM_V2        MethodEnum = 21
	MethodEnum_OPEN_BULK_LOAD_STREAM_WRITER_V2   MethodEnum = 22
	MethodEnum_FINISH_BULK_LOAD_STREAM_WRITER_V2 MethodEnum = 23
)

// Enum value maps for MethodEnum.
var (
	MethodEnum_name = map[int32]string{
		0:  "GATEWAY_RPC_CALL",
		1:  "GET_TABLE_META",
		2:  "CREATE_TABLET",
		3:  "GET_MUTATE_WORKER",
		4:  "COMMIT_TABLET",
		5:  "DROP_TABLET",
		6:  "CHECK_TABLE_EXISTS",
		7:  "CREATE_PENDING_STREAM",
		8:  "COMMIT_PENDING_STREAM",
		9:  "GET_PENDING_STREAM",
		10: "JOIN_PENDING_STREAM",
		11: "CREATE_BULK_LOAD_STREAM",
		12: "GET_BULK_LOAD_STREAM",
		13: "COMMIT_BULK_LOAD_STREAM",
		14: "OPEN_BULK_LOAD_STREAM_WRITER",
		15: "FINISH_BULK_LOAD_STREAM_WRITER",
		16: "CREATE_OR_GET_STREAM_V2",
		17: "CLOSE_STREAM_V2",
		18: "GET_ROUTE_WORKER_V2",
		19: "CREATE_BULK_LOAD_STREAM_V2",
		20: "GET_BULK_LOAD_STREAM_V2",
		21: "COMMIT_BULK_LOAD_STREAM_V2",
		22: "OPEN_BULK_LOAD_STREAM_WRITER_V2",
		23: "FINISH_BULK_LOAD_STREAM_WRITER_V2",
	}
	MethodEnum_value = map[string]int32{
		"GATEWAY_RPC_CALL":                  0,
		"GET_TABLE_META":                    1,
		"CREATE_TABLET":                     2,
		"GET_MUTATE_WORKER":                 3,
		"COMMIT_TABLET":                     4,
		"DROP_TABLET":                       5,
		"CHECK_TABLE_EXISTS":                6,
		"CREATE_PENDING_STREAM":             7,
		"COMMIT_PENDING_STREAM":             8,
		"GET_PENDING_STREAM":                9,
		"JOIN_PENDING_STREAM":               10,
		"CREATE_BULK_LOAD_STREAM":           11,
		"GET_BULK_LOAD_STREAM":              12,
		"COMMIT_BULK_LOAD_STREAM":           13,
		"OPEN_BULK_LOAD_STREAM_WRITER":      14,
		"FINISH_BULK_LOAD_STREAM_WRITER":    15,
		"CREATE_OR_GET_STREAM_V2":           16,
		"CLOSE_STREAM_V2":                   17,
		"GET_ROUTE_WORKER_V2":               18,
		"CREATE_BULK_LOAD_STREAM_V2":        19,
		"GET_BULK_LOAD_STREAM_V2":           20,
		"COMMIT_BULK_LOAD_STREAM_V2":        21,
		"OPEN_BULK_LOAD_STREAM_WRITER_V2":   22,
		"FINISH_BULK_LOAD_STREAM_WRITER_V2": 23,
	}
)

func (x MethodEnum) Enum() *MethodEnum {
	p := new(MethodEnum)
	*p = x
	return p
}

func (x MethodEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MethodEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[0].Descriptor()
}

func (MethodEnum) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[0]
}

func (x MethodEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MethodEnum.Descriptor instead.
func (MethodEnum) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{0}
}

type IGSTableType int32

const (
	IGSTableType_NORMAL  IGSTableType = 0
	IGSTableType_CLUSTER IGSTableType = 1
	IGSTableType_ACID    IGSTableType = 2
)

// Enum value maps for IGSTableType.
var (
	IGSTableType_name = map[int32]string{
		0: "NORMAL",
		1: "CLUSTER",
		2: "ACID",
	}
	IGSTableType_value = map[string]int32{
		"NORMAL":  0,
		"CLUSTER": 1,
		"ACID":    2,
	}
)

func (x IGSTableType) Enum() *IGSTableType {
	p := new(IGSTableType)
	*p = x
	return p
}

func (x IGSTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IGSTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[1].Descriptor()
}

func (IGSTableType) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[1]
}

func (x IGSTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IGSTableType.Descriptor instead.
func (IGSTableType) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{1}
}

type Code int32

const (
	Code_SUCCESS   Code = 0
	Code_FAILED    Code = 1
	Code_THROTTLED Code = 2
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
		2: "THROTTLED",
	}
	Code_value = map[string]int32{
		"SUCCESS":   0,
		"FAILED":    1,
		"THROTTLED": 2,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[2].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[2]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{2}
}

type BulkLoadStreamState int32

const (
	BulkLoadStreamState_BL_CREATED          BulkLoadStreamState = 0
	BulkLoadStreamState_BL_SEALED           BulkLoadStreamState = 1
	BulkLoadStreamState_BL_COMMIT_SUBMITTED BulkLoadStreamState = 2
	BulkLoadStreamState_BL_COMMIT_SUCCESS   BulkLoadStreamState = 3
	BulkLoadStreamState_BL_COMMIT_FAILED    BulkLoadStreamState = 4
	BulkLoadStreamState_BL_CANCELLED        BulkLoadStreamState = 5
)

// Enum value maps for BulkLoadStreamState.
var (
	BulkLoadStreamState_name = map[int32]string{
		0: "BL_CREATED",
		1: "BL_SEALED",
		2: "BL_COMMIT_SUBMITTED",
		3: "BL_COMMIT_SUCCESS",
		4: "BL_COMMIT_FAILED",
		5: "BL_CANCELLED",
	}
	BulkLoadStreamState_value = map[string]int32{
		"BL_CREATED":          0,
		"BL_SEALED":           1,
		"BL_COMMIT_SUBMITTED": 2,
		"BL_COMMIT_SUCCESS":   3,
		"BL_COMMIT_FAILED":    4,
		"BL_CANCELLED":        5,
	}
)

func (x BulkLoadStreamState) Enum() *BulkLoadStreamState {
	p := new(BulkLoadStreamState)
	*p = x
	return p
}

func (x BulkLoadStreamState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkLoadStreamState) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[3].Descriptor()
}

func (BulkLoadStreamState) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[3]
}

func (x BulkLoadStreamState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulkLoadStreamState.Descriptor instead.
func (BulkLoadStreamState) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{3}
}

type BulkLoadStreamOperation int32

const (
	BulkLoadStreamOperation_BL_APPEND    BulkLoadStreamOperation = 0
	BulkLoadStreamOperation_BL_OVERWRITE BulkLoadStreamOperation = 1
	BulkLoadStreamOperation_BL_UPSERT    BulkLoadStreamOperation = 2
)

// Enum value maps for BulkLoadStreamOperation.
var (
	BulkLoadStreamOperation_name = map[int32]string{
		0: "BL_APPEND",
		1: "BL_OVERWRITE",
		2: "BL_UPSERT",
	}
	BulkLoadStreamOperation_value = map[string]int32{
		"BL_APPEND":    0,
		"BL_OVERWRITE": 1,
		"BL_UPSERT":    2,
	}
)

func (x BulkLoadStreamOperation) Enum() *BulkLoadStreamOperation {
	p := new(BulkLoadStreamOperation)
	*p = x
	return p
}

func (x BulkLoadStreamOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkLoadStreamOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[4].Descriptor()
}

func (BulkLoadStreamOperation) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[4]
}

func (x BulkLoadStreamOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulkLoadStreamOperation.Descriptor instead.
func (BulkLoadStreamOperation) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{4}
}

type ConnectMode int32

const (
	ConnectMode_DIRECT           ConnectMode = 0
	ConnectMode_GATEWAY          ConnectMode = 1
	ConnectMode_GATEWAY_INTERNAL ConnectMode = 2
)

// Enum value maps for ConnectMode.
var (
	ConnectMode_name = map[int32]string{
		0: "DIRECT",
		1: "GATEWAY",
		2: "GATEWAY_INTERNAL",
	}
	ConnectMode_value = map[string]int32{
		"DIRECT":           0,
		"GATEWAY":          1,
		"GATEWAY_INTERNAL": 2,
	}
)

func (x ConnectMode) Enum() *ConnectMode {
	p := new(ConnectMode)
	*p = x
	return p
}

func (x ConnectMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[5].Descriptor()
}

func (ConnectMode) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[5]
}

func (x ConnectMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectMode.Descriptor instead.
func (ConnectMode) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{5}
}

type OperationType int32

const (
	OperationType_UNKNOWN       OperationType = 0
	OperationType_INSERT        OperationType = 1
	OperationType_UPDATE        OperationType = 2
	OperationType_DELETE        OperationType = 3
	OperationType_UPSERT        OperationType = 4
	OperationType_INSERT_IGNORE OperationType = 5
	OperationType_UPDATE_IGNORE OperationType = 6
	OperationType_DELETE_IGNORE OperationType = 7
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INSERT",
		2: "UPDATE",
		3: "DELETE",
		4: "UPSERT",
		5: "INSERT_IGNORE",
		6: "UPDATE_IGNORE",
		7: "DELETE_IGNORE",
	}
	OperationType_value = map[string]int32{
		"UNKNOWN":       0,
		"INSERT":        1,
		"UPDATE":        2,
		"DELETE":        3,
		"UPSERT":        4,
		"INSERT_IGNORE": 5,
		"UPDATE_IGNORE": 6,
		"DELETE_IGNORE": 7,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[6].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[6]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{6}
}

type CommitBulkLoadStreamRequest_CommitMode int32

const (
	CommitBulkLoadStreamRequest_COMMIT_STREAM CommitBulkLoadStreamRequest_CommitMode = 0
	CommitBulkLoadStreamRequest_ABORT_STREAM  CommitBulkLoadStreamRequest_CommitMode = 1
)

// Enum value maps for CommitBulkLoadStreamRequest_CommitMode.
var (
	CommitBulkLoadStreamRequest_CommitMode_name = map[int32]string{
		0: "COMMIT_STREAM",
		1: "ABORT_STREAM",
	}
	CommitBulkLoadStreamRequest_CommitMode_value = map[string]int32{
		"COMMIT_STREAM": 0,
		"ABORT_STREAM":  1,
	}
)

func (x CommitBulkLoadStreamRequest_CommitMode) Enum() *CommitBulkLoadStreamRequest_CommitMode {
	p := new(CommitBulkLoadStreamRequest_CommitMode)
	*p = x
	return p
}

func (x CommitBulkLoadStreamRequest_CommitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitBulkLoadStreamRequest_CommitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ingestion_ingestion_proto_enumTypes[7].Descriptor()
}

func (CommitBulkLoadStreamRequest_CommitMode) Type() protoreflect.EnumType {
	return &file_ingestion_ingestion_proto_enumTypes[7]
}

func (x CommitBulkLoadStreamRequest_CommitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitBulkLoadStreamRequest_CommitMode.Descriptor instead.
func (CommitBulkLoadStreamRequest_CommitMode) EnumDescriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{25, 0}
}

type GatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodEnumValue int32  `protobuf:"varint,1,opt,name=methodEnumValue,proto3" json:"methodEnumValue,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InstanceId      int64  `protobuf:"varint,3,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	UserId          int64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GatewayRequest) Reset() {
	*x = GatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequest) ProtoMessage() {}

func (x *GatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequest.ProtoReflect.Descriptor instead.
func (*GatewayRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayRequest) GetMethodEnumValue() int32 {
	if x != nil {
		return x.MethodEnumValue
	}
	return 0
}

func (x *GatewayRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GatewayRequest) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *GatewayRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GateWayResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GatewayResponse) Reset() {
	*x = GatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayResponse) ProtoMessage() {}

func (x *GatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayResponse.ProtoReflect.Descriptor instead.
func (*GatewayResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayResponse) GetStatus() *GateWayResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GatewayResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int64  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Workspace  string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserId     int64  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserIdentifier) Reset() {
	*x = UserIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentifier) ProtoMessage() {}

func (x *UserIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentifier.ProtoReflect.Descriptor instead.
func (*UserIdentifier) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{2}
}

func (x *UserIdentifier) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *UserIdentifier) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *UserIdentifier) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserIdentifier) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdent *UserIdentifier `protobuf:"bytes,1,opt,name=user_ident,json=userIdent,proto3" json:"user_ident,omitempty"`
	Token     string          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{3}
}

func (x *Account) GetUserIdent() *UserIdentifier {
	if x != nil {
		return x.UserIdent
	}
	return nil
}

func (x *Account) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TableIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int64  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Workspace  string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	SchemaName string `protobuf:"bytes,3,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName  string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *TableIdentifier) Reset() {
	*x = TableIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIdentifier) ProtoMessage() {}

func (x *TableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIdentifier.ProtoReflect.Descriptor instead.
func (*TableIdentifier) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{4}
}

func (x *TableIdentifier) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *TableIdentifier) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *TableIdentifier) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *TableIdentifier) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type GateWayResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      Code   `protobuf:"varint,1,opt,name=code,proto3,enum=ingestion.Code" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GateWayResponseStatus) Reset() {
	*x = GateWayResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateWayResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateWayResponseStatus) ProtoMessage() {}

func (x *GateWayResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateWayResponseStatus.ProtoReflect.Descriptor instead.
func (*GateWayResponseStatus) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{5}
}

func (x *GateWayResponseStatus) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_SUCCESS
}

func (x *GateWayResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GateWayResponseStatus) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         Code   `protobuf:"varint,1,opt,name=code,proto3,enum=ingestion.Code" json:"code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RequestId    string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseStatus) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_SUCCESS
}

func (x *ResponseStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ResponseStatus) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type DataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *util.DataType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DataField) Reset() {
	*x = DataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField) ProtoMessage() {}

func (x *DataField) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField.ProtoReflect.Descriptor instead.
func (*DataField) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{7}
}

func (x *DataField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataField) GetType() *util.DataType {
	if x != nil {
		return x.Type
	}
	return nil
}

type DistributionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldIds      []uint32 `protobuf:"varint,1,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	HashFunctions []string `protobuf:"bytes,2,rep,name=hash_functions,json=hashFunctions,proto3" json:"hash_functions,omitempty"`
	NumBuckets    uint32   `protobuf:"varint,3,opt,name=num_buckets,json=numBuckets,proto3" json:"num_buckets,omitempty"`
}

func (x *DistributionSpec) Reset() {
	*x = DistributionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionSpec) ProtoMessage() {}

func (x *DistributionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionSpec.ProtoReflect.Descriptor instead.
func (*DistributionSpec) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{8}
}

func (x *DistributionSpec) GetFieldIds() []uint32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *DistributionSpec) GetHashFunctions() []string {
	if x != nil {
		return x.HashFunctions
	}
	return nil
}

func (x *DistributionSpec) GetNumBuckets() uint32 {
	if x != nil {
		return x.NumBuckets
	}
	return 0
}

type PrimaryKeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldIds []uint32 `protobuf:"varint,1,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
}

func (x *PrimaryKeySpec) Reset() {
	*x = PrimaryKeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryKeySpec) ProtoMessage() {}

func (x *PrimaryKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryKeySpec.ProtoReflect.Descriptor instead.
func (*PrimaryKeySpec) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{9}
}

func (x *PrimaryKeySpec) GetFieldIds() []uint32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

type PartitionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFieldIds []uint32 `protobuf:"varint,1,rep,packed,name=src_field_ids,json=srcFieldIds,proto3" json:"src_field_ids,omitempty"`
}

func (x *PartitionSpec) Reset() {
	*x = PartitionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSpec) ProtoMessage() {}

func (x *PartitionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSpec.ProtoReflect.Descriptor instead.
func (*PartitionSpec) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{10}
}

func (x *PartitionSpec) GetSrcFieldIds() []uint32 {
	if x != nil {
		return x.SrcFieldIds
	}
	return nil
}

type StreamSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataFields     []*DataField      `protobuf:"bytes,1,rep,name=data_fields,json=dataFields,proto3" json:"data_fields,omitempty"`
	DistSpec       *DistributionSpec `protobuf:"bytes,2,opt,name=dist_spec,json=distSpec,proto3" json:"dist_spec,omitempty"`                     // optional
	PrimaryKeySpec *PrimaryKeySpec   `protobuf:"bytes,3,opt,name=primary_key_spec,json=primaryKeySpec,proto3" json:"primary_key_spec,omitempty"` // optional
	PartitionSpec  *PartitionSpec    `protobuf:"bytes,4,opt,name=partition_spec,json=partitionSpec,proto3" json:"partition_spec,omitempty"`      // optional
}

func (x *StreamSchema) Reset() {
	*x = StreamSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSchema) ProtoMessage() {}

func (x *StreamSchema) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSchema.ProtoReflect.Descriptor instead.
func (*StreamSchema) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{11}
}

func (x *StreamSchema) GetDataFields() []*DataField {
	if x != nil {
		return x.DataFields
	}
	return nil
}

func (x *StreamSchema) GetDistSpec() *DistributionSpec {
	if x != nil {
		return x.DistSpec
	}
	return nil
}

func (x *StreamSchema) GetPrimaryKeySpec() *PrimaryKeySpec {
	if x != nil {
		return x.PrimaryKeySpec
	}
	return nil
}

func (x *StreamSchema) GetPartitionSpec() *PartitionSpec {
	if x != nil {
		return x.PartitionSpec
	}
	return nil
}

type CreateOrGetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TableIdent *TableIdentifier `protobuf:"bytes,2,opt,name=table_ident,json=tableIdent,proto3" json:"table_ident,omitempty"`
	NumTablets uint32           `protobuf:"varint,3,opt,name=num_tablets,json=numTablets,proto3" json:"num_tablets,omitempty"`
}

func (x *CreateOrGetStreamRequest) Reset() {
	*x = CreateOrGetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrGetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrGetStreamRequest) ProtoMessage() {}

func (x *CreateOrGetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrGetStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateOrGetStreamRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{12}
}

func (x *CreateOrGetStreamRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CreateOrGetStreamRequest) GetTableIdent() *TableIdentifier {
	if x != nil {
		return x.TableIdent
	}
	return nil
}

func (x *CreateOrGetStreamRequest) GetNumTablets() uint32 {
	if x != nil {
		return x.NumTablets
	}
	return 0
}

type CreateOrGetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdent    *TableIdentifier `protobuf:"bytes,1,opt,name=table_ident,json=tableIdent,proto3" json:"table_ident,omitempty"`
	DataSchema    *StreamSchema    `protobuf:"bytes,2,opt,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	AlreadyExists bool             `protobuf:"varint,3,opt,name=already_exists,json=alreadyExists,proto3" json:"already_exists,omitempty"`
	Status        *ResponseStatus  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateOrGetStreamResponse) Reset() {
	*x = CreateOrGetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrGetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrGetStreamResponse) ProtoMessage() {}

func (x *CreateOrGetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrGetStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateOrGetStreamResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{13}
}

func (x *CreateOrGetStreamResponse) GetTableIdent() *TableIdentifier {
	if x != nil {
		return x.TableIdent
	}
	return nil
}

func (x *CreateOrGetStreamResponse) GetDataSchema() *StreamSchema {
	if x != nil {
		return x.DataSchema
	}
	return nil
}

func (x *CreateOrGetStreamResponse) GetAlreadyExists() bool {
	if x != nil {
		return x.AlreadyExists
	}
	return false
}

func (x *CreateOrGetStreamResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CloseStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TableIdent *TableIdentifier `protobuf:"bytes,2,opt,name=table_ident,json=tableIdent,proto3" json:"table_ident,omitempty"`
}

func (x *CloseStreamRequest) Reset() {
	*x = CloseStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStreamRequest) ProtoMessage() {}

func (x *CloseStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStreamRequest.ProtoReflect.Descriptor instead.
func (*CloseStreamRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{14}
}

func (x *CloseStreamRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CloseStreamRequest) GetTableIdent() *TableIdentifier {
	if x != nil {
		return x.TableIdent
	}
	return nil
}

type CloseStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CloseStreamResponse) Reset() {
	*x = CloseStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStreamResponse) ProtoMessage() {}

func (x *CloseStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStreamResponse.ProtoReflect.Descriptor instead.
func (*CloseStreamResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{15}
}

func (x *CloseStreamResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type OssStagingPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	StsAkId             string `protobuf:"bytes,3,opt,name=sts_ak_id,json=stsAkId,proto3" json:"sts_ak_id,omitempty"`
	StsAkSecret         string `protobuf:"bytes,4,opt,name=sts_ak_secret,json=stsAkSecret,proto3" json:"sts_ak_secret,omitempty"`
	StsToken            string `protobuf:"bytes,5,opt,name=sts_token,json=stsToken,proto3" json:"sts_token,omitempty"`
	OssEndpoint         string `protobuf:"bytes,6,opt,name=oss_endpoint,json=ossEndpoint,proto3" json:"oss_endpoint,omitempty"`
	OssInternalEndpoint string `protobuf:"bytes,7,opt,name=oss_internal_endpoint,json=ossInternalEndpoint,proto3" json:"oss_internal_endpoint,omitempty"`
	OssExpireTime       uint64 `protobuf:"varint,8,opt,name=oss_expire_time,json=ossExpireTime,proto3" json:"oss_expire_time,omitempty"`
}

func (x *OssStagingPathInfo) Reset() {
	*x = OssStagingPathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OssStagingPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OssStagingPathInfo) ProtoMessage() {}

func (x *OssStagingPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OssStagingPathInfo.ProtoReflect.Descriptor instead.
func (*OssStagingPathInfo) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{16}
}

func (x *OssStagingPathInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OssStagingPathInfo) GetStsAkId() string {
	if x != nil {
		return x.StsAkId
	}
	return ""
}

func (x *OssStagingPathInfo) GetStsAkSecret() string {
	if x != nil {
		return x.StsAkSecret
	}
	return ""
}

func (x *OssStagingPathInfo) GetStsToken() string {
	if x != nil {
		return x.StsToken
	}
	return ""
}

func (x *OssStagingPathInfo) GetOssEndpoint() string {
	if x != nil {
		return x.OssEndpoint
	}
	return ""
}

func (x *OssStagingPathInfo) GetOssInternalEndpoint() string {
	if x != nil {
		return x.OssInternalEndpoint
	}
	return ""
}

func (x *OssStagingPathInfo) GetOssExpireTime() uint64 {
	if x != nil {
		return x.OssExpireTime
	}
	return 0
}

type CosStagingPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	StsAkId       string `protobuf:"bytes,2,opt,name=sts_ak_id,json=stsAkId,proto3" json:"sts_ak_id,omitempty"`
	StsAkSecret   string `protobuf:"bytes,3,opt,name=sts_ak_secret,json=stsAkSecret,proto3" json:"sts_ak_secret,omitempty"`
	StsToken      string `protobuf:"bytes,4,opt,name=sts_token,json=stsToken,proto3" json:"sts_token,omitempty"`
	CosRegion     string `protobuf:"bytes,5,opt,name=cos_region,json=cosRegion,proto3" json:"cos_region,omitempty"`
	CosExpireTime uint64 `protobuf:"varint,6,opt,name=cos_expire_time,json=cosExpireTime,proto3" json:"cos_expire_time,omitempty"`
}

func (x *CosStagingPathInfo) Reset() {
	*x = CosStagingPathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosStagingPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosStagingPathInfo) ProtoMessage() {}

func (x *CosStagingPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosStagingPathInfo.ProtoReflect.Descriptor instead.
func (*CosStagingPathInfo) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{17}
}

func (x *CosStagingPathInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CosStagingPathInfo) GetStsAkId() string {
	if x != nil {
		return x.StsAkId
	}
	return ""
}

func (x *CosStagingPathInfo) GetStsAkSecret() string {
	if x != nil {
		return x.StsAkSecret
	}
	return ""
}

func (x *CosStagingPathInfo) GetStsToken() string {
	if x != nil {
		return x.StsToken
	}
	return ""
}

func (x *CosStagingPathInfo) GetCosRegion() string {
	if x != nil {
		return x.CosRegion
	}
	return ""
}

func (x *CosStagingPathInfo) GetCosExpireTime() uint64 {
	if x != nil {
		return x.CosExpireTime
	}
	return 0
}

type StagingPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PathInfo:
	//
	//	*StagingPathInfo_OssPath
	//	*StagingPathInfo_CosPath
	PathInfo isStagingPathInfo_PathInfo `protobuf_oneof:"path_info"`
}

func (x *StagingPathInfo) Reset() {
	*x = StagingPathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StagingPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagingPathInfo) ProtoMessage() {}

func (x *StagingPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagingPathInfo.ProtoReflect.Descriptor instead.
func (*StagingPathInfo) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{18}
}

func (m *StagingPathInfo) GetPathInfo() isStagingPathInfo_PathInfo {
	if m != nil {
		return m.PathInfo
	}
	return nil
}

func (x *StagingPathInfo) GetOssPath() *OssStagingPathInfo {
	if x, ok := x.GetPathInfo().(*StagingPathInfo_OssPath); ok {
		return x.OssPath
	}
	return nil
}

func (x *StagingPathInfo) GetCosPath() *CosStagingPathInfo {
	if x, ok := x.GetPathInfo().(*StagingPathInfo_CosPath); ok {
		return x.CosPath
	}
	return nil
}

type isStagingPathInfo_PathInfo interface {
	isStagingPathInfo_PathInfo()
}

type StagingPathInfo_OssPath struct {
	OssPath *OssStagingPathInfo `protobuf:"bytes,1,opt,name=oss_path,json=ossPath,proto3,oneof"`
}

type StagingPathInfo_CosPath struct {
	CosPath *CosStagingPathInfo `protobuf:"bytes,2,opt,name=cos_path,json=cosPath,proto3,oneof"`
}

func (*StagingPathInfo_OssPath) isStagingPathInfo_PathInfo() {}

func (*StagingPathInfo_CosPath) isStagingPathInfo_PathInfo() {}

type BulkLoadStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId               string                  `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamState            BulkLoadStreamState     `protobuf:"varint,2,opt,name=stream_state,json=streamState,proto3,enum=ingestion.BulkLoadStreamState" json:"stream_state,omitempty"`
	SqlJobId               string                  `protobuf:"bytes,3,opt,name=sql_job_id,json=sqlJobId,proto3" json:"sql_job_id,omitempty"`
	Identifier             *TableIdentifier        `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Operation              BulkLoadStreamOperation `protobuf:"varint,5,opt,name=operation,proto3,enum=ingestion.BulkLoadStreamOperation" json:"operation,omitempty"`
	PartitionSpec          string                  `protobuf:"bytes,6,opt,name=partition_spec,json=partitionSpec,proto3" json:"partition_spec,omitempty"`
	RecordKeys             []string                `protobuf:"bytes,7,rep,name=record_keys,json=recordKeys,proto3" json:"record_keys,omitempty"`
	StreamSchema           *StreamSchema           `protobuf:"bytes,8,opt,name=stream_schema,json=streamSchema,proto3" json:"stream_schema,omitempty"`
	SqlErrorMsg            string                  `protobuf:"bytes,9,opt,name=sql_error_msg,json=sqlErrorMsg,proto3" json:"sql_error_msg,omitempty"`
	PreferInternalEndpoint bool                    `protobuf:"varint,10,opt,name=prefer_internal_endpoint,json=preferInternalEndpoint,proto3" json:"prefer_internal_endpoint,omitempty"`
	// Encryption config of cloud object stores.
	// Use a map here as these options vary from cloud to cloud.
	EncryptionOptions map[string]string `protobuf:"bytes,11,rep,name=encryption_options,json=encryptionOptions,proto3" json:"encryption_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BulkLoadStreamInfo) Reset() {
	*x = BulkLoadStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadStreamInfo) ProtoMessage() {}

func (x *BulkLoadStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadStreamInfo.ProtoReflect.Descriptor instead.
func (*BulkLoadStreamInfo) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{19}
}

func (x *BulkLoadStreamInfo) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *BulkLoadStreamInfo) GetStreamState() BulkLoadStreamState {
	if x != nil {
		return x.StreamState
	}
	return BulkLoadStreamState_BL_CREATED
}

func (x *BulkLoadStreamInfo) GetSqlJobId() string {
	if x != nil {
		return x.SqlJobId
	}
	return ""
}

func (x *BulkLoadStreamInfo) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *BulkLoadStreamInfo) GetOperation() BulkLoadStreamOperation {
	if x != nil {
		return x.Operation
	}
	return BulkLoadStreamOperation_BL_APPEND
}

func (x *BulkLoadStreamInfo) GetPartitionSpec() string {
	if x != nil {
		return x.PartitionSpec
	}
	return ""
}

func (x *BulkLoadStreamInfo) GetRecordKeys() []string {
	if x != nil {
		return x.RecordKeys
	}
	return nil
}

func (x *BulkLoadStreamInfo) GetStreamSchema() *StreamSchema {
	if x != nil {
		return x.StreamSchema
	}
	return nil
}

func (x *BulkLoadStreamInfo) GetSqlErrorMsg() string {
	if x != nil {
		return x.SqlErrorMsg
	}
	return ""
}

func (x *BulkLoadStreamInfo) GetPreferInternalEndpoint() bool {
	if x != nil {
		return x.PreferInternalEndpoint
	}
	return false
}

func (x *BulkLoadStreamInfo) GetEncryptionOptions() map[string]string {
	if x != nil {
		return x.EncryptionOptions
	}
	return nil
}

type BulkLoadStreamWriterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StagingPath           *StagingPathInfo    `protobuf:"bytes,1,opt,name=staging_path,json=stagingPath,proto3" json:"staging_path,omitempty"`
	FileFormat            util.FileFormatType `protobuf:"varint,2,opt,name=file_format,json=fileFormat,proto3,enum=util.FileFormatType" json:"file_format,omitempty"`
	MaxNumRowsPerFile     int64               `protobuf:"varint,3,opt,name=max_num_rows_per_file,json=maxNumRowsPerFile,proto3" json:"max_num_rows_per_file,omitempty"`
	MaxSizeInBytesPerFile int64               `protobuf:"varint,4,opt,name=max_size_in_bytes_per_file,json=maxSizeInBytesPerFile,proto3" json:"max_size_in_bytes_per_file,omitempty"`
}

func (x *BulkLoadStreamWriterConfig) Reset() {
	*x = BulkLoadStreamWriterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadStreamWriterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadStreamWriterConfig) ProtoMessage() {}

func (x *BulkLoadStreamWriterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadStreamWriterConfig.ProtoReflect.Descriptor instead.
func (*BulkLoadStreamWriterConfig) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{20}
}

func (x *BulkLoadStreamWriterConfig) GetStagingPath() *StagingPathInfo {
	if x != nil {
		return x.StagingPath
	}
	return nil
}

func (x *BulkLoadStreamWriterConfig) GetFileFormat() util.FileFormatType {
	if x != nil {
		return x.FileFormat
	}
	return util.FileFormatType(0)
}

func (x *BulkLoadStreamWriterConfig) GetMaxNumRowsPerFile() int64 {
	if x != nil {
		return x.MaxNumRowsPerFile
	}
	return 0
}

func (x *BulkLoadStreamWriterConfig) GetMaxSizeInBytesPerFile() int64 {
	if x != nil {
		return x.MaxSizeInBytesPerFile
	}
	return 0
}

type CreateBulkLoadStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account                *Account                `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Identifier             *TableIdentifier        `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Operation              BulkLoadStreamOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=ingestion.BulkLoadStreamOperation" json:"operation,omitempty"`
	PartitionSpec          string                  `protobuf:"bytes,4,opt,name=partition_spec,json=partitionSpec,proto3" json:"partition_spec,omitempty"`
	RecordKeys             []string                `protobuf:"bytes,5,rep,name=record_keys,json=recordKeys,proto3" json:"record_keys,omitempty"`
	PreferInternalEndpoint bool                    `protobuf:"varint,6,opt,name=prefer_internal_endpoint,json=preferInternalEndpoint,proto3" json:"prefer_internal_endpoint,omitempty"`
}

func (x *CreateBulkLoadStreamRequest) Reset() {
	*x = CreateBulkLoadStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulkLoadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulkLoadStreamRequest) ProtoMessage() {}

func (x *CreateBulkLoadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulkLoadStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateBulkLoadStreamRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{21}
}

func (x *CreateBulkLoadStreamRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CreateBulkLoadStreamRequest) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CreateBulkLoadStreamRequest) GetOperation() BulkLoadStreamOperation {
	if x != nil {
		return x.Operation
	}
	return BulkLoadStreamOperation_BL_APPEND
}

func (x *CreateBulkLoadStreamRequest) GetPartitionSpec() string {
	if x != nil {
		return x.PartitionSpec
	}
	return ""
}

func (x *CreateBulkLoadStreamRequest) GetRecordKeys() []string {
	if x != nil {
		return x.RecordKeys
	}
	return nil
}

func (x *CreateBulkLoadStreamRequest) GetPreferInternalEndpoint() bool {
	if x != nil {
		return x.PreferInternalEndpoint
	}
	return false
}

type CreateBulkLoadStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   *BulkLoadStreamInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateBulkLoadStreamResponse) Reset() {
	*x = CreateBulkLoadStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulkLoadStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulkLoadStreamResponse) ProtoMessage() {}

func (x *CreateBulkLoadStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulkLoadStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateBulkLoadStreamResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{22}
}

func (x *CreateBulkLoadStreamResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateBulkLoadStreamResponse) GetInfo() *BulkLoadStreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBulkLoadStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Identifier    *TableIdentifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StreamId      string           `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	NeedTableMeta bool             `protobuf:"varint,4,opt,name=need_table_meta,json=needTableMeta,proto3" json:"need_table_meta,omitempty"`
}

func (x *GetBulkLoadStreamRequest) Reset() {
	*x = GetBulkLoadStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkLoadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkLoadStreamRequest) ProtoMessage() {}

func (x *GetBulkLoadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkLoadStreamRequest.ProtoReflect.Descriptor instead.
func (*GetBulkLoadStreamRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{23}
}

func (x *GetBulkLoadStreamRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetBulkLoadStreamRequest) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetBulkLoadStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *GetBulkLoadStreamRequest) GetNeedTableMeta() bool {
	if x != nil {
		return x.NeedTableMeta
	}
	return false
}

type GetBulkLoadStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   *BulkLoadStreamInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetBulkLoadStreamResponse) Reset() {
	*x = GetBulkLoadStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkLoadStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkLoadStreamResponse) ProtoMessage() {}

func (x *GetBulkLoadStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkLoadStreamResponse.ProtoReflect.Descriptor instead.
func (*GetBulkLoadStreamResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{24}
}

func (x *GetBulkLoadStreamResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBulkLoadStreamResponse) GetInfo() *BulkLoadStreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CommitBulkLoadStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account          *Account                               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Identifier       *TableIdentifier                       `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StreamId         string                                 `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ExecuteWorkspace string                                 `protobuf:"bytes,4,opt,name=execute_workspace,json=executeWorkspace,proto3" json:"execute_workspace,omitempty"`
	ExecuteVcName    string                                 `protobuf:"bytes,5,opt,name=execute_vc_name,json=executeVcName,proto3" json:"execute_vc_name,omitempty"`
	CommitMode       CommitBulkLoadStreamRequest_CommitMode `protobuf:"varint,6,opt,name=commit_mode,json=commitMode,proto3,enum=ingestion.CommitBulkLoadStreamRequest_CommitMode" json:"commit_mode,omitempty"`
	// Is spec_partition_ids required?
	SpecPartitionIds []uint32 `protobuf:"varint,7,rep,packed,name=spec_partition_ids,json=specPartitionIds,proto3" json:"spec_partition_ids,omitempty"` // if empty, will commit all finished partition
}

func (x *CommitBulkLoadStreamRequest) Reset() {
	*x = CommitBulkLoadStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBulkLoadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBulkLoadStreamRequest) ProtoMessage() {}

func (x *CommitBulkLoadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBulkLoadStreamRequest.ProtoReflect.Descriptor instead.
func (*CommitBulkLoadStreamRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{25}
}

func (x *CommitBulkLoadStreamRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CommitBulkLoadStreamRequest) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CommitBulkLoadStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CommitBulkLoadStreamRequest) GetExecuteWorkspace() string {
	if x != nil {
		return x.ExecuteWorkspace
	}
	return ""
}

func (x *CommitBulkLoadStreamRequest) GetExecuteVcName() string {
	if x != nil {
		return x.ExecuteVcName
	}
	return ""
}

func (x *CommitBulkLoadStreamRequest) GetCommitMode() CommitBulkLoadStreamRequest_CommitMode {
	if x != nil {
		return x.CommitMode
	}
	return CommitBulkLoadStreamRequest_COMMIT_STREAM
}

func (x *CommitBulkLoadStreamRequest) GetSpecPartitionIds() []uint32 {
	if x != nil {
		return x.SpecPartitionIds
	}
	return nil
}

type CommitBulkLoadStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   *BulkLoadStreamInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CommitBulkLoadStreamResponse) Reset() {
	*x = CommitBulkLoadStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBulkLoadStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBulkLoadStreamResponse) ProtoMessage() {}

func (x *CommitBulkLoadStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBulkLoadStreamResponse.ProtoReflect.Descriptor instead.
func (*CommitBulkLoadStreamResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{26}
}

func (x *CommitBulkLoadStreamResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CommitBulkLoadStreamResponse) GetInfo() *BulkLoadStreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OpenBulkLoadStreamWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account     *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Identifier  *TableIdentifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StreamId    string           `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	PartitionId uint32           `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *OpenBulkLoadStreamWriterRequest) Reset() {
	*x = OpenBulkLoadStreamWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBulkLoadStreamWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBulkLoadStreamWriterRequest) ProtoMessage() {}

func (x *OpenBulkLoadStreamWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBulkLoadStreamWriterRequest.ProtoReflect.Descriptor instead.
func (*OpenBulkLoadStreamWriterRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{27}
}

func (x *OpenBulkLoadStreamWriterRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *OpenBulkLoadStreamWriterRequest) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *OpenBulkLoadStreamWriterRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *OpenBulkLoadStreamWriterRequest) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type OpenBulkLoadStreamWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Config *BulkLoadStreamWriterConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OpenBulkLoadStreamWriterResponse) Reset() {
	*x = OpenBulkLoadStreamWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBulkLoadStreamWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBulkLoadStreamWriterResponse) ProtoMessage() {}

func (x *OpenBulkLoadStreamWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBulkLoadStreamWriterResponse.ProtoReflect.Descriptor instead.
func (*OpenBulkLoadStreamWriterResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{28}
}

func (x *OpenBulkLoadStreamWriterResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OpenBulkLoadStreamWriterResponse) GetConfig() *BulkLoadStreamWriterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type FinishBulkLoadStreamWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Identifier     *TableIdentifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StreamId       string           `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	PartitionId    uint32           `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	WrittenFiles   []string         `protobuf:"bytes,5,rep,name=written_files,json=writtenFiles,proto3" json:"written_files,omitempty"`
	WrittenLengths []uint64         `protobuf:"varint,6,rep,packed,name=written_lengths,json=writtenLengths,proto3" json:"written_lengths,omitempty"`
}

func (x *FinishBulkLoadStreamWriterRequest) Reset() {
	*x = FinishBulkLoadStreamWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishBulkLoadStreamWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishBulkLoadStreamWriterRequest) ProtoMessage() {}

func (x *FinishBulkLoadStreamWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishBulkLoadStreamWriterRequest.ProtoReflect.Descriptor instead.
func (*FinishBulkLoadStreamWriterRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{29}
}

func (x *FinishBulkLoadStreamWriterRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *FinishBulkLoadStreamWriterRequest) GetIdentifier() *TableIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FinishBulkLoadStreamWriterRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *FinishBulkLoadStreamWriterRequest) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *FinishBulkLoadStreamWriterRequest) GetWrittenFiles() []string {
	if x != nil {
		return x.WrittenFiles
	}
	return nil
}

func (x *FinishBulkLoadStreamWriterRequest) GetWrittenLengths() []uint64 {
	if x != nil {
		return x.WrittenLengths
	}
	return nil
}

type FinishBulkLoadStreamWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FinishBulkLoadStreamWriterResponse) Reset() {
	*x = FinishBulkLoadStreamWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishBulkLoadStreamWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishBulkLoadStreamWriterResponse) ProtoMessage() {}

func (x *FinishBulkLoadStreamWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishBulkLoadStreamWriterResponse.ProtoReflect.Descriptor instead.
func (*FinishBulkLoadStreamWriterResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{30}
}

func (x *FinishBulkLoadStreamWriterResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetRouteWorkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdent  *TableIdentifier `protobuf:"bytes,1,opt,name=table_ident,json=tableIdent,proto3" json:"table_ident,omitempty"`
	ConnectMode ConnectMode      `protobuf:"varint,2,opt,name=connect_mode,json=connectMode,proto3,enum=ingestion.ConnectMode" json:"connect_mode,omitempty"`
	TabletId    []int64          `protobuf:"varint,3,rep,packed,name=tablet_id,json=tabletId,proto3" json:"tablet_id,omitempty"`
}

func (x *GetRouteWorkersRequest) Reset() {
	*x = GetRouteWorkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteWorkersRequest) ProtoMessage() {}

func (x *GetRouteWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteWorkersRequest.ProtoReflect.Descriptor instead.
func (*GetRouteWorkersRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{31}
}

func (x *GetRouteWorkersRequest) GetTableIdent() *TableIdentifier {
	if x != nil {
		return x.TableIdent
	}
	return nil
}

func (x *GetRouteWorkersRequest) GetConnectMode() ConnectMode {
	if x != nil {
		return x.ConnectMode
	}
	return ConnectMode_DIRECT
}

func (x *GetRouteWorkersRequest) GetTabletId() []int64 {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type HostPortTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HostPortTuple) Reset() {
	*x = HostPortTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPortTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPortTuple) ProtoMessage() {}

func (x *HostPortTuple) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPortTuple.ProtoReflect.Descriptor instead.
func (*HostPortTuple) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{32}
}

func (x *HostPortTuple) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HostPortTuple) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetRouteWorkersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuple    []*HostPortTuple `protobuf:"bytes,1,rep,name=tuple,proto3" json:"tuple,omitempty"`
	TabletId []int64          `protobuf:"varint,2,rep,packed,name=tablet_id,json=tabletId,proto3" json:"tablet_id,omitempty"`
	Status   *ResponseStatus  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetRouteWorkersResponse) Reset() {
	*x = GetRouteWorkersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteWorkersResponse) ProtoMessage() {}

func (x *GetRouteWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteWorkersResponse.ProtoReflect.Descriptor instead.
func (*GetRouteWorkersResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{33}
}

func (x *GetRouteWorkersResponse) GetTuple() []*HostPortTuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *GetRouteWorkersResponse) GetTabletId() []int64 {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetRouteWorkersResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type OperationTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpTypes []OperationType `protobuf:"varint,1,rep,packed,name=op_types,json=opTypes,proto3,enum=ingestion.OperationType" json:"op_types,omitempty"`
}

func (x *OperationTypeList) Reset() {
	*x = OperationTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTypeList) ProtoMessage() {}

func (x *OperationTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTypeList.ProtoReflect.Descriptor instead.
func (*OperationTypeList) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{34}
}

func (x *OperationTypeList) GetOpTypes() []OperationType {
	if x != nil {
		return x.OpTypes
	}
	return nil
}

type DataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowPayload        []byte `protobuf:"bytes,1,opt,name=arrow_payload,json=arrowPayload,proto3" json:"arrow_payload,omitempty"`
	IsSetBitmapsPayload []byte `protobuf:"bytes,2,opt,name=is_set_bitmaps_payload,json=isSetBitmapsPayload,proto3" json:"is_set_bitmaps_payload,omitempty"` // optional, (rows * cols) bits
	// Types that are assignable to OpTypeInfo:
	//
	//	*DataBlock_RowOpTypeList
	//	*DataBlock_BlockOpType
	OpTypeInfo isDataBlock_OpTypeInfo `protobuf_oneof:"op_type_info"`
	BucketId   uint32                 `protobuf:"varint,5,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"` // maybe NO_BUCKETID
	NumRows    uint32                 `protobuf:"varint,6,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`    // nums of row in data block.
}

func (x *DataBlock) Reset() {
	*x = DataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlock) ProtoMessage() {}

func (x *DataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlock.ProtoReflect.Descriptor instead.
func (*DataBlock) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{35}
}

func (x *DataBlock) GetArrowPayload() []byte {
	if x != nil {
		return x.ArrowPayload
	}
	return nil
}

func (x *DataBlock) GetIsSetBitmapsPayload() []byte {
	if x != nil {
		return x.IsSetBitmapsPayload
	}
	return nil
}

func (m *DataBlock) GetOpTypeInfo() isDataBlock_OpTypeInfo {
	if m != nil {
		return m.OpTypeInfo
	}
	return nil
}

func (x *DataBlock) GetRowOpTypeList() *OperationTypeList {
	if x, ok := x.GetOpTypeInfo().(*DataBlock_RowOpTypeList); ok {
		return x.RowOpTypeList
	}
	return nil
}

func (x *DataBlock) GetBlockOpType() OperationType {
	if x, ok := x.GetOpTypeInfo().(*DataBlock_BlockOpType); ok {
		return x.BlockOpType
	}
	return OperationType_UNKNOWN
}

func (x *DataBlock) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

func (x *DataBlock) GetNumRows() uint32 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

type isDataBlock_OpTypeInfo interface {
	isDataBlock_OpTypeInfo()
}

type DataBlock_RowOpTypeList struct {
	RowOpTypeList *OperationTypeList `protobuf:"bytes,3,opt,name=row_op_type_list,json=rowOpTypeList,proto3,oneof"`
}

type DataBlock_BlockOpType struct {
	BlockOpType OperationType `protobuf:"varint,4,opt,name=block_op_type,json=blockOpType,proto3,enum=ingestion.OperationType,oneof"`
}

func (*DataBlock_RowOpTypeList) isDataBlock_OpTypeInfo() {}

func (*DataBlock_BlockOpType) isDataBlock_OpTypeInfo() {}

type MutateRowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         Code   `protobuf:"varint,1,opt,name=code,proto3,enum=ingestion.Code" json:"code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RowIndex     int32  `protobuf:"varint,3,opt,name=row_index,json=rowIndex,proto3" json:"row_index,omitempty"`
}

func (x *MutateRowStatus) Reset() {
	*x = MutateRowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateRowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRowStatus) ProtoMessage() {}

func (x *MutateRowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRowStatus.ProtoReflect.Descriptor instead.
func (*MutateRowStatus) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{36}
}

func (x *MutateRowStatus) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_SUCCESS
}

func (x *MutateRowStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MutateRowStatus) GetRowIndex() int32 {
	if x != nil {
		return x.RowIndex
	}
	return 0
}

type MutateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        *Account         `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TableIdent     *TableIdentifier `protobuf:"bytes,2,opt,name=table_ident,json=tableIdent,proto3" json:"table_ident,omitempty"`
	BatchId        int64            `protobuf:"varint,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	WriteTimestamp int64            `protobuf:"varint,4,opt,name=write_timestamp,json=writeTimestamp,proto3" json:"write_timestamp,omitempty"`
	DataBlocks     []*DataBlock     `protobuf:"bytes,5,rep,name=data_blocks,json=dataBlocks,proto3" json:"data_blocks,omitempty"`
}

func (x *MutateRequest) Reset() {
	*x = MutateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRequest) ProtoMessage() {}

func (x *MutateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRequest.ProtoReflect.Descriptor instead.
func (*MutateRequest) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{37}
}

func (x *MutateRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *MutateRequest) GetTableIdent() *TableIdentifier {
	if x != nil {
		return x.TableIdent
	}
	return nil
}

func (x *MutateRequest) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *MutateRequest) GetWriteTimestamp() int64 {
	if x != nil {
		return x.WriteTimestamp
	}
	return 0
}

func (x *MutateRequest) GetDataBlocks() []*DataBlock {
	if x != nil {
		return x.DataBlocks
	}
	return nil
}

type MutateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId       int64              `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	NumRows       int64              `protobuf:"varint,2,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	Status        *ResponseStatus    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	RowStatusList []*MutateRowStatus `protobuf:"bytes,4,rep,name=row_status_list,json=rowStatusList,proto3" json:"row_status_list,omitempty"`
}

func (x *MutateResponse) Reset() {
	*x = MutateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingestion_ingestion_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResponse) ProtoMessage() {}

func (x *MutateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingestion_ingestion_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResponse.ProtoReflect.Descriptor instead.
func (*MutateResponse) Descriptor() ([]byte, []int) {
	return file_ingestion_ingestion_proto_rawDescGZIP(), []int{38}
}

func (x *MutateResponse) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *MutateResponse) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *MutateResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MutateResponse) GetRowStatusList() []*MutateRowStatus {
	if x != nil {
		return x.RowStatusList
	}
	return nil
}

var File_ingestion_ingestion_proto protoreflect.FileDescriptor

var file_ingestion_ingestion_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x75, 0x74,
	0x69, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0f, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x12, 0x4f, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x09, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x73, 0x41, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x73, 0x5f, 0x61, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x73, 0x41, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x73,
	0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x73, 0x41, 0x6b,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x6b, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x73, 0x41, 0x6b,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x73,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a,
	0x0a, 0x08, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x71,
	0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x71, 0x6c, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x71, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x12, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x44, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x1a,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xae, 0x03, 0x0a,
	0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x56, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x22, 0x84, 0x01,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x6c,
	0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9b, 0x02, 0x0a, 0x21, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x22, 0x57, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xad, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xb6, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x69, 0x73, 0x53, 0x65, 0x74, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x6f,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x91, 0x05, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x55,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0a,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42, 0x55, 0x4c,
	0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x56, 0x32, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x56, 0x32, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52,
	0x5f, 0x56, 0x32, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x56, 0x32, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x4c,
	0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x56, 0x32,
	0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x4c,
	0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x56, 0x32,
	0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x5f, 0x56, 0x32, 0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x32, 0x10, 0x17, 0x2a, 0x31,
	0x0a, 0x0c, 0x49, 0x47, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x43, 0x49, 0x44, 0x10,
	0x02, 0x2a, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x8c, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x5f,
	0x53, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x2a, 0x49, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x42,
	0x4c, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x42, 0x4c, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x45,
	0x52, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10,
	0x07, 0x32, 0x8f, 0x07, 0x0a, 0x1a, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x70, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6c,
	0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x6c, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x6c, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xa6, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x49, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74,
	0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ingestion_ingestion_proto_rawDescOnce sync.Once
	file_ingestion_ingestion_proto_rawDescData = file_ingestion_ingestion_proto_rawDesc
)

func file_ingestion_ingestion_proto_rawDescGZIP() []byte {
	file_ingestion_ingestion_proto_rawDescOnce.Do(func() {
		file_ingestion_ingestion_proto_rawDescData = protoimpl.X.CompressGZIP(file_ingestion_ingestion_proto_rawDescData)
	})
	return file_ingestion_ingestion_proto_rawDescData
}

var file_ingestion_ingestion_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_ingestion_ingestion_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_ingestion_ingestion_proto_goTypes = []interface{}{
	(MethodEnum)(0),              // 0: ingestion.MethodEnum
	(IGSTableType)(0),            // 1: ingestion.IGSTableType
	(Code)(0),                    // 2: ingestion.Code
	(BulkLoadStreamState)(0),     // 3: ingestion.BulkLoadStreamState
	(BulkLoadStreamOperation)(0), // 4: ingestion.BulkLoadStreamOperation
	(ConnectMode)(0),             // 5: ingestion.ConnectMode
	(OperationType)(0),           // 6: ingestion.OperationType
	(CommitBulkLoadStreamRequest_CommitMode)(0), // 7: ingestion.CommitBulkLoadStreamRequest.CommitMode
	(*GatewayRequest)(nil),                      // 8: ingestion.GatewayRequest
	(*GatewayResponse)(nil),                     // 9: ingestion.GatewayResponse
	(*UserIdentifier)(nil),                      // 10: ingestion.UserIdentifier
	(*Account)(nil),                             // 11: ingestion.Account
	(*TableIdentifier)(nil),                     // 12: ingestion.TableIdentifier
	(*GateWayResponseStatus)(nil),               // 13: ingestion.GateWayResponseStatus
	(*ResponseStatus)(nil),                      // 14: ingestion.ResponseStatus
	(*DataField)(nil),                           // 15: ingestion.DataField
	(*DistributionSpec)(nil),                    // 16: ingestion.DistributionSpec
	(*PrimaryKeySpec)(nil),                      // 17: ingestion.PrimaryKeySpec
	(*PartitionSpec)(nil),                       // 18: ingestion.PartitionSpec
	(*StreamSchema)(nil),                        // 19: ingestion.StreamSchema
	(*CreateOrGetStreamRequest)(nil),            // 20: ingestion.CreateOrGetStreamRequest
	(*CreateOrGetStreamResponse)(nil),           // 21: ingestion.CreateOrGetStreamResponse
	(*CloseStreamRequest)(nil),                  // 22: ingestion.CloseStreamRequest
	(*CloseStreamResponse)(nil),                 // 23: ingestion.CloseStreamResponse
	(*OssStagingPathInfo)(nil),                  // 24: ingestion.OssStagingPathInfo
	(*CosStagingPathInfo)(nil),                  // 25: ingestion.CosStagingPathInfo
	(*StagingPathInfo)(nil),                     // 26: ingestion.StagingPathInfo
	(*BulkLoadStreamInfo)(nil),                  // 27: ingestion.BulkLoadStreamInfo
	(*BulkLoadStreamWriterConfig)(nil),          // 28: ingestion.BulkLoadStreamWriterConfig
	(*CreateBulkLoadStreamRequest)(nil),         // 29: ingestion.CreateBulkLoadStreamRequest
	(*CreateBulkLoadStreamResponse)(nil),        // 30: ingestion.CreateBulkLoadStreamResponse
	(*GetBulkLoadStreamRequest)(nil),            // 31: ingestion.GetBulkLoadStreamRequest
	(*GetBulkLoadStreamResponse)(nil),           // 32: ingestion.GetBulkLoadStreamResponse
	(*CommitBulkLoadStreamRequest)(nil),         // 33: ingestion.CommitBulkLoadStreamRequest
	(*CommitBulkLoadStreamResponse)(nil),        // 34: ingestion.CommitBulkLoadStreamResponse
	(*OpenBulkLoadStreamWriterRequest)(nil),     // 35: ingestion.OpenBulkLoadStreamWriterRequest
	(*OpenBulkLoadStreamWriterResponse)(nil),    // 36: ingestion.OpenBulkLoadStreamWriterResponse
	(*FinishBulkLoadStreamWriterRequest)(nil),   // 37: ingestion.FinishBulkLoadStreamWriterRequest
	(*FinishBulkLoadStreamWriterResponse)(nil),  // 38: ingestion.FinishBulkLoadStreamWriterResponse
	(*GetRouteWorkersRequest)(nil),              // 39: ingestion.GetRouteWorkersRequest
	(*HostPortTuple)(nil),                       // 40: ingestion.HostPortTuple
	(*GetRouteWorkersResponse)(nil),             // 41: ingestion.GetRouteWorkersResponse
	(*OperationTypeList)(nil),                   // 42: ingestion.OperationTypeList
	(*DataBlock)(nil),                           // 43: ingestion.DataBlock
	(*MutateRowStatus)(nil),                     // 44: ingestion.MutateRowStatus
	(*MutateRequest)(nil),                       // 45: ingestion.MutateRequest
	(*MutateResponse)(nil),                      // 46: ingestion.MutateResponse
	nil,                                         // 47: ingestion.BulkLoadStreamInfo.EncryptionOptionsEntry
	(*util.DataType)(nil),                       // 48: util.DataType
	(util.FileFormatType)(0),                    // 49: util.FileFormatType
}
var file_ingestion_ingestion_proto_depIdxs = []int32{
	13, // 0: ingestion.GatewayResponse.status:type_name -> ingestion.GateWayResponseStatus
	10, // 1: ingestion.Account.user_ident:type_name -> ingestion.UserIdentifier
	2,  // 2: ingestion.GateWayResponseStatus.code:type_name -> ingestion.Code
	2,  // 3: ingestion.ResponseStatus.code:type_name -> ingestion.Code
	48, // 4: ingestion.DataField.type:type_name -> util.DataType
	15, // 5: ingestion.StreamSchema.data_fields:type_name -> ingestion.DataField
	16, // 6: ingestion.StreamSchema.dist_spec:type_name -> ingestion.DistributionSpec
	17, // 7: ingestion.StreamSchema.primary_key_spec:type_name -> ingestion.PrimaryKeySpec
	18, // 8: ingestion.StreamSchema.partition_spec:type_name -> ingestion.PartitionSpec
	11, // 9: ingestion.CreateOrGetStreamRequest.account:type_name -> ingestion.Account
	12, // 10: ingestion.CreateOrGetStreamRequest.table_ident:type_name -> ingestion.TableIdentifier
	12, // 11: ingestion.CreateOrGetStreamResponse.table_ident:type_name -> ingestion.TableIdentifier
	19, // 12: ingestion.CreateOrGetStreamResponse.data_schema:type_name -> ingestion.StreamSchema
	14, // 13: ingestion.CreateOrGetStreamResponse.status:type_name -> ingestion.ResponseStatus
	11, // 14: ingestion.CloseStreamRequest.account:type_name -> ingestion.Account
	12, // 15: ingestion.CloseStreamRequest.table_ident:type_name -> ingestion.TableIdentifier
	14, // 16: ingestion.CloseStreamResponse.status:type_name -> ingestion.ResponseStatus
	24, // 17: ingestion.StagingPathInfo.oss_path:type_name -> ingestion.OssStagingPathInfo
	25, // 18: ingestion.StagingPathInfo.cos_path:type_name -> ingestion.CosStagingPathInfo
	3,  // 19: ingestion.BulkLoadStreamInfo.stream_state:type_name -> ingestion.BulkLoadStreamState
	12, // 20: ingestion.BulkLoadStreamInfo.identifier:type_name -> ingestion.TableIdentifier
	4,  // 21: ingestion.BulkLoadStreamInfo.operation:type_name -> ingestion.BulkLoadStreamOperation
	19, // 22: ingestion.BulkLoadStreamInfo.stream_schema:type_name -> ingestion.StreamSchema
	47, // 23: ingestion.BulkLoadStreamInfo.encryption_options:type_name -> ingestion.BulkLoadStreamInfo.EncryptionOptionsEntry
	26, // 24: ingestion.BulkLoadStreamWriterConfig.staging_path:type_name -> ingestion.StagingPathInfo
	49, // 25: ingestion.BulkLoadStreamWriterConfig.file_format:type_name -> util.FileFormatType
	11, // 26: ingestion.CreateBulkLoadStreamRequest.account:type_name -> ingestion.Account
	12, // 27: ingestion.CreateBulkLoadStreamRequest.identifier:type_name -> ingestion.TableIdentifier
	4,  // 28: ingestion.CreateBulkLoadStreamRequest.operation:type_name -> ingestion.BulkLoadStreamOperation
	14, // 29: ingestion.CreateBulkLoadStreamResponse.status:type_name -> ingestion.ResponseStatus
	27, // 30: ingestion.CreateBulkLoadStreamResponse.info:type_name -> ingestion.BulkLoadStreamInfo
	11, // 31: ingestion.GetBulkLoadStreamRequest.account:type_name -> ingestion.Account
	12, // 32: ingestion.GetBulkLoadStreamRequest.identifier:type_name -> ingestion.TableIdentifier
	14, // 33: ingestion.GetBulkLoadStreamResponse.status:type_name -> ingestion.ResponseStatus
	27, // 34: ingestion.GetBulkLoadStreamResponse.info:type_name -> ingestion.BulkLoadStreamInfo
	11, // 35: ingestion.CommitBulkLoadStreamRequest.account:type_name -> ingestion.Account
	12, // 36: ingestion.CommitBulkLoadStreamRequest.identifier:type_name -> ingestion.TableIdentifier
	7,  // 37: ingestion.CommitBulkLoadStreamRequest.commit_mode:type_name -> ingestion.CommitBulkLoadStreamRequest.CommitMode
	14, // 38: ingestion.CommitBulkLoadStreamResponse.status:type_name -> ingestion.ResponseStatus
	27, // 39: ingestion.CommitBulkLoadStreamResponse.info:type_name -> ingestion.BulkLoadStreamInfo
	11, // 40: ingestion.OpenBulkLoadStreamWriterRequest.account:type_name -> ingestion.Account
	12, // 41: ingestion.OpenBulkLoadStreamWriterRequest.identifier:type_name -> ingestion.TableIdentifier
	14, // 42: ingestion.OpenBulkLoadStreamWriterResponse.status:type_name -> ingestion.ResponseStatus
	28, // 43: ingestion.OpenBulkLoadStreamWriterResponse.config:type_name -> ingestion.BulkLoadStreamWriterConfig
	11, // 44: ingestion.FinishBulkLoadStreamWriterRequest.account:type_name -> ingestion.Account
	12, // 45: ingestion.FinishBulkLoadStreamWriterRequest.identifier:type_name -> ingestion.TableIdentifier
	14, // 46: ingestion.FinishBulkLoadStreamWriterResponse.status:type_name -> ingestion.ResponseStatus
	12, // 47: ingestion.GetRouteWorkersRequest.table_ident:type_name -> ingestion.TableIdentifier
	5,  // 48: ingestion.GetRouteWorkersRequest.connect_mode:type_name -> ingestion.ConnectMode
	40, // 49: ingestion.GetRouteWorkersResponse.tuple:type_name -> ingestion.HostPortTuple
	14, // 50: ingestion.GetRouteWorkersResponse.status:type_name -> ingestion.ResponseStatus
	6,  // 51: ingestion.OperationTypeList.op_types:type_name -> ingestion.OperationType
	42, // 52: ingestion.DataBlock.row_op_type_list:type_name -> ingestion.OperationTypeList
	6,  // 53: ingestion.DataBlock.block_op_type:type_name -> ingestion.OperationType
	2,  // 54: ingestion.MutateRowStatus.code:type_name -> ingestion.Code
	11, // 55: ingestion.MutateRequest.account:type_name -> ingestion.Account
	12, // 56: ingestion.MutateRequest.table_ident:type_name -> ingestion.TableIdentifier
	43, // 57: ingestion.MutateRequest.data_blocks:type_name -> ingestion.DataBlock
	14, // 58: ingestion.MutateResponse.status:type_name -> ingestion.ResponseStatus
	44, // 59: ingestion.MutateResponse.row_status_list:type_name -> ingestion.MutateRowStatus
	8,  // 60: ingestion.IngestionControllerService.GatewayRpcCall:input_type -> ingestion.GatewayRequest
	20, // 61: ingestion.IngestionControllerService.CreateOrGetStream:input_type -> ingestion.CreateOrGetStreamRequest
	22, // 62: ingestion.IngestionControllerService.CloseStream:input_type -> ingestion.CloseStreamRequest
	39, // 63: ingestion.IngestionControllerService.GetRouteWorkers:input_type -> ingestion.GetRouteWorkersRequest
	29, // 64: ingestion.IngestionControllerService.CreateBulkLoadStream:input_type -> ingestion.CreateBulkLoadStreamRequest
	31, // 65: ingestion.IngestionControllerService.GetBulkLoadStream:input_type -> ingestion.GetBulkLoadStreamRequest
	33, // 66: ingestion.IngestionControllerService.CommitBulkLoadStream:input_type -> ingestion.CommitBulkLoadStreamRequest
	35, // 67: ingestion.IngestionControllerService.OpenBulkLoadStreamWriter:input_type -> ingestion.OpenBulkLoadStreamWriterRequest
	37, // 68: ingestion.IngestionControllerService.FinishBulkLoadStreamWriter:input_type -> ingestion.FinishBulkLoadStreamWriterRequest
	45, // 69: ingestion.IngestionWorkerService.Mutate:input_type -> ingestion.MutateRequest
	45, // 70: ingestion.IngestionWorkerService.MutateInternal:input_type -> ingestion.MutateRequest
	9,  // 71: ingestion.IngestionControllerService.GatewayRpcCall:output_type -> ingestion.GatewayResponse
	21, // 72: ingestion.IngestionControllerService.CreateOrGetStream:output_type -> ingestion.CreateOrGetStreamResponse
	23, // 73: ingestion.IngestionControllerService.CloseStream:output_type -> ingestion.CloseStreamResponse
	41, // 74: ingestion.IngestionControllerService.GetRouteWorkers:output_type -> ingestion.GetRouteWorkersResponse
	30, // 75: ingestion.IngestionControllerService.CreateBulkLoadStream:output_type -> ingestion.CreateBulkLoadStreamResponse
	32, // 76: ingestion.IngestionControllerService.GetBulkLoadStream:output_type -> ingestion.GetBulkLoadStreamResponse
	34, // 77: ingestion.IngestionControllerService.CommitBulkLoadStream:output_type -> ingestion.CommitBulkLoadStreamResponse
	36, // 78: ingestion.IngestionControllerService.OpenBulkLoadStreamWriter:output_type -> ingestion.OpenBulkLoadStreamWriterResponse
	38, // 79: ingestion.IngestionControllerService.FinishBulkLoadStreamWriter:output_type -> ingestion.FinishBulkLoadStreamWriterResponse
	46, // 80: ingestion.IngestionWorkerService.Mutate:output_type -> ingestion.MutateResponse
	46, // 81: ingestion.IngestionWorkerService.MutateInternal:output_type -> ingestion.MutateResponse
	71, // [71:82] is the sub-list for method output_type
	60, // [60:71] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_ingestion_ingestion_proto_init() }
func file_ingestion_ingestion_proto_init() {
	if File_ingestion_ingestion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ingestion_ingestion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateWayResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryKeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrGetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrGetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OssStagingPathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosStagingPathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StagingPathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadStreamWriterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulkLoadStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulkLoadStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkLoadStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkLoadStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBulkLoadStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBulkLoadStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBulkLoadStreamWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBulkLoadStreamWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishBulkLoadStreamWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishBulkLoadStreamWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteWorkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPortTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteWorkersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateRowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingestion_ingestion_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ingestion_ingestion_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*StagingPathInfo_OssPath)(nil),
		(*StagingPathInfo_CosPath)(nil),
	}
	file_ingestion_ingestion_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*DataBlock_RowOpTypeList)(nil),
		(*DataBlock_BlockOpType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ingestion_ingestion_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ingestion_ingestion_proto_goTypes,
		DependencyIndexes: file_ingestion_ingestion_proto_depIdxs,
		EnumInfos:         file_ingestion_ingestion_proto_enumTypes,
		MessageInfos:      file_ingestion_ingestion_proto_msgTypes,
	}.Build()
	File_ingestion_ingestion_proto = out.File
	file_ingestion_ingestion_proto_rawDesc = nil
	file_ingestion_ingestion_proto_goTypes = nil
	file_ingestion_ingestion_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngestionControllerServiceClient is the client API for IngestionControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestionControllerServiceClient interface {
	GatewayRpcCall(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error)
	CreateOrGetStream(ctx context.Context, in *CreateOrGetStreamRequest, opts ...grpc.CallOption) (*CreateOrGetStreamResponse, error)
	CloseStream(ctx context.Context, in *CloseStreamRequest, opts ...grpc.CallOption) (*CloseStreamResponse, error)
	GetRouteWorkers(ctx context.Context, in *GetRouteWorkersRequest, opts ...grpc.CallOption) (*GetRouteWorkersResponse, error)
	CreateBulkLoadStream(ctx context.Context, in *CreateBulkLoadStreamRequest, opts ...grpc.CallOption) (*CreateBulkLoadStreamResponse, error)
	GetBulkLoadStream(ctx context.Context, in *GetBulkLoadStreamRequest, opts ...grpc.CallOption) (*GetBulkLoadStreamResponse, error)
	CommitBulkLoadStream(ctx context.Context, in *CommitBulkLoadStreamRequest, opts ...grpc.CallOption) (*CommitBulkLoadStreamResponse, error)
	OpenBulkLoadStreamWriter(ctx context.Context, in *OpenBulkLoadStreamWriterRequest, opts ...grpc.CallOption) (*OpenBulkLoadStreamWriterResponse, error)
	FinishBulkLoadStreamWriter(ctx context.Context, in *FinishBulkLoadStreamWriterRequest, opts ...grpc.CallOption) (*FinishBulkLoadStreamWriterResponse, error)
}

type ingestionControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionControllerServiceClient(cc grpc.ClientConnInterface) IngestionControllerServiceClient {
	return &ingestionControllerServiceClient{cc}
}

func (c *ingestionControllerServiceClient) GatewayRpcCall(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error) {
	out := new(GatewayResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/GatewayRpcCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) CreateOrGetStream(ctx context.Context, in *CreateOrGetStreamRequest, opts ...grpc.CallOption) (*CreateOrGetStreamResponse, error) {
	out := new(CreateOrGetStreamResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/CreateOrGetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) CloseStream(ctx context.Context, in *CloseStreamRequest, opts ...grpc.CallOption) (*CloseStreamResponse, error) {
	out := new(CloseStreamResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/CloseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) GetRouteWorkers(ctx context.Context, in *GetRouteWorkersRequest, opts ...grpc.CallOption) (*GetRouteWorkersResponse, error) {
	out := new(GetRouteWorkersResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/GetRouteWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) CreateBulkLoadStream(ctx context.Context, in *CreateBulkLoadStreamRequest, opts ...grpc.CallOption) (*CreateBulkLoadStreamResponse, error) {
	out := new(CreateBulkLoadStreamResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/CreateBulkLoadStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) GetBulkLoadStream(ctx context.Context, in *GetBulkLoadStreamRequest, opts ...grpc.CallOption) (*GetBulkLoadStreamResponse, error) {
	out := new(GetBulkLoadStreamResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/GetBulkLoadStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) CommitBulkLoadStream(ctx context.Context, in *CommitBulkLoadStreamRequest, opts ...grpc.CallOption) (*CommitBulkLoadStreamResponse, error) {
	out := new(CommitBulkLoadStreamResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/CommitBulkLoadStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) OpenBulkLoadStreamWriter(ctx context.Context, in *OpenBulkLoadStreamWriterRequest, opts ...grpc.CallOption) (*OpenBulkLoadStreamWriterResponse, error) {
	out := new(OpenBulkLoadStreamWriterResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/OpenBulkLoadStreamWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionControllerServiceClient) FinishBulkLoadStreamWriter(ctx context.Context, in *FinishBulkLoadStreamWriterRequest, opts ...grpc.CallOption) (*FinishBulkLoadStreamWriterResponse, error) {
	out := new(FinishBulkLoadStreamWriterResponse)
	err := c.cc.Invoke(ctx, "/ingestion.IngestionControllerService/FinishBulkLoadStreamWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionControllerServiceServer is the server API for IngestionControllerService service.
type IngestionControllerServiceServer interface {
	GatewayRpcCall(context.Context, *GatewayRequest) (*GatewayResponse, error)
	CreateOrGetStream(context.Context, *CreateOrGetStreamRequest) (*CreateOrGetStreamResponse, error)
	CloseStream(context.Context, *CloseStreamRequest) (*CloseStreamResponse, error)
	GetRouteWorkers(context.Context, *GetRouteWorkersRequest) (*GetRouteWorkersResponse, error)
	CreateBulkLoadStream(context.Context, *CreateBulkLoadStreamRequest) (*CreateBulkLoadStreamResponse, error)
	GetBulkLoadStream(context.Context, *GetBulkLoadStreamRequest) (*GetBulkLoadStreamResponse, error)
	CommitBulkLoadStream(context.Context, *CommitBulkLoadStreamRequest) (*CommitBulkLoadStreamResponse, error)
	OpenBulkLoadStreamWriter(context.Context, *OpenBulkLoadStreamWriterRequest) (*OpenBulkLoadStreamWriterResponse, error)
	FinishBulkLoadStreamWriter(context.Context, *FinishBulkLoadStreamWriterRequest) (*FinishBulkLoadStreamWriterResponse, error)
}

// UnimplementedIngestionControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngestionControllerServiceServer struct {
}

func (*UnimplementedIngestionControllerServiceServer) GatewayRpcCall(context.Context, *GatewayRequest) (*GatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayRpcCall not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) CreateOrGetStream(context.Context, *CreateOrGetStreamRequest) (*CreateOrGetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrGetStream not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) CloseStream(context.Context, *CloseStreamRequest) (*CloseStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStream not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) GetRouteWorkers(context.Context, *GetRouteWorkersRequest) (*GetRouteWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteWorkers not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) CreateBulkLoadStream(context.Context, *CreateBulkLoadStreamRequest) (*CreateBulkLoadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkLoadStream not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) GetBulkLoadStream(context.Context, *GetBulkLoadStreamRequest) (*GetBulkLoadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkLoadStream not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) CommitBulkLoadStream(context.Context, *CommitBulkLoadStreamRequest) (*CommitBulkLoadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBulkLoadStream not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) OpenBulkLoadStreamWriter(context.Context, *OpenBulkLoadStreamWriterRequest) (*OpenBulkLoadStreamWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBulkLoadStreamWriter not implemented")
}
func (*UnimplementedIngestionControllerServiceServer) FinishBulkLoadStreamWriter(context.Context, *FinishBulkLoadStreamWriterRequest) (*FinishBulkLoadStreamWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishBulkLoadStreamWriter not implemented")
}

func RegisterIngestionControllerServiceServer(s *grpc.Server, srv IngestionControllerServiceServer) {
	s.RegisterService(&_IngestionControllerService_serviceDesc, srv)
}

func _IngestionControllerService_GatewayRpcCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).GatewayRpcCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/GatewayRpcCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).GatewayRpcCall(ctx, req.(*GatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_CreateOrGetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrGetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).CreateOrGetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/CreateOrGetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).CreateOrGetStream(ctx, req.(*CreateOrGetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_CloseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).CloseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/CloseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).CloseStream(ctx, req.(*CloseStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_GetRouteWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).GetRouteWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/GetRouteWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).GetRouteWorkers(ctx, req.(*GetRouteWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_CreateBulkLoadStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkLoadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).CreateBulkLoadStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/CreateBulkLoadStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).CreateBulkLoadStream(ctx, req.(*CreateBulkLoadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_GetBulkLoadStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkLoadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).GetBulkLoadStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/GetBulkLoadStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).GetBulkLoadStream(ctx, req.(*GetBulkLoadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_CommitBulkLoadStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitBulkLoadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).CommitBulkLoadStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/CommitBulkLoadStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).CommitBulkLoadStream(ctx, req.(*CommitBulkLoadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_OpenBulkLoadStreamWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenBulkLoadStreamWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).OpenBulkLoadStreamWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/OpenBulkLoadStreamWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).OpenBulkLoadStreamWriter(ctx, req.(*OpenBulkLoadStreamWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionControllerService_FinishBulkLoadStreamWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishBulkLoadStreamWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionControllerServiceServer).FinishBulkLoadStreamWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestion.IngestionControllerService/FinishBulkLoadStreamWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionControllerServiceServer).FinishBulkLoadStreamWriter(ctx, req.(*FinishBulkLoadStreamWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngestionControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.IngestionControllerService",
	HandlerType: (*IngestionControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatewayRpcCall",
			Handler:    _IngestionControllerService_GatewayRpcCall_Handler,
		},
		{
			MethodName: "CreateOrGetStream",
			Handler:    _IngestionControllerService_CreateOrGetStream_Handler,
		},
		{
			MethodName: "CloseStream",
			Handler:    _IngestionControllerService_CloseStream_Handler,
		},
		{
			MethodName: "GetRouteWorkers",
			Handler:    _IngestionControllerService_GetRouteWorkers_Handler,
		},
		{
			MethodName: "CreateBulkLoadStream",
			Handler:    _IngestionControllerService_CreateBulkLoadStream_Handler,
		},
		{
			MethodName: "GetBulkLoadStream",
			Handler:    _IngestionControllerService_GetBulkLoadStream_Handler,
		},
		{
			MethodName: "CommitBulkLoadStream",
			Handler:    _IngestionControllerService_CommitBulkLoadStream_Handler,
		},
		{
			MethodName: "OpenBulkLoadStreamWriter",
			Handler:    _IngestionControllerService_OpenBulkLoadStreamWriter_Handler,
		},
		{
			MethodName: "FinishBulkLoadStreamWriter",
			Handler:    _IngestionControllerService_FinishBulkLoadStreamWriter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestion/ingestion.proto",
}

// IngestionWorkerServiceClient is the client API for IngestionWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestionWorkerServiceClient interface {
	Mutate(ctx context.Context, opts ...grpc.CallOption) (IngestionWorkerService_MutateClient, error)
	MutateInternal(ctx context.Context, opts ...grpc.CallOption) (IngestionWorkerService_MutateInternalClient, error)
}

type ingestionWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionWorkerServiceClient(cc grpc.ClientConnInterface) IngestionWorkerServiceClient {
	return &ingestionWorkerServiceClient{cc}
}

func (c *ingestionWorkerServiceClient) Mutate(ctx context.Context, opts ...grpc.CallOption) (IngestionWorkerService_MutateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IngestionWorkerService_serviceDesc.Streams[0], "/ingestion.IngestionWorkerService/Mutate", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestionWorkerServiceMutateClient{stream}
	return x, nil
}

type IngestionWorkerService_MutateClient interface {
	Send(*MutateRequest) error
	Recv() (*MutateResponse, error)
	grpc.ClientStream
}

type ingestionWorkerServiceMutateClient struct {
	grpc.ClientStream
}

func (x *ingestionWorkerServiceMutateClient) Send(m *MutateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestionWorkerServiceMutateClient) Recv() (*MutateResponse, error) {
	m := new(MutateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ingestionWorkerServiceClient) MutateInternal(ctx context.Context, opts ...grpc.CallOption) (IngestionWorkerService_MutateInternalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IngestionWorkerService_serviceDesc.Streams[1], "/ingestion.IngestionWorkerService/MutateInternal", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestionWorkerServiceMutateInternalClient{stream}
	return x, nil
}

type IngestionWorkerService_MutateInternalClient interface {
	Send(*MutateRequest) error
	Recv() (*MutateResponse, error)
	grpc.ClientStream
}

type ingestionWorkerServiceMutateInternalClient struct {
	grpc.ClientStream
}

func (x *ingestionWorkerServiceMutateInternalClient) Send(m *MutateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestionWorkerServiceMutateInternalClient) Recv() (*MutateResponse, error) {
	m := new(MutateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestionWorkerServiceServer is the server API for IngestionWorkerService service.
type IngestionWorkerServiceServer interface {
	Mutate(IngestionWorkerService_MutateServer) error
	MutateInternal(IngestionWorkerService_MutateInternalServer) error
}

// UnimplementedIngestionWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngestionWorkerServiceServer struct {
}

func (*UnimplementedIngestionWorkerServiceServer) Mutate(IngestionWorkerService_MutateServer) error {
	return status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (*UnimplementedIngestionWorkerServiceServer) MutateInternal(IngestionWorkerService_MutateInternalServer) error {
	return status.Errorf(codes.Unimplemented, "method MutateInternal not implemented")
}

func RegisterIngestionWorkerServiceServer(s *grpc.Server, srv IngestionWorkerServiceServer) {
	s.RegisterService(&_IngestionWorkerService_serviceDesc, srv)
}

func _IngestionWorkerService_Mutate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionWorkerServiceServer).Mutate(&ingestionWorkerServiceMutateServer{stream})
}

type IngestionWorkerService_MutateServer interface {
	Send(*MutateResponse) error
	Recv() (*MutateRequest, error)
	grpc.ServerStream
}

type ingestionWorkerServiceMutateServer struct {
	grpc.ServerStream
}

func (x *ingestionWorkerServiceMutateServer) Send(m *MutateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestionWorkerServiceMutateServer) Recv() (*MutateRequest, error) {
	m := new(MutateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IngestionWorkerService_MutateInternal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionWorkerServiceServer).MutateInternal(&ingestionWorkerServiceMutateInternalServer{stream})
}

type IngestionWorkerService_MutateInternalServer interface {
	Send(*MutateResponse) error
	Recv() (*MutateRequest, error)
	grpc.ServerStream
}

type ingestionWorkerServiceMutateInternalServer struct {
	grpc.ServerStream
}

func (x *ingestionWorkerServiceMutateInternalServer) Send(m *MutateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestionWorkerServiceMutateInternalServer) Recv() (*MutateRequest, error) {
	m := new(MutateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IngestionWorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.IngestionWorkerService",
	HandlerType: (*IngestionWorkerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Mutate",
			Handler:       _IngestionWorkerService_Mutate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MutateInternal",
			Handler:       _IngestionWorkerService_MutateInternal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ingestion/ingestion.proto",
}
