// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: rm/virtual_cluster.proto

package rm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// general protos
type VClusterSize int32

const (
	VClusterSize_XSMALL  VClusterSize = 0
	VClusterSize_SMALL   VClusterSize = 1
	VClusterSize_MEDIUM  VClusterSize = 2
	VClusterSize_LARGE   VClusterSize = 3
	VClusterSize_XLARGE  VClusterSize = 4
	VClusterSize_X2LARGE VClusterSize = 5
	VClusterSize_X3LARGE VClusterSize = 6
	VClusterSize_X4LARGE VClusterSize = 7
	VClusterSize_X5LARGE VClusterSize = 8
	VClusterSize_X6LARGE VClusterSize = 9
	// internal size type
	VClusterSize_CUSTOMIZED3  VClusterSize = 101 // customized spec for 3 executors (24 cores)
	VClusterSize_CUSTOMIZED52 VClusterSize = 102 // customized spec for 52 executors (416 cores)
	VClusterSize_CUSTOMIZED48 VClusterSize = 103 // customized spec for 48 executors (384 cores)
	VClusterSize_CUSTOMIZED12 VClusterSize = 104 // customized spec for 12 executors (96 cores)
)

// Enum value maps for VClusterSize.
var (
	VClusterSize_name = map[int32]string{
		0:   "XSMALL",
		1:   "SMALL",
		2:   "MEDIUM",
		3:   "LARGE",
		4:   "XLARGE",
		5:   "X2LARGE",
		6:   "X3LARGE",
		7:   "X4LARGE",
		8:   "X5LARGE",
		9:   "X6LARGE",
		101: "CUSTOMIZED3",
		102: "CUSTOMIZED52",
		103: "CUSTOMIZED48",
		104: "CUSTOMIZED12",
	}
	VClusterSize_value = map[string]int32{
		"XSMALL":       0,
		"SMALL":        1,
		"MEDIUM":       2,
		"LARGE":        3,
		"XLARGE":       4,
		"X2LARGE":      5,
		"X3LARGE":      6,
		"X4LARGE":      7,
		"X5LARGE":      8,
		"X6LARGE":      9,
		"CUSTOMIZED3":  101,
		"CUSTOMIZED52": 102,
		"CUSTOMIZED48": 103,
		"CUSTOMIZED12": 104,
	}
)

func (x VClusterSize) Enum() *VClusterSize {
	p := new(VClusterSize)
	*p = x
	return p
}

func (x VClusterSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VClusterSize) Descriptor() protoreflect.EnumDescriptor {
	return file_rm_virtual_cluster_proto_enumTypes[0].Descriptor()
}

func (VClusterSize) Type() protoreflect.EnumType {
	return &file_rm_virtual_cluster_proto_enumTypes[0]
}

func (x VClusterSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VClusterSize.Descriptor instead.
func (VClusterSize) EnumDescriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{0}
}

type VClusterType int32

const (
	VClusterType_GENERAL   VClusterType = 0
	VClusterType_ANALYTICS VClusterType = 1
)

// Enum value maps for VClusterType.
var (
	VClusterType_name = map[int32]string{
		0: "GENERAL",
		1: "ANALYTICS",
	}
	VClusterType_value = map[string]int32{
		"GENERAL":   0,
		"ANALYTICS": 1,
	}
)

func (x VClusterType) Enum() *VClusterType {
	p := new(VClusterType)
	*p = x
	return p
}

func (x VClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_rm_virtual_cluster_proto_enumTypes[1].Descriptor()
}

func (VClusterType) Type() protoreflect.EnumType {
	return &file_rm_virtual_cluster_proto_enumTypes[1]
}

func (x VClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VClusterType.Descriptor instead.
func (VClusterType) EnumDescriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{1}
}

type ScalePolicy int32

const (
	ScalePolicy_STANDARD ScalePolicy = 0 // ECONOMY = 1; // not supported in MVP
)

// Enum value maps for ScalePolicy.
var (
	ScalePolicy_name = map[int32]string{
		0: "STANDARD",
	}
	ScalePolicy_value = map[string]int32{
		"STANDARD": 0,
	}
)

func (x ScalePolicy) Enum() *ScalePolicy {
	p := new(ScalePolicy)
	*p = x
	return p
}

func (x ScalePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_rm_virtual_cluster_proto_enumTypes[2].Descriptor()
}

func (ScalePolicy) Type() protoreflect.EnumType {
	return &file_rm_virtual_cluster_proto_enumTypes[2]
}

func (x ScalePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalePolicy.Descriptor instead.
func (ScalePolicy) EnumDescriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{2}
}

type VirtualClusterState int32

const (
	VirtualClusterState_SUSPENDED    VirtualClusterState = 0
	VirtualClusterState_RUNNING      VirtualClusterState = 1
	VirtualClusterState_STARTING     VirtualClusterState = 2
	VirtualClusterState_SCALING_UP   VirtualClusterState = 3
	VirtualClusterState_SCALING_DOWN VirtualClusterState = 4
	VirtualClusterState_SUSPENDING   VirtualClusterState = 5
	VirtualClusterState_DROPPING     VirtualClusterState = 6
	VirtualClusterState_ERROR        VirtualClusterState = 7
	VirtualClusterState_DELETED      VirtualClusterState = 8
	VirtualClusterState_RESUMING     VirtualClusterState = 9
	VirtualClusterState_CANCELLING   VirtualClusterState = 10
)

// Enum value maps for VirtualClusterState.
var (
	VirtualClusterState_name = map[int32]string{
		0:  "SUSPENDED",
		1:  "RUNNING",
		2:  "STARTING",
		3:  "SCALING_UP",
		4:  "SCALING_DOWN",
		5:  "SUSPENDING",
		6:  "DROPPING",
		7:  "ERROR",
		8:  "DELETED",
		9:  "RESUMING",
		10: "CANCELLING",
	}
	VirtualClusterState_value = map[string]int32{
		"SUSPENDED":    0,
		"RUNNING":      1,
		"STARTING":     2,
		"SCALING_UP":   3,
		"SCALING_DOWN": 4,
		"SUSPENDING":   5,
		"DROPPING":     6,
		"ERROR":        7,
		"DELETED":      8,
		"RESUMING":     9,
		"CANCELLING":   10,
	}
)

func (x VirtualClusterState) Enum() *VirtualClusterState {
	p := new(VirtualClusterState)
	*p = x
	return p
}

func (x VirtualClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_rm_virtual_cluster_proto_enumTypes[3].Descriptor()
}

func (VirtualClusterState) Type() protoreflect.EnumType {
	return &file_rm_virtual_cluster_proto_enumTypes[3]
}

func (x VirtualClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualClusterState.Descriptor instead.
func (VirtualClusterState) EnumDescriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{3}
}

// rpc status
type Status int32

const (
	Status_SUCCEEDED Status = 0
	Status_FAILED    Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "SUCCEEDED",
		1: "FAILED",
	}
	Status_value = map[string]int32{
		"SUCCEEDED": 0,
		"FAILED":    1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rm_virtual_cluster_proto_enumTypes[4].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_rm_virtual_cluster_proto_enumTypes[4]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{4}
}

type AnalyticsProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinReplicas              *int32       `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3,oneof" json:"min_replicas,omitempty"`
	MaxReplicas              *int32       `protobuf:"varint,2,opt,name=max_replicas,json=maxReplicas,proto3,oneof" json:"max_replicas,omitempty"`
	MaxConcurrencyPerReplica *int32       `protobuf:"varint,3,opt,name=max_concurrency_per_replica,json=maxConcurrencyPerReplica,proto3,oneof" json:"max_concurrency_per_replica,omitempty"`
	ScalePolicy              *ScalePolicy `protobuf:"varint,4,opt,name=scale_policy,json=scalePolicy,proto3,enum=rm.ScalePolicy,oneof" json:"scale_policy,omitempty"`
	PreloadTables            *string      `protobuf:"bytes,5,opt,name=preload_tables,json=preloadTables,proto3,oneof" json:"preload_tables,omitempty"`
}

func (x *AnalyticsProperties) Reset() {
	*x = AnalyticsProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsProperties) ProtoMessage() {}

func (x *AnalyticsProperties) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsProperties.ProtoReflect.Descriptor instead.
func (*AnalyticsProperties) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsProperties) GetMinReplicas() int32 {
	if x != nil && x.MinReplicas != nil {
		return *x.MinReplicas
	}
	return 0
}

func (x *AnalyticsProperties) GetMaxReplicas() int32 {
	if x != nil && x.MaxReplicas != nil {
		return *x.MaxReplicas
	}
	return 0
}

func (x *AnalyticsProperties) GetMaxConcurrencyPerReplica() int32 {
	if x != nil && x.MaxConcurrencyPerReplica != nil {
		return *x.MaxConcurrencyPerReplica
	}
	return 0
}

func (x *AnalyticsProperties) GetScalePolicy() ScalePolicy {
	if x != nil && x.ScalePolicy != nil {
		return *x.ScalePolicy
	}
	return ScalePolicy_STANDARD
}

func (x *AnalyticsProperties) GetPreloadTables() string {
	if x != nil && x.PreloadTables != nil {
		return *x.PreloadTables
	}
	return ""
}

type GeneralProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterMaxSize *VClusterSize `protobuf:"varint,1,opt,name=cluster_max_size,json=clusterMaxSize,proto3,enum=rm.VClusterSize,oneof" json:"cluster_max_size,omitempty"`
}

func (x *GeneralProperties) Reset() {
	*x = GeneralProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralProperties) ProtoMessage() {}

func (x *GeneralProperties) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralProperties.ProtoReflect.Descriptor instead.
func (*GeneralProperties) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralProperties) GetClusterMaxSize() VClusterSize {
	if x != nil && x.ClusterMaxSize != nil {
		return *x.ClusterMaxSize
	}
	return VClusterSize_XSMALL
}

type VCResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory       *int64 `protobuf:"varint,1,opt,name=memory,proto3,oneof" json:"memory,omitempty"`
	VirtualCores *int32 `protobuf:"varint,2,opt,name=virtual_cores,json=virtualCores,proto3,oneof" json:"virtual_cores,omitempty"`
}

func (x *VCResource) Reset() {
	*x = VCResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCResource) ProtoMessage() {}

func (x *VCResource) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCResource.ProtoReflect.Descriptor instead.
func (*VCResource) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *VCResource) GetMemory() int64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *VCResource) GetVirtualCores() int32 {
	if x != nil && x.VirtualCores != nil {
		return *x.VirtualCores
	}
	return 0
}

type VirtualClusterProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string       `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	InstanceId  *int64        `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	WorkspaceId *int64        `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
	ClusterType *VClusterType `protobuf:"varint,4,opt,name=cluster_type,json=clusterType,proto3,enum=rm.VClusterType,oneof" json:"cluster_type,omitempty"`
	ClusterSize *VClusterSize `protobuf:"varint,5,opt,name=cluster_size,json=clusterSize,proto3,enum=rm.VClusterSize,oneof" json:"cluster_size,omitempty"`
	// Types that are assignable to ResourceOneof:
	//
	//	*VirtualClusterProperties_AnalyticsProperties
	//	*VirtualClusterProperties_GeneralProperties
	ResourceOneof            isVirtualClusterProperties_ResourceOneof `protobuf_oneof:"resource_oneof"`
	AutoStopLatencySec       *int32                                   `protobuf:"varint,8,opt,name=auto_stop_latency_sec,json=autoStopLatencySec,proto3,oneof" json:"auto_stop_latency_sec,omitempty"`
	AutoStartEnabled         *bool                                    `protobuf:"varint,9,opt,name=auto_start_enabled,json=autoStartEnabled,proto3,oneof" json:"auto_start_enabled,omitempty"`
	Tag                      map[string]string                        `protobuf:"bytes,10,rep,name=tag,proto3" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Comment                  *string                                  `protobuf:"bytes,11,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	QueryProcessTimeLimitSec *int32                                   `protobuf:"varint,13,opt,name=query_process_time_limit_sec,json=queryProcessTimeLimitSec,proto3,oneof" json:"query_process_time_limit_sec,omitempty"`
	CreateTimeMs             *int64                                   `protobuf:"varint,14,opt,name=create_time_ms,json=createTimeMs,proto3,oneof" json:"create_time_ms,omitempty"`
	LastModifyTimeMs         *int64                                   `protobuf:"varint,15,opt,name=last_modify_time_ms,json=lastModifyTimeMs,proto3,oneof" json:"last_modify_time_ms,omitempty"`
	CreatorUserId            *int64                                   `protobuf:"varint,16,opt,name=creator_user_id,json=creatorUserId,proto3,oneof" json:"creator_user_id,omitempty"`
	Version                  *string                                  `protobuf:"bytes,17,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *VirtualClusterProperties) Reset() {
	*x = VirtualClusterProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualClusterProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualClusterProperties) ProtoMessage() {}

func (x *VirtualClusterProperties) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualClusterProperties.ProtoReflect.Descriptor instead.
func (*VirtualClusterProperties) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualClusterProperties) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VirtualClusterProperties) GetInstanceId() int64 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *VirtualClusterProperties) GetWorkspaceId() int64 {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return 0
}

func (x *VirtualClusterProperties) GetClusterType() VClusterType {
	if x != nil && x.ClusterType != nil {
		return *x.ClusterType
	}
	return VClusterType_GENERAL
}

func (x *VirtualClusterProperties) GetClusterSize() VClusterSize {
	if x != nil && x.ClusterSize != nil {
		return *x.ClusterSize
	}
	return VClusterSize_XSMALL
}

func (m *VirtualClusterProperties) GetResourceOneof() isVirtualClusterProperties_ResourceOneof {
	if m != nil {
		return m.ResourceOneof
	}
	return nil
}

func (x *VirtualClusterProperties) GetAnalyticsProperties() *AnalyticsProperties {
	if x, ok := x.GetResourceOneof().(*VirtualClusterProperties_AnalyticsProperties); ok {
		return x.AnalyticsProperties
	}
	return nil
}

func (x *VirtualClusterProperties) GetGeneralProperties() *GeneralProperties {
	if x, ok := x.GetResourceOneof().(*VirtualClusterProperties_GeneralProperties); ok {
		return x.GeneralProperties
	}
	return nil
}

func (x *VirtualClusterProperties) GetAutoStopLatencySec() int32 {
	if x != nil && x.AutoStopLatencySec != nil {
		return *x.AutoStopLatencySec
	}
	return 0
}

func (x *VirtualClusterProperties) GetAutoStartEnabled() bool {
	if x != nil && x.AutoStartEnabled != nil {
		return *x.AutoStartEnabled
	}
	return false
}

func (x *VirtualClusterProperties) GetTag() map[string]string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *VirtualClusterProperties) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *VirtualClusterProperties) GetQueryProcessTimeLimitSec() int32 {
	if x != nil && x.QueryProcessTimeLimitSec != nil {
		return *x.QueryProcessTimeLimitSec
	}
	return 0
}

func (x *VirtualClusterProperties) GetCreateTimeMs() int64 {
	if x != nil && x.CreateTimeMs != nil {
		return *x.CreateTimeMs
	}
	return 0
}

func (x *VirtualClusterProperties) GetLastModifyTimeMs() int64 {
	if x != nil && x.LastModifyTimeMs != nil {
		return *x.LastModifyTimeMs
	}
	return 0
}

func (x *VirtualClusterProperties) GetCreatorUserId() int64 {
	if x != nil && x.CreatorUserId != nil {
		return *x.CreatorUserId
	}
	return 0
}

func (x *VirtualClusterProperties) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type isVirtualClusterProperties_ResourceOneof interface {
	isVirtualClusterProperties_ResourceOneof()
}

type VirtualClusterProperties_AnalyticsProperties struct {
	AnalyticsProperties *AnalyticsProperties `protobuf:"bytes,6,opt,name=analytics_properties,json=analyticsProperties,proto3,oneof"`
}

type VirtualClusterProperties_GeneralProperties struct {
	GeneralProperties *GeneralProperties `protobuf:"bytes,7,opt,name=general_properties,json=generalProperties,proto3,oneof"`
}

func (*VirtualClusterProperties_AnalyticsProperties) isVirtualClusterProperties_ResourceOneof() {}

func (*VirtualClusterProperties_GeneralProperties) isVirtualClusterProperties_ResourceOneof() {}

type RequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
	OperatorToken []byte  `protobuf:"bytes,2,opt,name=operator_token,json=operatorToken,proto3,oneof" json:"operator_token,omitempty"`
}

func (x *RequestInfo) Reset() {
	*x = RequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInfo) ProtoMessage() {}

func (x *RequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInfo.ProtoReflect.Descriptor instead.
func (*RequestInfo) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *RequestInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *RequestInfo) GetOperatorToken() []byte {
	if x != nil {
		return x.OperatorToken
	}
	return nil
}

type ResponseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
	Status    *Status `protobuf:"varint,2,opt,name=status,proto3,enum=rm.Status,oneof" json:"status,omitempty"`
	ErrorCode *string `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
}

func (x *ResponseInfo) Reset() {
	*x = ResponseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rm_virtual_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInfo) ProtoMessage() {}

func (x *ResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rm_virtual_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInfo.ProtoReflect.Descriptor instead.
func (*ResponseInfo) Descriptor() ([]byte, []int) {
	return file_rm_virtual_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *ResponseInfo) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_SUCCEEDED
}

func (x *ResponseInfo) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *ResponseInfo) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

var File_rm_virtual_cluster_proto protoreflect.FileDescriptor

var file_rm_virtual_cluster_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x6d, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x72, 0x6d, 0x22, 0xf4,
	0x02, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x18, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x72, 0x6d, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x70, 0x0a, 0x0a, 0x56, 0x43, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x22, 0xfd, 0x08, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72,
	0x6d, 0x2e, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6d, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x18, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0a, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0b, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x72, 0x6d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x2a, 0xd0,
	0x01, 0x0a, 0x0c, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x58, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x32, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x33, 0x4c, 0x41, 0x52, 0x47,
	0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x34, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x58, 0x35, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a,
	0x07, 0x58, 0x36, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x33, 0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x35, 0x32, 0x10, 0x66, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x34, 0x38, 0x10, 0x67, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x31, 0x32, 0x10,
	0x68, 0x2a, 0x2a, 0x0a, 0x0c, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x10, 0x01, 0x2a, 0x1b, 0x0a,
	0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x2a, 0xb5, 0x01, 0x0a, 0x13, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x49, 0x4e, 0x47,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x2a, 0x23, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74, 0x74, 0x61,
	0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x72, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rm_virtual_cluster_proto_rawDescOnce sync.Once
	file_rm_virtual_cluster_proto_rawDescData = file_rm_virtual_cluster_proto_rawDesc
)

func file_rm_virtual_cluster_proto_rawDescGZIP() []byte {
	file_rm_virtual_cluster_proto_rawDescOnce.Do(func() {
		file_rm_virtual_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_rm_virtual_cluster_proto_rawDescData)
	})
	return file_rm_virtual_cluster_proto_rawDescData
}

var file_rm_virtual_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_rm_virtual_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_rm_virtual_cluster_proto_goTypes = []interface{}{
	(VClusterSize)(0),                // 0: rm.VClusterSize
	(VClusterType)(0),                // 1: rm.VClusterType
	(ScalePolicy)(0),                 // 2: rm.ScalePolicy
	(VirtualClusterState)(0),         // 3: rm.VirtualClusterState
	(Status)(0),                      // 4: rm.Status
	(*AnalyticsProperties)(nil),      // 5: rm.AnalyticsProperties
	(*GeneralProperties)(nil),        // 6: rm.GeneralProperties
	(*VCResource)(nil),               // 7: rm.VCResource
	(*VirtualClusterProperties)(nil), // 8: rm.VirtualClusterProperties
	(*RequestInfo)(nil),              // 9: rm.RequestInfo
	(*ResponseInfo)(nil),             // 10: rm.ResponseInfo
	nil,                              // 11: rm.VirtualClusterProperties.TagEntry
}
var file_rm_virtual_cluster_proto_depIdxs = []int32{
	2,  // 0: rm.AnalyticsProperties.scale_policy:type_name -> rm.ScalePolicy
	0,  // 1: rm.GeneralProperties.cluster_max_size:type_name -> rm.VClusterSize
	1,  // 2: rm.VirtualClusterProperties.cluster_type:type_name -> rm.VClusterType
	0,  // 3: rm.VirtualClusterProperties.cluster_size:type_name -> rm.VClusterSize
	5,  // 4: rm.VirtualClusterProperties.analytics_properties:type_name -> rm.AnalyticsProperties
	6,  // 5: rm.VirtualClusterProperties.general_properties:type_name -> rm.GeneralProperties
	11, // 6: rm.VirtualClusterProperties.tag:type_name -> rm.VirtualClusterProperties.TagEntry
	4,  // 7: rm.ResponseInfo.status:type_name -> rm.Status
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_rm_virtual_cluster_proto_init() }
func file_rm_virtual_cluster_proto_init() {
	if File_rm_virtual_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rm_virtual_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rm_virtual_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rm_virtual_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rm_virtual_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualClusterProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rm_virtual_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rm_virtual_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rm_virtual_cluster_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rm_virtual_cluster_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rm_virtual_cluster_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_rm_virtual_cluster_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*VirtualClusterProperties_AnalyticsProperties)(nil),
		(*VirtualClusterProperties_GeneralProperties)(nil),
	}
	file_rm_virtual_cluster_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rm_virtual_cluster_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rm_virtual_cluster_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rm_virtual_cluster_proto_goTypes,
		DependencyIndexes: file_rm_virtual_cluster_proto_depIdxs,
		EnumInfos:         file_rm_virtual_cluster_proto_enumTypes,
		MessageInfos:      file_rm_virtual_cluster_proto_msgTypes,
	}.Build()
	File_rm_virtual_cluster_proto = out.File
	file_rm_virtual_cluster_proto_rawDesc = nil
	file_rm_virtual_cluster_proto_goTypes = nil
	file_rm_virtual_cluster_proto_depIdxs = nil
}
