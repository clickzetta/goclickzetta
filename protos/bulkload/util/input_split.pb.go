// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: util/input_split.proto

package util

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InputSplitType int32

const (
	InputSplitType_FILE_RANGE InputSplitType = 0
	InputSplitType_ROW_RANGE  InputSplitType = 1
)

// Enum value maps for InputSplitType.
var (
	InputSplitType_name = map[int32]string{
		0: "FILE_RANGE",
		1: "ROW_RANGE",
	}
	InputSplitType_value = map[string]int32{
		"FILE_RANGE": 0,
		"ROW_RANGE":  1,
	}
)

func (x InputSplitType) Enum() *InputSplitType {
	p := new(InputSplitType)
	*p = x
	return p
}

func (x InputSplitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputSplitType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_input_split_proto_enumTypes[0].Descriptor()
}

func (InputSplitType) Type() protoreflect.EnumType {
	return &file_util_input_split_proto_enumTypes[0]
}

func (x InputSplitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputSplitType.Descriptor instead.
func (InputSplitType) EnumDescriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{0}
}

// Read mode
type FileRangeType int32

const (
	// Default value, its meaning varies on the read mode:
	// 1) Normal mode: the file should be read as usual.
	// 2) Incremental mode: the file is an existing file and is only applied to fetch old values.
	FileRangeType_NORMAL_FILE FileRangeType = 0
	// Incremental mode only: the file is added and read all as new values.
	FileRangeType_ADDED_FILE FileRangeType = 1
	// Incremental mode only: the file is deleted and read all as old values.
	FileRangeType_DELETED_FILE FileRangeType = 2
)

// Enum value maps for FileRangeType.
var (
	FileRangeType_name = map[int32]string{
		0: "NORMAL_FILE",
		1: "ADDED_FILE",
		2: "DELETED_FILE",
	}
	FileRangeType_value = map[string]int32{
		"NORMAL_FILE":  0,
		"ADDED_FILE":   1,
		"DELETED_FILE": 2,
	}
)

func (x FileRangeType) Enum() *FileRangeType {
	p := new(FileRangeType)
	*p = x
	return p
}

func (x FileRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_input_split_proto_enumTypes[1].Descriptor()
}

func (FileRangeType) Type() protoreflect.EnumType {
	return &file_util_input_split_proto_enumTypes[1]
}

func (x FileRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileRangeType.Descriptor instead.
func (FileRangeType) EnumDescriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{1}
}

type OutputSplitType_Type int32

const (
	OutputSplitType_FILE OutputSplitType_Type = 0
)

// Enum value maps for OutputSplitType_Type.
var (
	OutputSplitType_Type_name = map[int32]string{
		0: "FILE",
	}
	OutputSplitType_Type_value = map[string]int32{
		"FILE": 0,
	}
)

func (x OutputSplitType_Type) Enum() *OutputSplitType_Type {
	p := new(OutputSplitType_Type)
	*p = x
	return p
}

func (x OutputSplitType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputSplitType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_util_input_split_proto_enumTypes[2].Descriptor()
}

func (OutputSplitType_Type) Type() protoreflect.EnumType {
	return &file_util_input_split_proto_enumTypes[2]
}

func (x OutputSplitType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputSplitType_Type.Descriptor instead.
func (OutputSplitType_Type) EnumDescriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{8, 0}
}

type InputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       InputSplitType `protobuf:"varint,1,opt,name=type,proto3,enum=util.InputSplitType" json:"type,omitempty"`
	OperatorId string         `protobuf:"bytes,2,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	// Types that are assignable to Split:
	//
	//	*InputSplit_FileRanges
	//	*InputSplit_FileRowRange
	Split isInputSplit_Split `protobuf_oneof:"split"`
}

func (x *InputSplit) Reset() {
	*x = InputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputSplit) ProtoMessage() {}

func (x *InputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputSplit.ProtoReflect.Descriptor instead.
func (*InputSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{0}
}

func (x *InputSplit) GetType() InputSplitType {
	if x != nil {
		return x.Type
	}
	return InputSplitType_FILE_RANGE
}

func (x *InputSplit) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (m *InputSplit) GetSplit() isInputSplit_Split {
	if m != nil {
		return m.Split
	}
	return nil
}

func (x *InputSplit) GetFileRanges() *FileRangesInputSplit {
	if x, ok := x.GetSplit().(*InputSplit_FileRanges); ok {
		return x.FileRanges
	}
	return nil
}

func (x *InputSplit) GetFileRowRange() *FileRowRangeInputSplit {
	if x, ok := x.GetSplit().(*InputSplit_FileRowRange); ok {
		return x.FileRowRange
	}
	return nil
}

type isInputSplit_Split interface {
	isInputSplit_Split()
}

type InputSplit_FileRanges struct {
	FileRanges *FileRangesInputSplit `protobuf:"bytes,3,opt,name=fileRanges,proto3,oneof"`
}

type InputSplit_FileRowRange struct {
	FileRowRange *FileRowRangeInputSplit `protobuf:"bytes,4,opt,name=fileRowRange,proto3,oneof"`
}

func (*InputSplit_FileRanges) isInputSplit_Split() {}

func (*InputSplit_FileRowRange) isInputSplit_Split() {}

type FileFieldStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldRanges []*FieldRange `protobuf:"bytes,1,rep,name=field_ranges,json=fieldRanges,proto3" json:"field_ranges,omitempty"`
}

func (x *FileFieldStats) Reset() {
	*x = FileFieldStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFieldStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFieldStats) ProtoMessage() {}

func (x *FileFieldStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFieldStats.ProtoReflect.Descriptor instead.
func (*FileFieldStats) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{1}
}

func (x *FileFieldStats) GetFieldRanges() []*FieldRange {
	if x != nil {
		return x.FieldRanges
	}
	return nil
}

type FileRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ValueInfo  *VirtualValueInfo `protobuf:"bytes,4,opt,name=value_info,json=valueInfo,proto3" json:"value_info,omitempty"`
	DeltaFiles []*FileRange      `protobuf:"bytes,5,rep,name=delta_files,json=deltaFiles,proto3" json:"delta_files,omitempty"`
	Type       FileRangeType     `protobuf:"varint,6,opt,name=type,proto3,enum=util.FileRangeType" json:"type,omitempty"`
	FieldStats *FileFieldStats   `protobuf:"bytes,7,opt,name=field_stats,json=fieldStats,proto3" json:"field_stats,omitempty"`
}

func (x *FileRange) Reset() {
	*x = FileRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRange) ProtoMessage() {}

func (x *FileRange) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRange.ProtoReflect.Descriptor instead.
func (*FileRange) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{2}
}

func (x *FileRange) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRange) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileRange) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileRange) GetValueInfo() *VirtualValueInfo {
	if x != nil {
		return x.ValueInfo
	}
	return nil
}

func (x *FileRange) GetDeltaFiles() []*FileRange {
	if x != nil {
		return x.DeltaFiles
	}
	return nil
}

func (x *FileRange) GetType() FileRangeType {
	if x != nil {
		return x.Type
	}
	return FileRangeType_NORMAL_FILE
}

func (x *FileRange) GetFieldStats() *FileFieldStats {
	if x != nil {
		return x.FieldStats
	}
	return nil
}

type FileRangesInputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranges      []*FileRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	BucketCount uint32       `protobuf:"varint,3,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	BucketId    uint32       `protobuf:"varint,4,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *FileRangesInputSplit) Reset() {
	*x = FileRangesInputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRangesInputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRangesInputSplit) ProtoMessage() {}

func (x *FileRangesInputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRangesInputSplit.ProtoReflect.Descriptor instead.
func (*FileRangesInputSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{3}
}

func (x *FileRangesInputSplit) GetRanges() []*FileRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *FileRangesInputSplit) GetBucketCount() uint32 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *FileRangesInputSplit) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

type FileRowRangeInputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	StartRow int64  `protobuf:"varint,2,opt,name=start_row,json=startRow,proto3" json:"start_row,omitempty"` // inclusive
	EndRow   int64  `protobuf:"varint,3,opt,name=end_row,json=endRow,proto3" json:"end_row,omitempty"`       // exclusive
}

func (x *FileRowRangeInputSplit) Reset() {
	*x = FileRowRangeInputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRowRangeInputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRowRangeInputSplit) ProtoMessage() {}

func (x *FileRowRangeInputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRowRangeInputSplit.ProtoReflect.Descriptor instead.
func (*FileRowRangeInputSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{4}
}

func (x *FileRowRangeInputSplit) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRowRangeInputSplit) GetStartRow() int64 {
	if x != nil {
		return x.StartRow
	}
	return 0
}

func (x *FileRowRangeInputSplit) GetEndRow() int64 {
	if x != nil {
		return x.EndRow
	}
	return 0
}

type RangeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *string `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
	RecordCnt *int64  `protobuf:"varint,2,opt,name=recordCnt,proto3,oneof" json:"recordCnt,omitempty"`
	FileSize  *int64  `protobuf:"varint,3,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	Location  *string `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *RangeFile) Reset() {
	*x = RangeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeFile) ProtoMessage() {}

func (x *RangeFile) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeFile.ProtoReflect.Descriptor instead.
func (*RangeFile) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{5}
}

func (x *RangeFile) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *RangeFile) GetRecordCnt() int64 {
	if x != nil && x.RecordCnt != nil {
		return *x.RecordCnt
	}
	return 0
}

func (x *RangeFile) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *RangeFile) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

type RangeLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*RangeLiteral_IntV
	//	*RangeLiteral_LongV
	//	*RangeLiteral_StringV
	Value isRangeLiteral_Value `protobuf_oneof:"value"`
}

func (x *RangeLiteral) Reset() {
	*x = RangeLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeLiteral) ProtoMessage() {}

func (x *RangeLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeLiteral.ProtoReflect.Descriptor instead.
func (*RangeLiteral) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{6}
}

func (m *RangeLiteral) GetValue() isRangeLiteral_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *RangeLiteral) GetIntV() int32 {
	if x, ok := x.GetValue().(*RangeLiteral_IntV); ok {
		return x.IntV
	}
	return 0
}

func (x *RangeLiteral) GetLongV() int64 {
	if x, ok := x.GetValue().(*RangeLiteral_LongV); ok {
		return x.LongV
	}
	return 0
}

func (x *RangeLiteral) GetStringV() string {
	if x, ok := x.GetValue().(*RangeLiteral_StringV); ok {
		return x.StringV
	}
	return ""
}

type isRangeLiteral_Value interface {
	isRangeLiteral_Value()
}

type RangeLiteral_IntV struct {
	IntV int32 `protobuf:"varint,1,opt,name=intV,proto3,oneof"`
}

type RangeLiteral_LongV struct {
	LongV int64 `protobuf:"varint,2,opt,name=longV,proto3,oneof"`
}

type RangeLiteral_StringV struct {
	StringV string `protobuf:"bytes,3,opt,name=stringV,proto3,oneof"`
}

func (*RangeLiteral_IntV) isRangeLiteral_Value() {}

func (*RangeLiteral_LongV) isRangeLiteral_Value() {}

func (*RangeLiteral_StringV) isRangeLiteral_Value() {}

type RangePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId    *int32          `protobuf:"varint,1,opt,name=rangeId,proto3,oneof" json:"rangeId,omitempty"`
	RangeFiles []*RangeFile    `protobuf:"bytes,2,rep,name=rangeFiles,proto3" json:"rangeFiles,omitempty"`
	Lower      []*RangeLiteral `protobuf:"bytes,3,rep,name=lower,proto3" json:"lower,omitempty"`
	Upper      []*RangeLiteral `protobuf:"bytes,4,rep,name=upper,proto3" json:"upper,omitempty"`
}

func (x *RangePartition) Reset() {
	*x = RangePartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangePartition) ProtoMessage() {}

func (x *RangePartition) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangePartition.ProtoReflect.Descriptor instead.
func (*RangePartition) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{7}
}

func (x *RangePartition) GetRangeId() int32 {
	if x != nil && x.RangeId != nil {
		return *x.RangeId
	}
	return 0
}

func (x *RangePartition) GetRangeFiles() []*RangeFile {
	if x != nil {
		return x.RangeFiles
	}
	return nil
}

func (x *RangePartition) GetLower() []*RangeLiteral {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *RangePartition) GetUpper() []*RangeLiteral {
	if x != nil {
		return x.Upper
	}
	return nil
}

type OutputSplitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OutputSplitType) Reset() {
	*x = OutputSplitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSplitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSplitType) ProtoMessage() {}

func (x *OutputSplitType) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSplitType.ProtoReflect.Descriptor instead.
func (*OutputSplitType) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{8}
}

type OutputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       OutputSplitType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=util.OutputSplitType_Type" json:"type,omitempty"`
	OperatorId string               `protobuf:"bytes,2,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	// Types that are assignable to Split:
	//
	//	*OutputSplit_File
	Split isOutputSplit_Split `protobuf_oneof:"split"`
}

func (x *OutputSplit) Reset() {
	*x = OutputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSplit) ProtoMessage() {}

func (x *OutputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSplit.ProtoReflect.Descriptor instead.
func (*OutputSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{9}
}

func (x *OutputSplit) GetType() OutputSplitType_Type {
	if x != nil {
		return x.Type
	}
	return OutputSplitType_FILE
}

func (x *OutputSplit) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (m *OutputSplit) GetSplit() isOutputSplit_Split {
	if m != nil {
		return m.Split
	}
	return nil
}

func (x *OutputSplit) GetFile() *FileOutputSplit {
	if x, ok := x.GetSplit().(*OutputSplit_File); ok {
		return x.File
	}
	return nil
}

type isOutputSplit_Split interface {
	isOutputSplit_Split()
}

type OutputSplit_File struct {
	File *FileOutputSplit `protobuf:"bytes,4,opt,name=file,proto3,oneof"`
}

func (*OutputSplit_File) isOutputSplit_Split() {}

type FileOutputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileOutputSplit) Reset() {
	*x = FileOutputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOutputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOutputSplit) ProtoMessage() {}

func (x *FileOutputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOutputSplit.ProtoReflect.Descriptor instead.
func (*FileOutputSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{10}
}

func (x *FileOutputSplit) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileSplitMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitFile string                  `protobuf:"bytes,3,opt,name=split_file,json=splitFile,proto3" json:"split_file,omitempty"`
	Offset    []*FileSplitMeta_Offset `protobuf:"bytes,4,rep,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FileSplitMeta) Reset() {
	*x = FileSplitMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSplitMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSplitMeta) ProtoMessage() {}

func (x *FileSplitMeta) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSplitMeta.ProtoReflect.Descriptor instead.
func (*FileSplitMeta) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{11}
}

func (x *FileSplitMeta) GetSplitFile() string {
	if x != nil {
		return x.SplitFile
	}
	return ""
}

func (x *FileSplitMeta) GetOffset() []*FileSplitMeta_Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

type EmbeddedSplitMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Splits []*EmbeddedSplitMeta_Pair `protobuf:"bytes,3,rep,name=splits,proto3" json:"splits,omitempty"`
}

func (x *EmbeddedSplitMeta) Reset() {
	*x = EmbeddedSplitMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedSplitMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedSplitMeta) ProtoMessage() {}

func (x *EmbeddedSplitMeta) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedSplitMeta.ProtoReflect.Descriptor instead.
func (*EmbeddedSplitMeta) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{12}
}

func (x *EmbeddedSplitMeta) GetSplits() []*EmbeddedSplitMeta_Pair {
	if x != nil {
		return x.Splits
	}
	return nil
}

type SplitMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId    string `protobuf:"bytes,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	OperatorId string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*SplitMeta_File
	//	*SplitMeta_Embedded
	Content isSplitMeta_Content `protobuf_oneof:"content"`
}

func (x *SplitMeta) Reset() {
	*x = SplitMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitMeta) ProtoMessage() {}

func (x *SplitMeta) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitMeta.ProtoReflect.Descriptor instead.
func (*SplitMeta) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{13}
}

func (x *SplitMeta) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *SplitMeta) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (m *SplitMeta) GetContent() isSplitMeta_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SplitMeta) GetFile() *FileSplitMeta {
	if x, ok := x.GetContent().(*SplitMeta_File); ok {
		return x.File
	}
	return nil
}

func (x *SplitMeta) GetEmbedded() *EmbeddedSplitMeta {
	if x, ok := x.GetContent().(*SplitMeta_Embedded); ok {
		return x.Embedded
	}
	return nil
}

type isSplitMeta_Content interface {
	isSplitMeta_Content()
}

type SplitMeta_File struct {
	File *FileSplitMeta `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

type SplitMeta_Embedded struct {
	Embedded *EmbeddedSplitMeta `protobuf:"bytes,4,opt,name=embedded,proto3,oneof"`
}

func (*SplitMeta_File) isSplitMeta_Content() {}

func (*SplitMeta_Embedded) isSplitMeta_Content() {}

type CompactionSplitFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset     int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	SliceId    int64                  `protobuf:"varint,4,opt,name=sliceId,proto3" json:"sliceId,omitempty"`
	ValueInfo  *VirtualValueInfo      `protobuf:"bytes,5,opt,name=value_info,json=valueInfo,proto3" json:"value_info,omitempty"`
	DeltaFiles []*CompactionSplitFile `protobuf:"bytes,6,rep,name=delta_files,json=deltaFiles,proto3" json:"delta_files,omitempty"`
}

func (x *CompactionSplitFile) Reset() {
	*x = CompactionSplitFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionSplitFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionSplitFile) ProtoMessage() {}

func (x *CompactionSplitFile) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionSplitFile.ProtoReflect.Descriptor instead.
func (*CompactionSplitFile) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{14}
}

func (x *CompactionSplitFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CompactionSplitFile) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CompactionSplitFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CompactionSplitFile) GetSliceId() int64 {
	if x != nil {
		return x.SliceId
	}
	return 0
}

func (x *CompactionSplitFile) GetValueInfo() *VirtualValueInfo {
	if x != nil {
		return x.ValueInfo
	}
	return nil
}

func (x *CompactionSplitFile) GetDeltaFiles() []*CompactionSplitFile {
	if x != nil {
		return x.DeltaFiles
	}
	return nil
}

type CompactionSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*CompactionSplitFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *CompactionSplit) Reset() {
	*x = CompactionSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionSplit) ProtoMessage() {}

func (x *CompactionSplit) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionSplit.ProtoReflect.Descriptor instead.
func (*CompactionSplit) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{15}
}

func (x *CompactionSplit) GetFiles() []*CompactionSplitFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type CompactionSplits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Splits []*CompactionSplit `protobuf:"bytes,1,rep,name=splits,proto3" json:"splits,omitempty"`
}

func (x *CompactionSplits) Reset() {
	*x = CompactionSplits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionSplits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionSplits) ProtoMessage() {}

func (x *CompactionSplits) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionSplits.ProtoReflect.Descriptor instead.
func (*CompactionSplits) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{16}
}

func (x *CompactionSplits) GetSplits() []*CompactionSplit {
	if x != nil {
		return x.Splits
	}
	return nil
}

type FileSplitMeta_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StartOffset int64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   int64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *FileSplitMeta_Offset) Reset() {
	*x = FileSplitMeta_Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSplitMeta_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSplitMeta_Offset) ProtoMessage() {}

func (x *FileSplitMeta_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSplitMeta_Offset.ProtoReflect.Descriptor instead.
func (*FileSplitMeta_Offset) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FileSplitMeta_Offset) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FileSplitMeta_Offset) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *FileSplitMeta_Offset) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type EmbeddedSplitMeta_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      int64        `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Split       *InputSplit  `protobuf:"bytes,2,opt,name=split,proto3" json:"split,omitempty"`
	OutputSplit *OutputSplit `protobuf:"bytes,3,opt,name=output_split,json=outputSplit,proto3" json:"output_split,omitempty"`
}

func (x *EmbeddedSplitMeta_Pair) Reset() {
	*x = EmbeddedSplitMeta_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_input_split_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedSplitMeta_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedSplitMeta_Pair) ProtoMessage() {}

func (x *EmbeddedSplitMeta_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_util_input_split_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedSplitMeta_Pair.ProtoReflect.Descriptor instead.
func (*EmbeddedSplitMeta_Pair) Descriptor() ([]byte, []int) {
	return file_util_input_split_proto_rawDescGZIP(), []int{12, 0}
}

func (x *EmbeddedSplitMeta_Pair) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *EmbeddedSplitMeta_Pair) GetSplit() *InputSplit {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *EmbeddedSplitMeta_Pair) GetOutputSplit() *OutputSplit {
	if x != nil {
		return x.OutputSplit
	}
	return nil
}

var File_util_input_split_proto protoreflect.FileDescriptor

var file_util_input_split_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x1a, 0x1d,
	0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75,
	0x74, 0x69, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x94, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x22, 0xba, 0x01, 0x0a, 0x09,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x56,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x56, 0x12, 0x16,
	0x0a, 0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x23,
	0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x10, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x00, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x63, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x1a, 0x7d, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x42, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x2a, 0x2f, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f,
	0x57, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x44, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65,
	0x74, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_input_split_proto_rawDescOnce sync.Once
	file_util_input_split_proto_rawDescData = file_util_input_split_proto_rawDesc
)

func file_util_input_split_proto_rawDescGZIP() []byte {
	file_util_input_split_proto_rawDescOnce.Do(func() {
		file_util_input_split_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_input_split_proto_rawDescData)
	})
	return file_util_input_split_proto_rawDescData
}

var file_util_input_split_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_util_input_split_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_util_input_split_proto_goTypes = []interface{}{
	(InputSplitType)(0),            // 0: util.InputSplitType
	(FileRangeType)(0),             // 1: util.FileRangeType
	(OutputSplitType_Type)(0),      // 2: util.OutputSplitType.Type
	(*InputSplit)(nil),             // 3: util.InputSplit
	(*FileFieldStats)(nil),         // 4: util.FileFieldStats
	(*FileRange)(nil),              // 5: util.FileRange
	(*FileRangesInputSplit)(nil),   // 6: util.FileRangesInputSplit
	(*FileRowRangeInputSplit)(nil), // 7: util.FileRowRangeInputSplit
	(*RangeFile)(nil),              // 8: util.RangeFile
	(*RangeLiteral)(nil),           // 9: util.RangeLiteral
	(*RangePartition)(nil),         // 10: util.RangePartition
	(*OutputSplitType)(nil),        // 11: util.OutputSplitType
	(*OutputSplit)(nil),            // 12: util.OutputSplit
	(*FileOutputSplit)(nil),        // 13: util.FileOutputSplit
	(*FileSplitMeta)(nil),          // 14: util.FileSplitMeta
	(*EmbeddedSplitMeta)(nil),      // 15: util.EmbeddedSplitMeta
	(*SplitMeta)(nil),              // 16: util.SplitMeta
	(*CompactionSplitFile)(nil),    // 17: util.CompactionSplitFile
	(*CompactionSplit)(nil),        // 18: util.CompactionSplit
	(*CompactionSplits)(nil),       // 19: util.CompactionSplits
	(*FileSplitMeta_Offset)(nil),   // 20: util.FileSplitMeta.Offset
	(*EmbeddedSplitMeta_Pair)(nil), // 21: util.EmbeddedSplitMeta.Pair
	(*FieldRange)(nil),             // 22: util.FieldRange
	(*VirtualValueInfo)(nil),       // 23: util.VirtualValueInfo
}
var file_util_input_split_proto_depIdxs = []int32{
	0,  // 0: util.InputSplit.type:type_name -> util.InputSplitType
	6,  // 1: util.InputSplit.fileRanges:type_name -> util.FileRangesInputSplit
	7,  // 2: util.InputSplit.fileRowRange:type_name -> util.FileRowRangeInputSplit
	22, // 3: util.FileFieldStats.field_ranges:type_name -> util.FieldRange
	23, // 4: util.FileRange.value_info:type_name -> util.VirtualValueInfo
	5,  // 5: util.FileRange.delta_files:type_name -> util.FileRange
	1,  // 6: util.FileRange.type:type_name -> util.FileRangeType
	4,  // 7: util.FileRange.field_stats:type_name -> util.FileFieldStats
	5,  // 8: util.FileRangesInputSplit.ranges:type_name -> util.FileRange
	8,  // 9: util.RangePartition.rangeFiles:type_name -> util.RangeFile
	9,  // 10: util.RangePartition.lower:type_name -> util.RangeLiteral
	9,  // 11: util.RangePartition.upper:type_name -> util.RangeLiteral
	2,  // 12: util.OutputSplit.type:type_name -> util.OutputSplitType.Type
	13, // 13: util.OutputSplit.file:type_name -> util.FileOutputSplit
	20, // 14: util.FileSplitMeta.offset:type_name -> util.FileSplitMeta.Offset
	21, // 15: util.EmbeddedSplitMeta.splits:type_name -> util.EmbeddedSplitMeta.Pair
	14, // 16: util.SplitMeta.file:type_name -> util.FileSplitMeta
	15, // 17: util.SplitMeta.embedded:type_name -> util.EmbeddedSplitMeta
	23, // 18: util.CompactionSplitFile.value_info:type_name -> util.VirtualValueInfo
	17, // 19: util.CompactionSplitFile.delta_files:type_name -> util.CompactionSplitFile
	17, // 20: util.CompactionSplit.files:type_name -> util.CompactionSplitFile
	18, // 21: util.CompactionSplits.splits:type_name -> util.CompactionSplit
	3,  // 22: util.EmbeddedSplitMeta.Pair.split:type_name -> util.InputSplit
	12, // 23: util.EmbeddedSplitMeta.Pair.output_split:type_name -> util.OutputSplit
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_util_input_split_proto_init() }
func file_util_input_split_proto_init() {
	if File_util_input_split_proto != nil {
		return
	}
	file_util_virtual_value_info_proto_init()
	file_util_statistics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_util_input_split_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFieldStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRangesInputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRowRangeInputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangePartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSplitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOutputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSplitMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbeddedSplitMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionSplitFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionSplits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSplitMeta_Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_input_split_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbeddedSplitMeta_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_util_input_split_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InputSplit_FileRanges)(nil),
		(*InputSplit_FileRowRange)(nil),
	}
	file_util_input_split_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_util_input_split_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RangeLiteral_IntV)(nil),
		(*RangeLiteral_LongV)(nil),
		(*RangeLiteral_StringV)(nil),
	}
	file_util_input_split_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_util_input_split_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*OutputSplit_File)(nil),
	}
	file_util_input_split_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SplitMeta_File)(nil),
		(*SplitMeta_Embedded)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_input_split_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_input_split_proto_goTypes,
		DependencyIndexes: file_util_input_split_proto_depIdxs,
		EnumInfos:         file_util_input_split_proto_enumTypes,
		MessageInfos:      file_util_input_split_proto_msgTypes,
	}.Build()
	File_util_input_split_proto = out.File
	file_util_input_split_proto_rawDesc = nil
	file_util_input_split_proto_goTypes = nil
	file_util_input_split_proto_depIdxs = nil
}
