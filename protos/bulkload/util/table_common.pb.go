// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: util/table_common.proto

package util

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order int32

const (
	Order_ASC  Order = 0
	Order_DESC Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[0].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[0]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{0}
}

type ClusterType int32

const (
	ClusterType_NORMAL ClusterType = 0
	ClusterType_RANGE  ClusterType = 1
	ClusterType_HASH   ClusterType = 2
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "NORMAL",
		1: "RANGE",
		2: "HASH",
	}
	ClusterType_value = map[string]int32{
		"NORMAL": 0,
		"RANGE":  1,
		"HASH":   2,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[1].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[1]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{1}
}

type HashBucketType int32

const (
	HashBucketType_HASH_MOD   HashBucketType = 0
	HashBucketType_HASH_RANGE HashBucketType = 1
)

// Enum value maps for HashBucketType.
var (
	HashBucketType_name = map[int32]string{
		0: "HASH_MOD",
		1: "HASH_RANGE",
	}
	HashBucketType_value = map[string]int32{
		"HASH_MOD":   0,
		"HASH_RANGE": 1,
	}
)

func (x HashBucketType) Enum() *HashBucketType {
	p := new(HashBucketType)
	*p = x
	return p
}

func (x HashBucketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashBucketType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[2].Descriptor()
}

func (HashBucketType) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[2]
}

func (x HashBucketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashBucketType.Descriptor instead.
func (HashBucketType) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{2}
}

type TableType int32

const (
	TableType_MANAGED_TABLE     TableType = 0
	TableType_EXTERNAL_TABLE    TableType = 2
	TableType_VIRTUAL_VIEW      TableType = 4
	TableType_MATERIALIZED_VIEW TableType = 6
	TableType_UNKNOWN_TABLE     TableType = 99
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		0:  "MANAGED_TABLE",
		2:  "EXTERNAL_TABLE",
		4:  "VIRTUAL_VIEW",
		6:  "MATERIALIZED_VIEW",
		99: "UNKNOWN_TABLE",
	}
	TableType_value = map[string]int32{
		"MANAGED_TABLE":     0,
		"EXTERNAL_TABLE":    2,
		"VIRTUAL_VIEW":      4,
		"MATERIALIZED_VIEW": 6,
		"UNKNOWN_TABLE":     99,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[3].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[3]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{3}
}

type IndexType int32

const (
	IndexType_BLOOM_FILTER IndexType = 0
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "BLOOM_FILTER",
	}
	IndexType_value = map[string]int32{
		"BLOOM_FILTER": 0,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[4].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[4]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{4}
}

type RangeType int32

const (
	RangeType_FIXED_POINT   RangeType = 0 // like hive partition
	RangeType_FIXED_RANGE   RangeType = 2 // like oracle partition that has a range but it must be constant eg: less then 100
	RangeType_DYNAMIC_RANGE RangeType = 4
)

// Enum value maps for RangeType.
var (
	RangeType_name = map[int32]string{
		0: "FIXED_POINT",
		2: "FIXED_RANGE",
		4: "DYNAMIC_RANGE",
	}
	RangeType_value = map[string]int32{
		"FIXED_POINT":   0,
		"FIXED_RANGE":   2,
		"DYNAMIC_RANGE": 4,
	}
)

func (x RangeType) Enum() *RangeType {
	p := new(RangeType)
	*p = x
	return p
}

func (x RangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[5].Descriptor()
}

func (RangeType) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[5]
}

func (x RangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeType.Descriptor instead.
func (RangeType) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{5}
}

type RefreshOption_Type int32

const (
	RefreshOption_ON_DEMAND   RefreshOption_Type = 0
	RefreshOption_ON_COMMIT   RefreshOption_Type = 1
	RefreshOption_ON_SCHEDULE RefreshOption_Type = 2
)

// Enum value maps for RefreshOption_Type.
var (
	RefreshOption_Type_name = map[int32]string{
		0: "ON_DEMAND",
		1: "ON_COMMIT",
		2: "ON_SCHEDULE",
	}
	RefreshOption_Type_value = map[string]int32{
		"ON_DEMAND":   0,
		"ON_COMMIT":   1,
		"ON_SCHEDULE": 2,
	}
)

func (x RefreshOption_Type) Enum() *RefreshOption_Type {
	p := new(RefreshOption_Type)
	*p = x
	return p
}

func (x RefreshOption_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefreshOption_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_util_table_common_proto_enumTypes[6].Descriptor()
}

func (RefreshOption_Type) Type() protoreflect.EnumType {
	return &file_util_table_common_proto_enumTypes[6]
}

func (x RefreshOption_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefreshOption_Type.Descriptor instead.
func (RefreshOption_Type) EnumDescriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{25, 0}
}

type FieldRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//
	//	*FieldRef_FieldId
	//	*FieldRef_FieldName
	Field isFieldRef_Field `protobuf_oneof:"field"`
}

func (x *FieldRef) Reset() {
	*x = FieldRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRef) ProtoMessage() {}

func (x *FieldRef) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRef.ProtoReflect.Descriptor instead.
func (*FieldRef) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{0}
}

func (m *FieldRef) GetField() isFieldRef_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *FieldRef) GetFieldId() uint32 {
	if x, ok := x.GetField().(*FieldRef_FieldId); ok {
		return x.FieldId
	}
	return 0
}

func (x *FieldRef) GetFieldName() string {
	if x, ok := x.GetField().(*FieldRef_FieldName); ok {
		return x.FieldName
	}
	return ""
}

type isFieldRef_Field interface {
	isFieldRef_Field()
}

type FieldRef_FieldId struct {
	// 1. field_id and field_name are FieldSchema's id and name respectively
	// 2. field_name is only used for creating table, when filed_id has not been assigned yet.
	// 3. field_id is used for almost all the cases except item 2.
	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3,oneof"`
}

type FieldRef_FieldName struct {
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3,oneof"`
}

func (*FieldRef_FieldId) isFieldRef_Field() {}

func (*FieldRef_FieldName) isFieldRef_Field() {}

type SortedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     *FieldRef `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	SortOrder Order     `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3,enum=util.Order" json:"sort_order,omitempty"`
}

func (x *SortedField) Reset() {
	*x = SortedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortedField) ProtoMessage() {}

func (x *SortedField) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortedField.ProtoReflect.Descriptor instead.
func (*SortedField) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{1}
}

func (x *SortedField) GetField() *FieldRef {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SortedField) GetSortOrder() Order {
	if x != nil {
		return x.SortOrder
	}
	return Order_ASC
}

type HashCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionVersion uint32         `protobuf:"varint,1,opt,name=function_version,json=functionVersion,proto3" json:"function_version,omitempty"`
	BucketType      HashBucketType `protobuf:"varint,2,opt,name=bucket_type,json=bucketType,proto3,enum=util.HashBucketType" json:"bucket_type,omitempty"`
}

func (x *HashCluster) Reset() {
	*x = HashCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashCluster) ProtoMessage() {}

func (x *HashCluster) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashCluster.ProtoReflect.Descriptor instead.
func (*HashCluster) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{2}
}

func (x *HashCluster) GetFunctionVersion() uint32 {
	if x != nil {
		return x.FunctionVersion
	}
	return 0
}

func (x *HashCluster) GetBucketType() HashBucketType {
	if x != nil {
		return x.BucketType
	}
	return HashBucketType_HASH_MOD
}

type RangeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeType RangeType `protobuf:"varint,1,opt,name=range_type,json=rangeType,proto3,enum=util.RangeType" json:"range_type,omitempty"`
}

func (x *RangeCluster) Reset() {
	*x = RangeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeCluster) ProtoMessage() {}

func (x *RangeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeCluster.ProtoReflect.Descriptor instead.
func (*RangeCluster) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{3}
}

func (x *RangeCluster) GetRangeType() RangeType {
	if x != nil {
		return x.RangeType
	}
	return RangeType_FIXED_POINT
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterType     ClusterType `protobuf:"varint,1,opt,name=cluster_type,json=clusterType,proto3,enum=util.ClusterType" json:"cluster_type,omitempty"`
	ClusteredFields []*FieldRef `protobuf:"bytes,2,rep,name=clustered_fields,json=clusteredFields,proto3" json:"clustered_fields,omitempty"`
	BucketsCount    *uint64     `protobuf:"varint,3,opt,name=buckets_count,json=bucketsCount,proto3,oneof" json:"buckets_count,omitempty"`
	PathPattern     *string     `protobuf:"bytes,4,opt,name=path_pattern,json=pathPattern,proto3,oneof" json:"path_pattern,omitempty"`
	// Types that are assignable to Cluster:
	//
	//	*ClusterInfo_Hash
	//	*ClusterInfo_Range
	Cluster isClusterInfo_Cluster `protobuf_oneof:"cluster"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterInfo) GetClusterType() ClusterType {
	if x != nil {
		return x.ClusterType
	}
	return ClusterType_NORMAL
}

func (x *ClusterInfo) GetClusteredFields() []*FieldRef {
	if x != nil {
		return x.ClusteredFields
	}
	return nil
}

func (x *ClusterInfo) GetBucketsCount() uint64 {
	if x != nil && x.BucketsCount != nil {
		return *x.BucketsCount
	}
	return 0
}

func (x *ClusterInfo) GetPathPattern() string {
	if x != nil && x.PathPattern != nil {
		return *x.PathPattern
	}
	return ""
}

func (m *ClusterInfo) GetCluster() isClusterInfo_Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (x *ClusterInfo) GetHash() *HashCluster {
	if x, ok := x.GetCluster().(*ClusterInfo_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *ClusterInfo) GetRange() *RangeCluster {
	if x, ok := x.GetCluster().(*ClusterInfo_Range); ok {
		return x.Range
	}
	return nil
}

type isClusterInfo_Cluster interface {
	isClusterInfo_Cluster()
}

type ClusterInfo_Hash struct {
	Hash *HashCluster `protobuf:"bytes,10,opt,name=hash,proto3,oneof"`
}

type ClusterInfo_Range struct {
	Range *RangeCluster `protobuf:"bytes,11,opt,name=range,proto3,oneof"`
}

func (*ClusterInfo_Hash) isClusterInfo_Cluster() {}

func (*ClusterInfo_Range) isClusterInfo_Cluster() {}

type SortOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortedFields []*SortedField `protobuf:"bytes,1,rep,name=sorted_fields,json=sortedFields,proto3" json:"sorted_fields,omitempty"`
}

func (x *SortOrder) Reset() {
	*x = SortOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOrder) ProtoMessage() {}

func (x *SortOrder) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOrder.ProtoReflect.Descriptor instead.
func (*SortOrder) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{5}
}

func (x *SortOrder) GetSortedFields() []*SortedField {
	if x != nil {
		return x.SortedFields
	}
	return nil
}

type UniqueKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueFields []*FieldRef `protobuf:"bytes,1,rep,name=unique_fields,json=uniqueFields,proto3" json:"unique_fields,omitempty"`
	Enable       bool        `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	Validate     bool        `protobuf:"varint,3,opt,name=validate,proto3" json:"validate,omitempty"`
	Rely         bool        `protobuf:"varint,4,opt,name=rely,proto3" json:"rely,omitempty"`
}

func (x *UniqueKey) Reset() {
	*x = UniqueKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueKey) ProtoMessage() {}

func (x *UniqueKey) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueKey.ProtoReflect.Descriptor instead.
func (*UniqueKey) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{6}
}

func (x *UniqueKey) GetUniqueFields() []*FieldRef {
	if x != nil {
		return x.UniqueFields
	}
	return nil
}

func (x *UniqueKey) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UniqueKey) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *UniqueKey) GetRely() bool {
	if x != nil {
		return x.Rely
	}
	return false
}

type PrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields   []*FieldRef `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Enable   bool        `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	Validate bool        `protobuf:"varint,3,opt,name=validate,proto3" json:"validate,omitempty"`
	Rely     bool        `protobuf:"varint,4,opt,name=rely,proto3" json:"rely,omitempty"`
}

func (x *PrimaryKey) Reset() {
	*x = PrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryKey) ProtoMessage() {}

func (x *PrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryKey.ProtoReflect.Descriptor instead.
func (*PrimaryKey) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{7}
}

func (x *PrimaryKey) GetFields() []*FieldRef {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PrimaryKey) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PrimaryKey) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *PrimaryKey) GetRely() bool {
	if x != nil {
		return x.Rely
	}
	return false
}

type IndexKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldRef `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *IndexKey) Reset() {
	*x = IndexKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexKey) ProtoMessage() {}

func (x *IndexKey) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexKey.ProtoReflect.Descriptor instead.
func (*IndexKey) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{8}
}

func (x *IndexKey) GetFields() []*FieldRef {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  IndexType         `protobuf:"varint,1,opt,name=type,proto3,enum=util.IndexType" json:"type,omitempty"`
	Key   *IndexKey         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Table *ObjectIdentifier `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{9}
}

func (x *Index) GetType() IndexType {
	if x != nil {
		return x.Type
	}
	return IndexType_BLOOM_FILTER
}

func (x *Index) GetKey() *IndexKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Index) GetTable() *ObjectIdentifier {
	if x != nil {
		return x.Table
	}
	return nil
}

type FieldSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecId uint32 `protobuf:"varint,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"` // field spec version
	// Types that are assignable to Spec:
	//
	//	*FieldSpec_ClusterInfo
	//	*FieldSpec_SortOrder
	//	*FieldSpec_UniqueKey
	//	*FieldSpec_PrimaryKey
	//	*FieldSpec_Index
	Spec isFieldSpec_Spec `protobuf_oneof:"spec"`
}

func (x *FieldSpec) Reset() {
	*x = FieldSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSpec) ProtoMessage() {}

func (x *FieldSpec) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSpec.ProtoReflect.Descriptor instead.
func (*FieldSpec) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{10}
}

func (x *FieldSpec) GetSpecId() uint32 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (m *FieldSpec) GetSpec() isFieldSpec_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *FieldSpec) GetClusterInfo() *ClusterInfo {
	if x, ok := x.GetSpec().(*FieldSpec_ClusterInfo); ok {
		return x.ClusterInfo
	}
	return nil
}

func (x *FieldSpec) GetSortOrder() *SortOrder {
	if x, ok := x.GetSpec().(*FieldSpec_SortOrder); ok {
		return x.SortOrder
	}
	return nil
}

func (x *FieldSpec) GetUniqueKey() *UniqueKey {
	if x, ok := x.GetSpec().(*FieldSpec_UniqueKey); ok {
		return x.UniqueKey
	}
	return nil
}

func (x *FieldSpec) GetPrimaryKey() *PrimaryKey {
	if x, ok := x.GetSpec().(*FieldSpec_PrimaryKey); ok {
		return x.PrimaryKey
	}
	return nil
}

func (x *FieldSpec) GetIndex() *Index {
	if x, ok := x.GetSpec().(*FieldSpec_Index); ok {
		return x.Index
	}
	return nil
}

type isFieldSpec_Spec interface {
	isFieldSpec_Spec()
}

type FieldSpec_ClusterInfo struct {
	ClusterInfo *ClusterInfo `protobuf:"bytes,10,opt,name=cluster_info,json=clusterInfo,proto3,oneof"`
}

type FieldSpec_SortOrder struct {
	SortOrder *SortOrder `protobuf:"bytes,11,opt,name=sort_order,json=sortOrder,proto3,oneof"`
}

type FieldSpec_UniqueKey struct {
	UniqueKey *UniqueKey `protobuf:"bytes,12,opt,name=unique_key,json=uniqueKey,proto3,oneof"`
}

type FieldSpec_PrimaryKey struct {
	PrimaryKey *PrimaryKey `protobuf:"bytes,13,opt,name=primary_key,json=primaryKey,proto3,oneof"`
}

type FieldSpec_Index struct {
	Index *Index `protobuf:"bytes,14,opt,name=index,proto3,oneof"` // partition spec
}

func (*FieldSpec_ClusterInfo) isFieldSpec_Spec() {}

func (*FieldSpec_SortOrder) isFieldSpec_Spec() {}

func (*FieldSpec_UniqueKey) isFieldSpec_Spec() {}

func (*FieldSpec_PrimaryKey) isFieldSpec_Spec() {}

func (*FieldSpec_Index) isFieldSpec_Spec() {}

type FieldSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      *DataType         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Virtual   *bool             `protobuf:"varint,4,opt,name=virtual,proto3,oneof" json:"virtual,omitempty"`
	Hidden    *bool             `protobuf:"varint,5,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	UnOutput  *bool             `protobuf:"varint,6,opt,name=un_output,json=unOutput,proto3,oneof" json:"un_output,omitempty"`
	Comment   string            `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Expr      *ScalarExpression `protobuf:"bytes,8,opt,name=expr,proto3" json:"expr,omitempty"`
	Transform *string           `protobuf:"bytes,9,opt,name=transform,proto3,oneof" json:"transform,omitempty"`
}

func (x *FieldSchema) Reset() {
	*x = FieldSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSchema) ProtoMessage() {}

func (x *FieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSchema.ProtoReflect.Descriptor instead.
func (*FieldSchema) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{11}
}

func (x *FieldSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldSchema) GetType() *DataType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldSchema) GetVirtual() bool {
	if x != nil && x.Virtual != nil {
		return *x.Virtual
	}
	return false
}

func (x *FieldSchema) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *FieldSchema) GetUnOutput() bool {
	if x != nil && x.UnOutput != nil {
		return *x.UnOutput
	}
	return false
}

func (x *FieldSchema) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FieldSchema) GetExpr() *ScalarExpression {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *FieldSchema) GetTransform() string {
	if x != nil && x.Transform != nil {
		return *x.Transform
	}
	return ""
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields   []*FieldSchema `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	SchemaId uint32         `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Type     string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // meta internal use, for compatible with Iceberg, default to "struct"
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{12}
}

func (x *TableSchema) GetFields() []*FieldSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TableSchema) GetSchemaId() uint32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *TableSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type TextFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gang.wu): remove options and explicitly define properties
	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TextFileFormat) Reset() {
	*x = TextFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextFileFormat) ProtoMessage() {}

func (x *TextFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextFileFormat.ProtoReflect.Descriptor instead.
func (*TextFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{13}
}

func (x *TextFileFormat) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type ParquetFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowGroupSizeBytes int64 `protobuf:"varint,1,opt,name=row_group_size_bytes,json=rowGroupSizeBytes,proto3" json:"row_group_size_bytes,omitempty"`
	PageSizeBytes     int64 `protobuf:"varint,2,opt,name=page_size_bytes,json=pageSizeBytes,proto3" json:"page_size_bytes,omitempty"`
	DictSizeBytes     int64 `protobuf:"varint,3,opt,name=dict_size_bytes,json=dictSizeBytes,proto3" json:"dict_size_bytes,omitempty"`
}

func (x *ParquetFileFormat) Reset() {
	*x = ParquetFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetFileFormat) ProtoMessage() {}

func (x *ParquetFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetFileFormat.ProtoReflect.Descriptor instead.
func (*ParquetFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{14}
}

func (x *ParquetFileFormat) GetRowGroupSizeBytes() int64 {
	if x != nil {
		return x.RowGroupSizeBytes
	}
	return 0
}

func (x *ParquetFileFormat) GetPageSizeBytes() int64 {
	if x != nil {
		return x.PageSizeBytes
	}
	return 0
}

func (x *ParquetFileFormat) GetDictSizeBytes() int64 {
	if x != nil {
		return x.DictSizeBytes
	}
	return 0
}

type OrcFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrcFileFormat) Reset() {
	*x = OrcFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrcFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrcFileFormat) ProtoMessage() {}

func (x *OrcFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrcFileFormat.ProtoReflect.Descriptor instead.
func (*OrcFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{15}
}

type CsvFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gang.wu): remove options and explicitly define properties
	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CsvFileFormat) Reset() {
	*x = CsvFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvFileFormat) ProtoMessage() {}

func (x *CsvFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvFileFormat.ProtoReflect.Descriptor instead.
func (*CsvFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{16}
}

func (x *CsvFileFormat) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type HiveResultFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gang.wu): remove options and explicitly define properties
	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HiveResultFileFormat) Reset() {
	*x = HiveResultFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiveResultFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiveResultFileFormat) ProtoMessage() {}

func (x *HiveResultFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiveResultFileFormat.ProtoReflect.Descriptor instead.
func (*HiveResultFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{17}
}

func (x *HiveResultFileFormat) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type AvroFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvroFileFormat) Reset() {
	*x = AvroFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvroFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroFileFormat) ProtoMessage() {}

func (x *AvroFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroFileFormat.ProtoReflect.Descriptor instead.
func (*AvroFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{18}
}

type ArrowFileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArrowFileFormat) Reset() {
	*x = ArrowFileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowFileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowFileFormat) ProtoMessage() {}

func (x *ArrowFileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowFileFormat.ProtoReflect.Descriptor instead.
func (*ArrowFileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{19}
}

type FileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FileFormatType `protobuf:"varint,1,opt,name=type,proto3,enum=util.FileFormatType" json:"type,omitempty"`
	// Types that are assignable to Format:
	//
	//	*FileFormat_TextFile
	//	*FileFormat_ParquetFile
	//	*FileFormat_OrcFile
	//	*FileFormat_CsvFile
	//	*FileFormat_HiveResultFile
	//	*FileFormat_AvroFile
	//	*FileFormat_ArrowFile
	Format isFileFormat_Format `protobuf_oneof:"format"`
}

func (x *FileFormat) Reset() {
	*x = FileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFormat) ProtoMessage() {}

func (x *FileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFormat.ProtoReflect.Descriptor instead.
func (*FileFormat) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{20}
}

func (x *FileFormat) GetType() FileFormatType {
	if x != nil {
		return x.Type
	}
	return FileFormatType_TEXT
}

func (m *FileFormat) GetFormat() isFileFormat_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *FileFormat) GetTextFile() *TextFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_TextFile); ok {
		return x.TextFile
	}
	return nil
}

func (x *FileFormat) GetParquetFile() *ParquetFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_ParquetFile); ok {
		return x.ParquetFile
	}
	return nil
}

func (x *FileFormat) GetOrcFile() *OrcFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_OrcFile); ok {
		return x.OrcFile
	}
	return nil
}

func (x *FileFormat) GetCsvFile() *CsvFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_CsvFile); ok {
		return x.CsvFile
	}
	return nil
}

func (x *FileFormat) GetHiveResultFile() *HiveResultFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_HiveResultFile); ok {
		return x.HiveResultFile
	}
	return nil
}

func (x *FileFormat) GetAvroFile() *AvroFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_AvroFile); ok {
		return x.AvroFile
	}
	return nil
}

func (x *FileFormat) GetArrowFile() *ArrowFileFormat {
	if x, ok := x.GetFormat().(*FileFormat_ArrowFile); ok {
		return x.ArrowFile
	}
	return nil
}

type isFileFormat_Format interface {
	isFileFormat_Format()
}

type FileFormat_TextFile struct {
	TextFile *TextFileFormat `protobuf:"bytes,2,opt,name=textFile,proto3,oneof"`
}

type FileFormat_ParquetFile struct {
	ParquetFile *ParquetFileFormat `protobuf:"bytes,3,opt,name=parquet_file,json=parquetFile,proto3,oneof"`
}

type FileFormat_OrcFile struct {
	OrcFile *OrcFileFormat `protobuf:"bytes,4,opt,name=orc_file,json=orcFile,proto3,oneof"`
}

type FileFormat_CsvFile struct {
	CsvFile *CsvFileFormat `protobuf:"bytes,5,opt,name=csv_file,json=csvFile,proto3,oneof"`
}

type FileFormat_HiveResultFile struct {
	HiveResultFile *HiveResultFileFormat `protobuf:"bytes,6,opt,name=hive_result_file,json=hiveResultFile,proto3,oneof"`
}

type FileFormat_AvroFile struct {
	AvroFile *AvroFileFormat `protobuf:"bytes,7,opt,name=avro_file,json=avroFile,proto3,oneof"`
}

type FileFormat_ArrowFile struct {
	ArrowFile *ArrowFileFormat `protobuf:"bytes,8,opt,name=arrow_file,json=arrowFile,proto3,oneof"`
}

func (*FileFormat_TextFile) isFileFormat_Format() {}

func (*FileFormat_ParquetFile) isFileFormat_Format() {}

func (*FileFormat_OrcFile) isFileFormat_Format() {}

func (*FileFormat_CsvFile) isFileFormat_Format() {}

func (*FileFormat_HiveResultFile) isFileFormat_Format() {}

func (*FileFormat_AvroFile) isFileFormat_Format() {}

func (*FileFormat_ArrowFile) isFileFormat_Format() {}

type FileDataSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSystemType FileSystemType `protobuf:"varint,1,opt,name=fileSystemType,proto3,enum=util.FileSystemType" json:"fileSystemType,omitempty"`
	Path           string         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Format         *FileFormat    `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *FileDataSourceInfo) Reset() {
	*x = FileDataSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDataSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDataSourceInfo) ProtoMessage() {}

func (x *FileDataSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDataSourceInfo.ProtoReflect.Descriptor instead.
func (*FileDataSourceInfo) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{21}
}

func (x *FileDataSourceInfo) GetFileSystemType() FileSystemType {
	if x != nil {
		return x.FileSystemType
	}
	return FileSystemType_LOCAL
}

func (x *FileDataSourceInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDataSourceInfo) GetFormat() *FileFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type DataSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataSourceInfo:
	//
	//	*DataSourceInfo_File
	DataSourceInfo isDataSourceInfo_DataSourceInfo `protobuf_oneof:"dataSourceInfo"`
	Options        map[string]string               `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Location       string                          `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DataSourceInfo) Reset() {
	*x = DataSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceInfo) ProtoMessage() {}

func (x *DataSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceInfo.ProtoReflect.Descriptor instead.
func (*DataSourceInfo) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{22}
}

func (m *DataSourceInfo) GetDataSourceInfo() isDataSourceInfo_DataSourceInfo {
	if m != nil {
		return m.DataSourceInfo
	}
	return nil
}

func (x *DataSourceInfo) GetFile() *FileDataSourceInfo {
	if x, ok := x.GetDataSourceInfo().(*DataSourceInfo_File); ok {
		return x.File
	}
	return nil
}

func (x *DataSourceInfo) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *DataSourceInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type isDataSourceInfo_DataSourceInfo interface {
	isDataSourceInfo_DataSourceInfo()
}

type DataSourceInfo_File struct {
	File *FileDataSourceInfo `protobuf:"bytes,1,opt,name=file,proto3,oneof"`
}

func (*DataSourceInfo_File) isDataSourceInfo_DataSourceInfo() {}

type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceInfos     []*DataSourceInfo `protobuf:"bytes,17,rep,name=data_source_infos,json=dataSourceInfos,proto3" json:"data_source_infos,omitempty"`
	DefaultDataSourceId uint32            `protobuf:"varint,18,opt,name=default_data_source_id,json=defaultDataSourceId,proto3" json:"default_data_source_id,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{23}
}

func (x *DataSource) GetDataSourceInfos() []*DataSourceInfo {
	if x != nil {
		return x.DataSourceInfos
	}
	return nil
}

func (x *DataSource) GetDefaultDataSourceId() uint32 {
	if x != nil {
		return x.DefaultDataSourceId
	}
	return 0
}

type MVSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(chendong): engine use identifier for parameter, while store table id in meta later
	TableIdentifier *ObjectIdentifier `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier,proto3" json:"table_identifier,omitempty"`
	// the source table's snapshot version by which the MV is created
	// used for checking expiration of MV
	Snapshot int64 `protobuf:"varint,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *MVSource) Reset() {
	*x = MVSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVSource) ProtoMessage() {}

func (x *MVSource) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVSource.ProtoReflect.Descriptor instead.
func (*MVSource) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{24}
}

func (x *MVSource) GetTableIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

func (x *MVSource) GetSnapshot() int64 {
	if x != nil {
		return x.Snapshot
	}
	return 0
}

type RefreshOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             RefreshOption_Type `protobuf:"varint,1,opt,name=type,proto3,enum=util.RefreshOption_Type" json:"type,omitempty"`
	StartTime        int64              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IntervalInMinute int64              `protobuf:"varint,3,opt,name=interval_in_minute,json=intervalInMinute,proto3" json:"interval_in_minute,omitempty"`
}

func (x *RefreshOption) Reset() {
	*x = RefreshOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshOption) ProtoMessage() {}

func (x *RefreshOption) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshOption.ProtoReflect.Descriptor instead.
func (*RefreshOption) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{25}
}

func (x *RefreshOption) GetType() RefreshOption_Type {
	if x != nil {
		return x.Type
	}
	return RefreshOption_ON_DEMAND
}

func (x *RefreshOption) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RefreshOption) GetIntervalInMinute() int64 {
	if x != nil {
		return x.IntervalInMinute
	}
	return 0
}

type MVExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MvPlan         string         `protobuf:"bytes,1,opt,name=mv_plan,json=mvPlan,proto3" json:"mv_plan,omitempty"`
	MvSourceTables []*MVSource    `protobuf:"bytes,2,rep,name=mv_source_tables,json=mvSourceTables,proto3" json:"mv_source_tables,omitempty"`
	RefreshOption  *RefreshOption `protobuf:"bytes,3,opt,name=refresh_option,json=refreshOption,proto3" json:"refresh_option,omitempty"`
	MvSnapshotId   *int64         `protobuf:"varint,4,opt,name=mv_snapshot_id,json=mvSnapshotId,proto3,oneof" json:"mv_snapshot_id,omitempty"`
}

func (x *MVExtension) Reset() {
	*x = MVExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVExtension) ProtoMessage() {}

func (x *MVExtension) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVExtension.ProtoReflect.Descriptor instead.
func (*MVExtension) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{26}
}

func (x *MVExtension) GetMvPlan() string {
	if x != nil {
		return x.MvPlan
	}
	return ""
}

func (x *MVExtension) GetMvSourceTables() []*MVSource {
	if x != nil {
		return x.MvSourceTables
	}
	return nil
}

func (x *MVExtension) GetRefreshOption() *RefreshOption {
	if x != nil {
		return x.RefreshOption
	}
	return nil
}

func (x *MVExtension) GetMvSnapshotId() int64 {
	if x != nil && x.MvSnapshotId != nil {
		return *x.MvSnapshotId
	}
	return 0
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewExpandedText string       `protobuf:"bytes,1,opt,name=view_expanded_text,json=viewExpandedText,proto3" json:"view_expanded_text,omitempty"`
	ViewOriginalText string       `protobuf:"bytes,2,opt,name=view_original_text,json=viewOriginalText,proto3" json:"view_original_text,omitempty"`
	MvExtension      *MVExtension `protobuf:"bytes,5,opt,name=mv_extension,json=mvExtension,proto3" json:"mv_extension,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_table_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_util_table_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_util_table_common_proto_rawDescGZIP(), []int{27}
}

func (x *View) GetViewExpandedText() string {
	if x != nil {
		return x.ViewExpandedText
	}
	return ""
}

func (x *View) GetViewOriginalText() string {
	if x != nil {
		return x.ViewOriginalText
	}
	return ""
}

func (x *View) GetMvExtension() *MVExtension {
	if x != nil {
		return x.MvExtension
	}
	return nil
}

var File_util_table_common_proto protoreflect.FileDescriptor

var file_util_table_common_proto_rawDesc = []byte{
	0x0a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x1a,
	0x14, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x75, 0x74, 0x69, 0x6c,
	0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x51, 0x0a, 0x08, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x43, 0x0a, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x79, 0x22, 0x7c, 0x0a, 0x0a, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x79, 0x22, 0x32, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x09, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22,
	0xbf, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x22, 0x69, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x0e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x6f,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x0f, 0x0a, 0x0d, 0x4f, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x0d, 0x43, 0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x73, 0x76, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x48,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x76, 0x72, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x73, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x73,
	0x76, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x09, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x76, 0x72, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x76, 0x72, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x08, 0x4d, 0x56, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x4d, 0x56, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x76, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x76, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x38, 0x0a, 0x10, 0x6d, 0x76, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4d, 0x56, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x76, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x76, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x6d, 0x76, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x76, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x76, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x56, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x76, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2a,
	0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x0e, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x2a, 0x6e, 0x0a, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x63, 0x2a, 0x1d, 0x0a, 0x09, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x00, 0x2a, 0x40, 0x0a, 0x09, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x49, 0x43, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x42, 0x39, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74,
	0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_table_common_proto_rawDescOnce sync.Once
	file_util_table_common_proto_rawDescData = file_util_table_common_proto_rawDesc
)

func file_util_table_common_proto_rawDescGZIP() []byte {
	file_util_table_common_proto_rawDescOnce.Do(func() {
		file_util_table_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_table_common_proto_rawDescData)
	})
	return file_util_table_common_proto_rawDescData
}

var file_util_table_common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_util_table_common_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_util_table_common_proto_goTypes = []interface{}{
	(Order)(0),                   // 0: util.Order
	(ClusterType)(0),             // 1: util.ClusterType
	(HashBucketType)(0),          // 2: util.HashBucketType
	(TableType)(0),               // 3: util.TableType
	(IndexType)(0),               // 4: util.IndexType
	(RangeType)(0),               // 5: util.RangeType
	(RefreshOption_Type)(0),      // 6: util.RefreshOption.Type
	(*FieldRef)(nil),             // 7: util.FieldRef
	(*SortedField)(nil),          // 8: util.SortedField
	(*HashCluster)(nil),          // 9: util.HashCluster
	(*RangeCluster)(nil),         // 10: util.RangeCluster
	(*ClusterInfo)(nil),          // 11: util.ClusterInfo
	(*SortOrder)(nil),            // 12: util.SortOrder
	(*UniqueKey)(nil),            // 13: util.UniqueKey
	(*PrimaryKey)(nil),           // 14: util.PrimaryKey
	(*IndexKey)(nil),             // 15: util.IndexKey
	(*Index)(nil),                // 16: util.Index
	(*FieldSpec)(nil),            // 17: util.FieldSpec
	(*FieldSchema)(nil),          // 18: util.FieldSchema
	(*TableSchema)(nil),          // 19: util.TableSchema
	(*TextFileFormat)(nil),       // 20: util.TextFileFormat
	(*ParquetFileFormat)(nil),    // 21: util.ParquetFileFormat
	(*OrcFileFormat)(nil),        // 22: util.OrcFileFormat
	(*CsvFileFormat)(nil),        // 23: util.CsvFileFormat
	(*HiveResultFileFormat)(nil), // 24: util.HiveResultFileFormat
	(*AvroFileFormat)(nil),       // 25: util.AvroFileFormat
	(*ArrowFileFormat)(nil),      // 26: util.ArrowFileFormat
	(*FileFormat)(nil),           // 27: util.FileFormat
	(*FileDataSourceInfo)(nil),   // 28: util.FileDataSourceInfo
	(*DataSourceInfo)(nil),       // 29: util.DataSourceInfo
	(*DataSource)(nil),           // 30: util.DataSource
	(*MVSource)(nil),             // 31: util.MVSource
	(*RefreshOption)(nil),        // 32: util.RefreshOption
	(*MVExtension)(nil),          // 33: util.MVExtension
	(*View)(nil),                 // 34: util.View
	nil,                          // 35: util.TextFileFormat.OptionsEntry
	nil,                          // 36: util.CsvFileFormat.OptionsEntry
	nil,                          // 37: util.HiveResultFileFormat.OptionsEntry
	nil,                          // 38: util.DataSourceInfo.OptionsEntry
	(*ObjectIdentifier)(nil),     // 39: util.ObjectIdentifier
	(*DataType)(nil),             // 40: util.DataType
	(*ScalarExpression)(nil),     // 41: util.ScalarExpression
	(FileFormatType)(0),          // 42: util.FileFormatType
	(FileSystemType)(0),          // 43: util.FileSystemType
}
var file_util_table_common_proto_depIdxs = []int32{
	7,  // 0: util.SortedField.field:type_name -> util.FieldRef
	0,  // 1: util.SortedField.sort_order:type_name -> util.Order
	2,  // 2: util.HashCluster.bucket_type:type_name -> util.HashBucketType
	5,  // 3: util.RangeCluster.range_type:type_name -> util.RangeType
	1,  // 4: util.ClusterInfo.cluster_type:type_name -> util.ClusterType
	7,  // 5: util.ClusterInfo.clustered_fields:type_name -> util.FieldRef
	9,  // 6: util.ClusterInfo.hash:type_name -> util.HashCluster
	10, // 7: util.ClusterInfo.range:type_name -> util.RangeCluster
	8,  // 8: util.SortOrder.sorted_fields:type_name -> util.SortedField
	7,  // 9: util.UniqueKey.unique_fields:type_name -> util.FieldRef
	7,  // 10: util.PrimaryKey.fields:type_name -> util.FieldRef
	7,  // 11: util.IndexKey.fields:type_name -> util.FieldRef
	4,  // 12: util.Index.type:type_name -> util.IndexType
	15, // 13: util.Index.key:type_name -> util.IndexKey
	39, // 14: util.Index.table:type_name -> util.ObjectIdentifier
	11, // 15: util.FieldSpec.cluster_info:type_name -> util.ClusterInfo
	12, // 16: util.FieldSpec.sort_order:type_name -> util.SortOrder
	13, // 17: util.FieldSpec.unique_key:type_name -> util.UniqueKey
	14, // 18: util.FieldSpec.primary_key:type_name -> util.PrimaryKey
	16, // 19: util.FieldSpec.index:type_name -> util.Index
	40, // 20: util.FieldSchema.type:type_name -> util.DataType
	41, // 21: util.FieldSchema.expr:type_name -> util.ScalarExpression
	18, // 22: util.TableSchema.fields:type_name -> util.FieldSchema
	35, // 23: util.TextFileFormat.options:type_name -> util.TextFileFormat.OptionsEntry
	36, // 24: util.CsvFileFormat.options:type_name -> util.CsvFileFormat.OptionsEntry
	37, // 25: util.HiveResultFileFormat.options:type_name -> util.HiveResultFileFormat.OptionsEntry
	42, // 26: util.FileFormat.type:type_name -> util.FileFormatType
	20, // 27: util.FileFormat.textFile:type_name -> util.TextFileFormat
	21, // 28: util.FileFormat.parquet_file:type_name -> util.ParquetFileFormat
	22, // 29: util.FileFormat.orc_file:type_name -> util.OrcFileFormat
	23, // 30: util.FileFormat.csv_file:type_name -> util.CsvFileFormat
	24, // 31: util.FileFormat.hive_result_file:type_name -> util.HiveResultFileFormat
	25, // 32: util.FileFormat.avro_file:type_name -> util.AvroFileFormat
	26, // 33: util.FileFormat.arrow_file:type_name -> util.ArrowFileFormat
	43, // 34: util.FileDataSourceInfo.fileSystemType:type_name -> util.FileSystemType
	27, // 35: util.FileDataSourceInfo.format:type_name -> util.FileFormat
	28, // 36: util.DataSourceInfo.file:type_name -> util.FileDataSourceInfo
	38, // 37: util.DataSourceInfo.options:type_name -> util.DataSourceInfo.OptionsEntry
	29, // 38: util.DataSource.data_source_infos:type_name -> util.DataSourceInfo
	39, // 39: util.MVSource.table_identifier:type_name -> util.ObjectIdentifier
	6,  // 40: util.RefreshOption.type:type_name -> util.RefreshOption.Type
	31, // 41: util.MVExtension.mv_source_tables:type_name -> util.MVSource
	32, // 42: util.MVExtension.refresh_option:type_name -> util.RefreshOption
	33, // 43: util.View.mv_extension:type_name -> util.MVExtension
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_util_table_common_proto_init() }
func file_util_table_common_proto_init() {
	if File_util_table_common_proto != nil {
		return
	}
	file_util_data_type_proto_init()
	file_util_file_format_type_proto_init()
	file_util_file_system_proto_init()
	file_util_object_identifier_proto_init()
	file_util_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_util_table_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrcFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiveResultFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvroFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrowFileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDataSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_table_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_util_table_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FieldRef_FieldId)(nil),
		(*FieldRef_FieldName)(nil),
	}
	file_util_table_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ClusterInfo_Hash)(nil),
		(*ClusterInfo_Range)(nil),
	}
	file_util_table_common_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*FieldSpec_ClusterInfo)(nil),
		(*FieldSpec_SortOrder)(nil),
		(*FieldSpec_UniqueKey)(nil),
		(*FieldSpec_PrimaryKey)(nil),
		(*FieldSpec_Index)(nil),
	}
	file_util_table_common_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_util_table_common_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*FileFormat_TextFile)(nil),
		(*FileFormat_ParquetFile)(nil),
		(*FileFormat_OrcFile)(nil),
		(*FileFormat_CsvFile)(nil),
		(*FileFormat_HiveResultFile)(nil),
		(*FileFormat_AvroFile)(nil),
		(*FileFormat_ArrowFile)(nil),
	}
	file_util_table_common_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*DataSourceInfo_File)(nil),
	}
	file_util_table_common_proto_msgTypes[26].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_table_common_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_table_common_proto_goTypes,
		DependencyIndexes: file_util_table_common_proto_depIdxs,
		EnumInfos:         file_util_table_common_proto_enumTypes,
		MessageInfos:      file_util_table_common_proto_msgTypes,
	}.Build()
	File_util_table_common_proto = out.File
	file_util_table_common_proto_rawDesc = nil
	file_util_table_common_proto_goTypes = nil
	file_util_table_common_proto_depIdxs = nil
}
