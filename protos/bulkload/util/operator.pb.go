// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: util/operator.proto

package util

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggStage int32

const (
	AggStage_DUPLICATE AggStage = 0
	AggStage_PARTIAL1  AggStage = 1
	AggStage_PARTIAL2  AggStage = 2
	AggStage_FINAL     AggStage = 3
	AggStage_COMPLETE  AggStage = 4
)

// Enum value maps for AggStage.
var (
	AggStage_name = map[int32]string{
		0: "DUPLICATE",
		1: "PARTIAL1",
		2: "PARTIAL2",
		3: "FINAL",
		4: "COMPLETE",
	}
	AggStage_value = map[string]int32{
		"DUPLICATE": 0,
		"PARTIAL1":  1,
		"PARTIAL2":  2,
		"FINAL":     3,
		"COMPLETE":  4,
	}
)

func (x AggStage) Enum() *AggStage {
	p := new(AggStage)
	*p = x
	return p
}

func (x AggStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggStage) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[0].Descriptor()
}

func (AggStage) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[0]
}

func (x AggStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggStage.Descriptor instead.
func (AggStage) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{0}
}

type JoinType int32

const (
	JoinType_INNER     JoinType = 0
	JoinType_LEFT      JoinType = 1
	JoinType_RIGHT     JoinType = 2
	JoinType_FULL      JoinType = 3
	JoinType_LEFT_SEMI JoinType = 4
	JoinType_LEFT_ANTI JoinType = 5
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "INNER",
		1: "LEFT",
		2: "RIGHT",
		3: "FULL",
		4: "LEFT_SEMI",
		5: "LEFT_ANTI",
	}
	JoinType_value = map[string]int32{
		"INNER":     0,
		"LEFT":      1,
		"RIGHT":     2,
		"FULL":      3,
		"LEFT_SEMI": 4,
		"LEFT_ANTI": 5,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[1].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[1]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{1}
}

type DynamicFilterType int32

const (
	DynamicFilterType_DF_NONE      DynamicFilterType = 0
	DynamicFilterType_DF_GLOBAL    DynamicFilterType = 1
	DynamicFilterType_DF_BROADCAST DynamicFilterType = 2
	DynamicFilterType_DF_SHUFFLED  DynamicFilterType = 3
)

// Enum value maps for DynamicFilterType.
var (
	DynamicFilterType_name = map[int32]string{
		0: "DF_NONE",
		1: "DF_GLOBAL",
		2: "DF_BROADCAST",
		3: "DF_SHUFFLED",
	}
	DynamicFilterType_value = map[string]int32{
		"DF_NONE":      0,
		"DF_GLOBAL":    1,
		"DF_BROADCAST": 2,
		"DF_SHUFFLED":  3,
	}
)

func (x DynamicFilterType) Enum() *DynamicFilterType {
	p := new(DynamicFilterType)
	*p = x
	return p
}

func (x DynamicFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[2].Descriptor()
}

func (DynamicFilterType) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[2]
}

func (x DynamicFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicFilterType.Descriptor instead.
func (DynamicFilterType) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{2}
}

type LazyEval int32

const (
	LazyEval_NOT_LAZY          LazyEval = 0
	LazyEval_LAZY_IN_CONDITION LazyEval = 1
	LazyEval_ALWAYS_LAZY       LazyEval = 2
)

// Enum value maps for LazyEval.
var (
	LazyEval_name = map[int32]string{
		0: "NOT_LAZY",
		1: "LAZY_IN_CONDITION",
		2: "ALWAYS_LAZY",
	}
	LazyEval_value = map[string]int32{
		"NOT_LAZY":          0,
		"LAZY_IN_CONDITION": 1,
		"ALWAYS_LAZY":       2,
	}
)

func (x LazyEval) Enum() *LazyEval {
	p := new(LazyEval)
	*p = x
	return p
}

func (x LazyEval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LazyEval) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[3].Descriptor()
}

func (LazyEval) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[3]
}

func (x LazyEval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LazyEval.Descriptor instead.
func (LazyEval) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{3}
}

type SetOpType int32

const (
	SetOpType_UNION     SetOpType = 0
	SetOpType_INTERSECT SetOpType = 1
	SetOpType_EXCEPT    SetOpType = 2
)

// Enum value maps for SetOpType.
var (
	SetOpType_name = map[int32]string{
		0: "UNION",
		1: "INTERSECT",
		2: "EXCEPT",
	}
	SetOpType_value = map[string]int32{
		"UNION":     0,
		"INTERSECT": 1,
		"EXCEPT":    2,
	}
)

func (x SetOpType) Enum() *SetOpType {
	p := new(SetOpType)
	*p = x
	return p
}

func (x SetOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[4].Descriptor()
}

func (SetOpType) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[4]
}

func (x SetOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOpType.Descriptor instead.
func (SetOpType) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{4}
}

type WindowSpec_BoundaryType int32

const (
	WindowSpec_ROWS  WindowSpec_BoundaryType = 0
	WindowSpec_RANGE WindowSpec_BoundaryType = 1
	WindowSpec_GROUP WindowSpec_BoundaryType = 2
)

// Enum value maps for WindowSpec_BoundaryType.
var (
	WindowSpec_BoundaryType_name = map[int32]string{
		0: "ROWS",
		1: "RANGE",
		2: "GROUP",
	}
	WindowSpec_BoundaryType_value = map[string]int32{
		"ROWS":  0,
		"RANGE": 1,
		"GROUP": 2,
	}
)

func (x WindowSpec_BoundaryType) Enum() *WindowSpec_BoundaryType {
	p := new(WindowSpec_BoundaryType)
	*p = x
	return p
}

func (x WindowSpec_BoundaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowSpec_BoundaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[5].Descriptor()
}

func (WindowSpec_BoundaryType) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[5]
}

func (x WindowSpec_BoundaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowSpec_BoundaryType.Descriptor instead.
func (WindowSpec_BoundaryType) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{24, 0}
}

type ShuffleType_Type int32

const (
	ShuffleType_HASH           ShuffleType_Type = 0
	ShuffleType_RANGE          ShuffleType_Type = 1
	ShuffleType_BROADCAST      ShuffleType_Type = 2
	ShuffleType_SINGLE         ShuffleType_Type = 3
	ShuffleType_RANDOM         ShuffleType_Type = 4
	ShuffleType_PAIR_WIZE      ShuffleType_Type = 5
	ShuffleType_ADAPTIVE_HASH  ShuffleType_Type = 6
	ShuffleType_ADAPTIVE_RANGE ShuffleType_Type = 7
	ShuffleType_ROUND_ROBIN    ShuffleType_Type = 8
)

// Enum value maps for ShuffleType_Type.
var (
	ShuffleType_Type_name = map[int32]string{
		0: "HASH",
		1: "RANGE",
		2: "BROADCAST",
		3: "SINGLE",
		4: "RANDOM",
		5: "PAIR_WIZE",
		6: "ADAPTIVE_HASH",
		7: "ADAPTIVE_RANGE",
		8: "ROUND_ROBIN",
	}
	ShuffleType_Type_value = map[string]int32{
		"HASH":           0,
		"RANGE":          1,
		"BROADCAST":      2,
		"SINGLE":         3,
		"RANDOM":         4,
		"PAIR_WIZE":      5,
		"ADAPTIVE_HASH":  6,
		"ADAPTIVE_RANGE": 7,
		"ROUND_ROBIN":    8,
	}
)

func (x ShuffleType_Type) Enum() *ShuffleType_Type {
	p := new(ShuffleType_Type)
	*p = x
	return p
}

func (x ShuffleType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShuffleType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_util_operator_proto_enumTypes[6].Descriptor()
}

func (ShuffleType_Type) Type() protoreflect.EnumType {
	return &file_util_operator_proto_enumTypes[6]
}

func (x ShuffleType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShuffleType_Type.Descriptor instead.
func (ShuffleType_Type) EnumDescriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{57, 0}
}

type ColumnMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputId uint64 `protobuf:"varint,1,opt,name=outputId,proto3" json:"outputId,omitempty"`
	InputId  uint64 `protobuf:"varint,2,opt,name=inputId,proto3" json:"inputId,omitempty"`
}

func (x *ColumnMapping) Reset() {
	*x = ColumnMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMapping) ProtoMessage() {}

func (x *ColumnMapping) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMapping.ProtoReflect.Descriptor instead.
func (*ColumnMapping) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnMapping) GetOutputId() uint64 {
	if x != nil {
		return x.OutputId
	}
	return 0
}

func (x *ColumnMapping) GetInputId() uint64 {
	if x != nil {
		return x.InputId
	}
	return 0
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InputIds       []string         `protobuf:"bytes,2,rep,name=inputIds,proto3" json:"inputIds,omitempty"`
	Schema         *DataType        `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	ColumnMappings []*ColumnMapping `protobuf:"bytes,4,rep,name=columnMappings,proto3" json:"columnMappings,omitempty"`
	Signature      uint64           `protobuf:"varint,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to Op:
	//
	//	*Operator_TableScan
	//	*Operator_TableSink
	//	*Operator_Calc
	//	*Operator_MergeSort
	//	*Operator_ShuffleWrite
	//	*Operator_ShuffleRead
	//	*Operator_Values
	//	*Operator_HashAgg
	//	*Operator_SortedAgg
	//	*Operator_MergeJoin
	//	*Operator_HashJoin
	//	*Operator_LocalSort
	//	*Operator_UnionAll
	//	*Operator_Buffer
	//	*Operator_Window
	//	*Operator_Expand
	//	*Operator_LateralView
	//	*Operator_Grouping
	//	*Operator_Join
	//	*Operator_Aggregate
	//	*Operator_LogicalCalc
	//	*Operator_LogicalSort
	//	*Operator_SetOperator
	//	*Operator_AggPhase
	//	*Operator_Spool
	//	*Operator_PartialWindowFilter
	//	*Operator_TreeJoin
	//	*Operator_TreeJoinLeaf
	//	*Operator_LocalExchange
	Op isOperator_Op `protobuf_oneof:"op"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{1}
}

func (x *Operator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operator) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *Operator) GetSchema() *DataType {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Operator) GetColumnMappings() []*ColumnMapping {
	if x != nil {
		return x.ColumnMappings
	}
	return nil
}

func (x *Operator) GetSignature() uint64 {
	if x != nil {
		return x.Signature
	}
	return 0
}

func (m *Operator) GetOp() isOperator_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *Operator) GetTableScan() *TableScan {
	if x, ok := x.GetOp().(*Operator_TableScan); ok {
		return x.TableScan
	}
	return nil
}

func (x *Operator) GetTableSink() *TableSink {
	if x, ok := x.GetOp().(*Operator_TableSink); ok {
		return x.TableSink
	}
	return nil
}

func (x *Operator) GetCalc() *Calc {
	if x, ok := x.GetOp().(*Operator_Calc); ok {
		return x.Calc
	}
	return nil
}

func (x *Operator) GetMergeSort() *MergeSort {
	if x, ok := x.GetOp().(*Operator_MergeSort); ok {
		return x.MergeSort
	}
	return nil
}

func (x *Operator) GetShuffleWrite() *ShuffleWrite {
	if x, ok := x.GetOp().(*Operator_ShuffleWrite); ok {
		return x.ShuffleWrite
	}
	return nil
}

func (x *Operator) GetShuffleRead() *ShuffleRead {
	if x, ok := x.GetOp().(*Operator_ShuffleRead); ok {
		return x.ShuffleRead
	}
	return nil
}

func (x *Operator) GetValues() *Values {
	if x, ok := x.GetOp().(*Operator_Values); ok {
		return x.Values
	}
	return nil
}

func (x *Operator) GetHashAgg() *HashAggregate {
	if x, ok := x.GetOp().(*Operator_HashAgg); ok {
		return x.HashAgg
	}
	return nil
}

func (x *Operator) GetSortedAgg() *SortedAggregate {
	if x, ok := x.GetOp().(*Operator_SortedAgg); ok {
		return x.SortedAgg
	}
	return nil
}

func (x *Operator) GetMergeJoin() *SortMergeJoin {
	if x, ok := x.GetOp().(*Operator_MergeJoin); ok {
		return x.MergeJoin
	}
	return nil
}

func (x *Operator) GetHashJoin() *HashJoin {
	if x, ok := x.GetOp().(*Operator_HashJoin); ok {
		return x.HashJoin
	}
	return nil
}

func (x *Operator) GetLocalSort() *LocalSort {
	if x, ok := x.GetOp().(*Operator_LocalSort); ok {
		return x.LocalSort
	}
	return nil
}

func (x *Operator) GetUnionAll() *UnionAll {
	if x, ok := x.GetOp().(*Operator_UnionAll); ok {
		return x.UnionAll
	}
	return nil
}

func (x *Operator) GetBuffer() *Buffer {
	if x, ok := x.GetOp().(*Operator_Buffer); ok {
		return x.Buffer
	}
	return nil
}

func (x *Operator) GetWindow() *Window {
	if x, ok := x.GetOp().(*Operator_Window); ok {
		return x.Window
	}
	return nil
}

func (x *Operator) GetExpand() *Expand {
	if x, ok := x.GetOp().(*Operator_Expand); ok {
		return x.Expand
	}
	return nil
}

func (x *Operator) GetLateralView() *LateralView {
	if x, ok := x.GetOp().(*Operator_LateralView); ok {
		return x.LateralView
	}
	return nil
}

func (x *Operator) GetGrouping() *Grouping {
	if x, ok := x.GetOp().(*Operator_Grouping); ok {
		return x.Grouping
	}
	return nil
}

func (x *Operator) GetJoin() *LogicalJoin {
	if x, ok := x.GetOp().(*Operator_Join); ok {
		return x.Join
	}
	return nil
}

func (x *Operator) GetAggregate() *LogicalAggregate {
	if x, ok := x.GetOp().(*Operator_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (x *Operator) GetLogicalCalc() *LogicalCalc {
	if x, ok := x.GetOp().(*Operator_LogicalCalc); ok {
		return x.LogicalCalc
	}
	return nil
}

func (x *Operator) GetLogicalSort() *LogicalSort {
	if x, ok := x.GetOp().(*Operator_LogicalSort); ok {
		return x.LogicalSort
	}
	return nil
}

func (x *Operator) GetSetOperator() *SetOperator {
	if x, ok := x.GetOp().(*Operator_SetOperator); ok {
		return x.SetOperator
	}
	return nil
}

func (x *Operator) GetAggPhase() *AggregatePhase {
	if x, ok := x.GetOp().(*Operator_AggPhase); ok {
		return x.AggPhase
	}
	return nil
}

func (x *Operator) GetSpool() *Spool {
	if x, ok := x.GetOp().(*Operator_Spool); ok {
		return x.Spool
	}
	return nil
}

func (x *Operator) GetPartialWindowFilter() *PartialWindowFilter {
	if x, ok := x.GetOp().(*Operator_PartialWindowFilter); ok {
		return x.PartialWindowFilter
	}
	return nil
}

func (x *Operator) GetTreeJoin() *TreeJoin {
	if x, ok := x.GetOp().(*Operator_TreeJoin); ok {
		return x.TreeJoin
	}
	return nil
}

func (x *Operator) GetTreeJoinLeaf() *TreeJoinLeaf {
	if x, ok := x.GetOp().(*Operator_TreeJoinLeaf); ok {
		return x.TreeJoinLeaf
	}
	return nil
}

func (x *Operator) GetLocalExchange() *LocalExchange {
	if x, ok := x.GetOp().(*Operator_LocalExchange); ok {
		return x.LocalExchange
	}
	return nil
}

type isOperator_Op interface {
	isOperator_Op()
}

type Operator_TableScan struct {
	TableScan *TableScan `protobuf:"bytes,10,opt,name=table_scan,json=tableScan,proto3,oneof"`
}

type Operator_TableSink struct {
	TableSink *TableSink `protobuf:"bytes,11,opt,name=table_sink,json=tableSink,proto3,oneof"`
}

type Operator_Calc struct {
	Calc *Calc `protobuf:"bytes,12,opt,name=calc,proto3,oneof"`
}

type Operator_MergeSort struct {
	MergeSort *MergeSort `protobuf:"bytes,13,opt,name=merge_sort,json=mergeSort,proto3,oneof"`
}

type Operator_ShuffleWrite struct {
	ShuffleWrite *ShuffleWrite `protobuf:"bytes,14,opt,name=shuffle_write,json=shuffleWrite,proto3,oneof"`
}

type Operator_ShuffleRead struct {
	ShuffleRead *ShuffleRead `protobuf:"bytes,15,opt,name=shuffle_read,json=shuffleRead,proto3,oneof"`
}

type Operator_Values struct {
	Values *Values `protobuf:"bytes,16,opt,name=values,proto3,oneof"`
}

type Operator_HashAgg struct {
	HashAgg *HashAggregate `protobuf:"bytes,17,opt,name=hash_agg,json=hashAgg,proto3,oneof"`
}

type Operator_SortedAgg struct {
	SortedAgg *SortedAggregate `protobuf:"bytes,18,opt,name=sorted_agg,json=sortedAgg,proto3,oneof"`
}

type Operator_MergeJoin struct {
	MergeJoin *SortMergeJoin `protobuf:"bytes,19,opt,name=merge_join,json=mergeJoin,proto3,oneof"`
}

type Operator_HashJoin struct {
	HashJoin *HashJoin `protobuf:"bytes,20,opt,name=hash_join,json=hashJoin,proto3,oneof"`
}

type Operator_LocalSort struct {
	LocalSort *LocalSort `protobuf:"bytes,21,opt,name=local_sort,json=localSort,proto3,oneof"`
}

type Operator_UnionAll struct {
	UnionAll *UnionAll `protobuf:"bytes,22,opt,name=union_all,json=unionAll,proto3,oneof"`
}

type Operator_Buffer struct {
	Buffer *Buffer `protobuf:"bytes,23,opt,name=buffer,proto3,oneof"`
}

type Operator_Window struct {
	Window *Window `protobuf:"bytes,24,opt,name=window,proto3,oneof"`
}

type Operator_Expand struct {
	Expand *Expand `protobuf:"bytes,25,opt,name=expand,proto3,oneof"`
}

type Operator_LateralView struct {
	LateralView *LateralView `protobuf:"bytes,26,opt,name=lateral_view,json=lateralView,proto3,oneof"`
}

type Operator_Grouping struct {
	Grouping *Grouping `protobuf:"bytes,27,opt,name=grouping,proto3,oneof"`
}

type Operator_Join struct {
	Join *LogicalJoin `protobuf:"bytes,50,opt,name=join,proto3,oneof"`
}

type Operator_Aggregate struct {
	Aggregate *LogicalAggregate `protobuf:"bytes,51,opt,name=aggregate,proto3,oneof"`
}

type Operator_LogicalCalc struct {
	LogicalCalc *LogicalCalc `protobuf:"bytes,52,opt,name=logical_calc,json=logicalCalc,proto3,oneof"`
}

type Operator_LogicalSort struct {
	LogicalSort *LogicalSort `protobuf:"bytes,53,opt,name=logical_sort,json=logicalSort,proto3,oneof"`
}

type Operator_SetOperator struct {
	SetOperator *SetOperator `protobuf:"bytes,54,opt,name=set_operator,json=setOperator,proto3,oneof"`
}

type Operator_AggPhase struct {
	AggPhase *AggregatePhase `protobuf:"bytes,55,opt,name=agg_phase,json=aggPhase,proto3,oneof"`
}

type Operator_Spool struct {
	Spool *Spool `protobuf:"bytes,56,opt,name=spool,proto3,oneof"`
}

type Operator_PartialWindowFilter struct {
	PartialWindowFilter *PartialWindowFilter `protobuf:"bytes,57,opt,name=partial_window_filter,json=partialWindowFilter,proto3,oneof"`
}

type Operator_TreeJoin struct {
	TreeJoin *TreeJoin `protobuf:"bytes,58,opt,name=tree_join,json=treeJoin,proto3,oneof"`
}

type Operator_TreeJoinLeaf struct {
	TreeJoinLeaf *TreeJoinLeaf `protobuf:"bytes,59,opt,name=tree_join_leaf,json=treeJoinLeaf,proto3,oneof"`
}

type Operator_LocalExchange struct {
	LocalExchange *LocalExchange `protobuf:"bytes,60,opt,name=local_exchange,json=localExchange,proto3,oneof"`
}

func (*Operator_TableScan) isOperator_Op() {}

func (*Operator_TableSink) isOperator_Op() {}

func (*Operator_Calc) isOperator_Op() {}

func (*Operator_MergeSort) isOperator_Op() {}

func (*Operator_ShuffleWrite) isOperator_Op() {}

func (*Operator_ShuffleRead) isOperator_Op() {}

func (*Operator_Values) isOperator_Op() {}

func (*Operator_HashAgg) isOperator_Op() {}

func (*Operator_SortedAgg) isOperator_Op() {}

func (*Operator_MergeJoin) isOperator_Op() {}

func (*Operator_HashJoin) isOperator_Op() {}

func (*Operator_LocalSort) isOperator_Op() {}

func (*Operator_UnionAll) isOperator_Op() {}

func (*Operator_Buffer) isOperator_Op() {}

func (*Operator_Window) isOperator_Op() {}

func (*Operator_Expand) isOperator_Op() {}

func (*Operator_LateralView) isOperator_Op() {}

func (*Operator_Grouping) isOperator_Op() {}

func (*Operator_Join) isOperator_Op() {}

func (*Operator_Aggregate) isOperator_Op() {}

func (*Operator_LogicalCalc) isOperator_Op() {}

func (*Operator_LogicalSort) isOperator_Op() {}

func (*Operator_SetOperator) isOperator_Op() {}

func (*Operator_AggPhase) isOperator_Op() {}

func (*Operator_Spool) isOperator_Op() {}

func (*Operator_PartialWindowFilter) isOperator_Op() {}

func (*Operator_TreeJoin) isOperator_Op() {}

func (*Operator_TreeJoinLeaf) isOperator_Op() {}

func (*Operator_LocalExchange) isOperator_Op() {}

type AggregateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function     *ScalarExpression `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Distinct     bool              `protobuf:"varint,2,opt,name=distinct,proto3" json:"distinct,omitempty"`
	Stage        AggStage          `protobuf:"varint,3,opt,name=stage,proto3,enum=util.AggStage" json:"stage,omitempty"`
	Orders       []*OrderByDesc    `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders,omitempty"`
	Filter       *Reference        `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OutputFields []uint64          `protobuf:"varint,6,rep,packed,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"`
	Initial_Type *DataType         `protobuf:"bytes,10,opt,name=initial_Type,json=initialType,proto3" json:"initial_Type,omitempty"` // The initial data type of an aggregate function
	Partial_Type *DataType         `protobuf:"bytes,11,opt,name=partial_Type,json=partialType,proto3" json:"partial_Type,omitempty"` // The partial data type of an aggregate function
	Output_Type  *DataType         `protobuf:"bytes,12,opt,name=output_Type,json=outputType,proto3" json:"output_Type,omitempty"`    // The output data type of an aggregate function
}

func (x *AggregateCall) Reset() {
	*x = AggregateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateCall) ProtoMessage() {}

func (x *AggregateCall) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateCall.ProtoReflect.Descriptor instead.
func (*AggregateCall) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{2}
}

func (x *AggregateCall) GetFunction() *ScalarExpression {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *AggregateCall) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

func (x *AggregateCall) GetStage() AggStage {
	if x != nil {
		return x.Stage
	}
	return AggStage_DUPLICATE
}

func (x *AggregateCall) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *AggregateCall) GetFilter() *Reference {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AggregateCall) GetOutputFields() []uint64 {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *AggregateCall) GetInitial_Type() *DataType {
	if x != nil {
		return x.Initial_Type
	}
	return nil
}

func (x *AggregateCall) GetPartial_Type() *DataType {
	if x != nil {
		return x.Partial_Type
	}
	return nil
}

func (x *AggregateCall) GetOutput_Type() *DataType {
	if x != nil {
		return x.Output_Type
	}
	return nil
}

type LogicalAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys           []*Reference     `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	AggregateCalls []*AggregateCall `protobuf:"bytes,2,rep,name=aggregate_calls,json=aggregateCalls,proto3" json:"aggregate_calls,omitempty"`
}

func (x *LogicalAggregate) Reset() {
	*x = LogicalAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalAggregate) ProtoMessage() {}

func (x *LogicalAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalAggregate.ProtoReflect.Descriptor instead.
func (*LogicalAggregate) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{3}
}

func (x *LogicalAggregate) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LogicalAggregate) GetAggregateCalls() []*AggregateCall {
	if x != nil {
		return x.AggregateCalls
	}
	return nil
}

type HashAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregate *LogicalAggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Stage     AggStage          `protobuf:"varint,2,opt,name=stage,proto3,enum=util.AggStage" json:"stage,omitempty"`
}

func (x *HashAggregate) Reset() {
	*x = HashAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashAggregate) ProtoMessage() {}

func (x *HashAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashAggregate.ProtoReflect.Descriptor instead.
func (*HashAggregate) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{4}
}

func (x *HashAggregate) GetAggregate() *LogicalAggregate {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

func (x *HashAggregate) GetStage() AggStage {
	if x != nil {
		return x.Stage
	}
	return AggStage_DUPLICATE
}

type SortedAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregate *LogicalAggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Stage     AggStage          `protobuf:"varint,2,opt,name=stage,proto3,enum=util.AggStage" json:"stage,omitempty"`
	Orders    []*OrderByDesc    `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *SortedAggregate) Reset() {
	*x = SortedAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortedAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortedAggregate) ProtoMessage() {}

func (x *SortedAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortedAggregate.ProtoReflect.Descriptor instead.
func (*SortedAggregate) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{5}
}

func (x *SortedAggregate) GetAggregate() *LogicalAggregate {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

func (x *SortedAggregate) GetStage() AggStage {
	if x != nil {
		return x.Stage
	}
	return AggStage_DUPLICATE
}

func (x *SortedAggregate) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

type AggregatePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregate *LogicalAggregate `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Stage     AggStage          `protobuf:"varint,2,opt,name=stage,proto3,enum=util.AggStage" json:"stage,omitempty"`
}

func (x *AggregatePhase) Reset() {
	*x = AggregatePhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatePhase) ProtoMessage() {}

func (x *AggregatePhase) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatePhase.ProtoReflect.Descriptor instead.
func (*AggregatePhase) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{6}
}

func (x *AggregatePhase) GetAggregate() *LogicalAggregate {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

func (x *AggregatePhase) GetStage() AggStage {
	if x != nil {
		return x.Stage
	}
	return AggStage_DUPLICATE
}

type DynamicFilterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             DynamicFilterType `protobuf:"varint,1,opt,name=type,proto3,enum=util.DynamicFilterType" json:"type,omitempty"`
	Consumer         bool              `protobuf:"varint,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Selectivity      float64           `protobuf:"fixed64,3,opt,name=selectivity,proto3" json:"selectivity,omitempty"`
	Probe            uint32            `protobuf:"varint,4,opt,name=probe,proto3" json:"probe,omitempty"`
	PartitionFilter  bool              `protobuf:"varint,5,opt,name=partition_filter,json=partitionFilter,proto3" json:"partition_filter,omitempty"`
	TableScanParents uint32            `protobuf:"varint,6,opt,name=table_scan_parents,json=tableScanParents,proto3" json:"table_scan_parents,omitempty"`
}

func (x *DynamicFilterInfo) Reset() {
	*x = DynamicFilterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFilterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFilterInfo) ProtoMessage() {}

func (x *DynamicFilterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFilterInfo.ProtoReflect.Descriptor instead.
func (*DynamicFilterInfo) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{7}
}

func (x *DynamicFilterInfo) GetType() DynamicFilterType {
	if x != nil {
		return x.Type
	}
	return DynamicFilterType_DF_NONE
}

func (x *DynamicFilterInfo) GetConsumer() bool {
	if x != nil {
		return x.Consumer
	}
	return false
}

func (x *DynamicFilterInfo) GetSelectivity() float64 {
	if x != nil {
		return x.Selectivity
	}
	return 0
}

func (x *DynamicFilterInfo) GetProbe() uint32 {
	if x != nil {
		return x.Probe
	}
	return 0
}

func (x *DynamicFilterInfo) GetPartitionFilter() bool {
	if x != nil {
		return x.PartitionFilter
	}
	return false
}

func (x *DynamicFilterInfo) GetTableScanParents() uint32 {
	if x != nil {
		return x.TableScanParents
	}
	return 0
}

type JoinHintInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HintBroadcastSide int32 `protobuf:"varint,1,opt,name=hintBroadcastSide,proto3" json:"hintBroadcastSide,omitempty"`
}

func (x *JoinHintInfo) Reset() {
	*x = JoinHintInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinHintInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinHintInfo) ProtoMessage() {}

func (x *JoinHintInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinHintInfo.ProtoReflect.Descriptor instead.
func (*JoinHintInfo) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{8}
}

func (x *JoinHintInfo) GetHintBroadcastSide() int32 {
	if x != nil {
		return x.HintBroadcastSide
	}
	return 0
}

type TreeJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootOperators []*Operator `protobuf:"bytes,1,rep,name=root_operators,json=rootOperators,proto3" json:"root_operators,omitempty"`
}

func (x *TreeJoin) Reset() {
	*x = TreeJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeJoin) ProtoMessage() {}

func (x *TreeJoin) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeJoin.ProtoReflect.Descriptor instead.
func (*TreeJoin) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{9}
}

func (x *TreeJoin) GetRootOperators() []*Operator {
	if x != nil {
		return x.RootOperators
	}
	return nil
}

type TreeJoinLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputIndex    int32 `protobuf:"varint,1,opt,name=input_index,json=inputIndex,proto3" json:"input_index,omitempty"`
	HintBroadcast bool  `protobuf:"varint,2,opt,name=hint_broadcast,json=hintBroadcast,proto3" json:"hint_broadcast,omitempty"`
}

func (x *TreeJoinLeaf) Reset() {
	*x = TreeJoinLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeJoinLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeJoinLeaf) ProtoMessage() {}

func (x *TreeJoinLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeJoinLeaf.ProtoReflect.Descriptor instead.
func (*TreeJoinLeaf) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{10}
}

func (x *TreeJoinLeaf) GetInputIndex() int32 {
	if x != nil {
		return x.InputIndex
	}
	return 0
}

func (x *TreeJoinLeaf) GetHintBroadcast() bool {
	if x != nil {
		return x.HintBroadcast
	}
	return false
}

type LogicalJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            JoinType           `protobuf:"varint,1,opt,name=type,proto3,enum=util.JoinType" json:"type,omitempty"`
	Condition       *ScalarExpression  `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	InputReferences []uint64           `protobuf:"varint,3,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
	DynamicFilter   *DynamicFilterInfo `protobuf:"bytes,4,opt,name=dynamic_filter,json=dynamicFilter,proto3" json:"dynamic_filter,omitempty"`
	HintInfo        *JoinHintInfo      `protobuf:"bytes,5,opt,name=hintInfo,proto3" json:"hintInfo,omitempty"`
}

func (x *LogicalJoin) Reset() {
	*x = LogicalJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalJoin) ProtoMessage() {}

func (x *LogicalJoin) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalJoin.ProtoReflect.Descriptor instead.
func (*LogicalJoin) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{11}
}

func (x *LogicalJoin) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_INNER
}

func (x *LogicalJoin) GetCondition() *ScalarExpression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *LogicalJoin) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

func (x *LogicalJoin) GetDynamicFilter() *DynamicFilterInfo {
	if x != nil {
		return x.DynamicFilter
	}
	return nil
}

func (x *LogicalJoin) GetHintInfo() *JoinHintInfo {
	if x != nil {
		return x.HintInfo
	}
	return nil
}

type SortMergeJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join      *LogicalJoin   `protobuf:"bytes,1,opt,name=join,proto3" json:"join,omitempty"`
	LhsOrders []*OrderByDesc `protobuf:"bytes,2,rep,name=lhs_orders,json=lhsOrders,proto3" json:"lhs_orders,omitempty"`
	RhsOrders []*OrderByDesc `protobuf:"bytes,3,rep,name=rhs_orders,json=rhsOrders,proto3" json:"rhs_orders,omitempty"`
}

func (x *SortMergeJoin) Reset() {
	*x = SortMergeJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortMergeJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMergeJoin) ProtoMessage() {}

func (x *SortMergeJoin) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMergeJoin.ProtoReflect.Descriptor instead.
func (*SortMergeJoin) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{12}
}

func (x *SortMergeJoin) GetJoin() *LogicalJoin {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *SortMergeJoin) GetLhsOrders() []*OrderByDesc {
	if x != nil {
		return x.LhsOrders
	}
	return nil
}

func (x *SortMergeJoin) GetRhsOrders() []*OrderByDesc {
	if x != nil {
		return x.RhsOrders
	}
	return nil
}

type HashJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join            *LogicalJoin `protobuf:"bytes,1,opt,name=join,proto3" json:"join,omitempty"`
	ProbeOperatorId string       `protobuf:"bytes,2,opt,name=probe_operator_id,json=probeOperatorId,proto3" json:"probe_operator_id,omitempty"`
	Broadcast       bool         `protobuf:"varint,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
}

func (x *HashJoin) Reset() {
	*x = HashJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashJoin) ProtoMessage() {}

func (x *HashJoin) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashJoin.ProtoReflect.Descriptor instead.
func (*HashJoin) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{13}
}

func (x *HashJoin) GetJoin() *LogicalJoin {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *HashJoin) GetProbeOperatorId() string {
	if x != nil {
		return x.ProbeOperatorId
	}
	return ""
}

func (x *HashJoin) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

type Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuNanos  uint64 `protobuf:"varint,1,opt,name=cpu_nanos,json=cpuNanos,proto3" json:"cpu_nanos,omitempty"`
	WallNanos uint64 `protobuf:"varint,2,opt,name=wall_nanos,json=wallNanos,proto3" json:"wall_nanos,omitempty"`
}

func (x *Timing) Reset() {
	*x = Timing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{14}
}

func (x *Timing) GetCpuNanos() uint64 {
	if x != nil {
		return x.CpuNanos
	}
	return 0
}

func (x *Timing) GetWallNanos() uint64 {
	if x != nil {
		return x.WallNanos
	}
	return 0
}

type OperatorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId string  `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	RowCount   uint64  `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	Timing     *Timing `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to OpStats:
	//
	//	*OperatorStats_TableScanStats
	//	*OperatorStats_TableSinkStats
	//	*OperatorStats_CalcStats
	//	*OperatorStats_HashJoinStats
	//	*OperatorStats_MergeJoinStats
	//	*OperatorStats_HashAggregateStats
	//	*OperatorStats_MergeAggregateStats
	//	*OperatorStats_LocalSortStats
	//	*OperatorStats_MergeSortStats
	//	*OperatorStats_ValuesStats
	//	*OperatorStats_ExchangeSinkStats
	//	*OperatorStats_ExchangeSourceStats
	//	*OperatorStats_UnionAllStats
	//	*OperatorStats_BufferStats
	//	*OperatorStats_WindowStats
	//	*OperatorStats_ExpandStats
	//	*OperatorStats_LateralViewStats
	//	*OperatorStats_PartialWindowStats
	OpStats          isOperatorStats_OpStats `protobuf_oneof:"op_stats"`
	InitTiming       *Timing                 `protobuf:"bytes,100,opt,name=init_timing,json=initTiming,proto3" json:"init_timing,omitempty"`
	BatchCount       uint64                  `protobuf:"varint,101,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
	PeakMemory       uint64                  `protobuf:"varint,102,opt,name=peak_memory,json=peakMemory,proto3" json:"peak_memory,omitempty"`
	StartTimeNanos   uint64                  `protobuf:"varint,103,opt,name=start_time_nanos,json=startTimeNanos,proto3" json:"start_time_nanos,omitempty"`
	EndTimeNanos     uint64                  `protobuf:"varint,104,opt,name=end_time_nanos,json=endTimeNanos,proto3" json:"end_time_nanos,omitempty"`
	BatchSignature   uint64                  `protobuf:"varint,105,opt,name=batch_signature,json=batchSignature,proto3" json:"batch_signature,omitempty"`
	ExecNodeId       string                  `protobuf:"bytes,106,opt,name=exec_node_id,json=execNodeId,proto3" json:"exec_node_id,omitempty"`
	PipelineId       uint64                  `protobuf:"varint,107,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	DriverSequence   uint64                  `protobuf:"varint,108,opt,name=driver_sequence,json=driverSequence,proto3" json:"driver_sequence,omitempty"`
	BlockTimingNanos uint64                  `protobuf:"varint,109,opt,name=block_timing_nanos,json=blockTimingNanos,proto3" json:"block_timing_nanos,omitempty"`
	ExtraStatsBinary []byte                  `protobuf:"bytes,254,opt,name=extra_stats_binary,json=extraStatsBinary,proto3" json:"extra_stats_binary,omitempty"`
	// deperated
	ExtraStats string `protobuf:"bytes,255,opt,name=extra_stats,json=extraStats,proto3" json:"extra_stats,omitempty"`
}

func (x *OperatorStats) Reset() {
	*x = OperatorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorStats) ProtoMessage() {}

func (x *OperatorStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorStats.ProtoReflect.Descriptor instead.
func (*OperatorStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{15}
}

func (x *OperatorStats) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *OperatorStats) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *OperatorStats) GetTiming() *Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *OperatorStats) GetOpStats() isOperatorStats_OpStats {
	if m != nil {
		return m.OpStats
	}
	return nil
}

func (x *OperatorStats) GetTableScanStats() *TableScanStats {
	if x, ok := x.GetOpStats().(*OperatorStats_TableScanStats); ok {
		return x.TableScanStats
	}
	return nil
}

func (x *OperatorStats) GetTableSinkStats() *TableSinkStats {
	if x, ok := x.GetOpStats().(*OperatorStats_TableSinkStats); ok {
		return x.TableSinkStats
	}
	return nil
}

func (x *OperatorStats) GetCalcStats() *CalcStats {
	if x, ok := x.GetOpStats().(*OperatorStats_CalcStats); ok {
		return x.CalcStats
	}
	return nil
}

func (x *OperatorStats) GetHashJoinStats() *HashJoinStats {
	if x, ok := x.GetOpStats().(*OperatorStats_HashJoinStats); ok {
		return x.HashJoinStats
	}
	return nil
}

func (x *OperatorStats) GetMergeJoinStats() *MergeJoinStats {
	if x, ok := x.GetOpStats().(*OperatorStats_MergeJoinStats); ok {
		return x.MergeJoinStats
	}
	return nil
}

func (x *OperatorStats) GetHashAggregateStats() *HashAggregateStats {
	if x, ok := x.GetOpStats().(*OperatorStats_HashAggregateStats); ok {
		return x.HashAggregateStats
	}
	return nil
}

func (x *OperatorStats) GetMergeAggregateStats() *MergeAggregateStats {
	if x, ok := x.GetOpStats().(*OperatorStats_MergeAggregateStats); ok {
		return x.MergeAggregateStats
	}
	return nil
}

func (x *OperatorStats) GetLocalSortStats() *LocalSortStats {
	if x, ok := x.GetOpStats().(*OperatorStats_LocalSortStats); ok {
		return x.LocalSortStats
	}
	return nil
}

func (x *OperatorStats) GetMergeSortStats() *MergeSortStats {
	if x, ok := x.GetOpStats().(*OperatorStats_MergeSortStats); ok {
		return x.MergeSortStats
	}
	return nil
}

func (x *OperatorStats) GetValuesStats() *ValuesStats {
	if x, ok := x.GetOpStats().(*OperatorStats_ValuesStats); ok {
		return x.ValuesStats
	}
	return nil
}

func (x *OperatorStats) GetExchangeSinkStats() *ExchangeSinkStats {
	if x, ok := x.GetOpStats().(*OperatorStats_ExchangeSinkStats); ok {
		return x.ExchangeSinkStats
	}
	return nil
}

func (x *OperatorStats) GetExchangeSourceStats() *ExchangeSourceStats {
	if x, ok := x.GetOpStats().(*OperatorStats_ExchangeSourceStats); ok {
		return x.ExchangeSourceStats
	}
	return nil
}

func (x *OperatorStats) GetUnionAllStats() *UnionAllStats {
	if x, ok := x.GetOpStats().(*OperatorStats_UnionAllStats); ok {
		return x.UnionAllStats
	}
	return nil
}

func (x *OperatorStats) GetBufferStats() *BufferStats {
	if x, ok := x.GetOpStats().(*OperatorStats_BufferStats); ok {
		return x.BufferStats
	}
	return nil
}

func (x *OperatorStats) GetWindowStats() *WindowStats {
	if x, ok := x.GetOpStats().(*OperatorStats_WindowStats); ok {
		return x.WindowStats
	}
	return nil
}

func (x *OperatorStats) GetExpandStats() *ExpandStats {
	if x, ok := x.GetOpStats().(*OperatorStats_ExpandStats); ok {
		return x.ExpandStats
	}
	return nil
}

func (x *OperatorStats) GetLateralViewStats() *LateralViewStats {
	if x, ok := x.GetOpStats().(*OperatorStats_LateralViewStats); ok {
		return x.LateralViewStats
	}
	return nil
}

func (x *OperatorStats) GetPartialWindowStats() *PartialWindowStats {
	if x, ok := x.GetOpStats().(*OperatorStats_PartialWindowStats); ok {
		return x.PartialWindowStats
	}
	return nil
}

func (x *OperatorStats) GetInitTiming() *Timing {
	if x != nil {
		return x.InitTiming
	}
	return nil
}

func (x *OperatorStats) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

func (x *OperatorStats) GetPeakMemory() uint64 {
	if x != nil {
		return x.PeakMemory
	}
	return 0
}

func (x *OperatorStats) GetStartTimeNanos() uint64 {
	if x != nil {
		return x.StartTimeNanos
	}
	return 0
}

func (x *OperatorStats) GetEndTimeNanos() uint64 {
	if x != nil {
		return x.EndTimeNanos
	}
	return 0
}

func (x *OperatorStats) GetBatchSignature() uint64 {
	if x != nil {
		return x.BatchSignature
	}
	return 0
}

func (x *OperatorStats) GetExecNodeId() string {
	if x != nil {
		return x.ExecNodeId
	}
	return ""
}

func (x *OperatorStats) GetPipelineId() uint64 {
	if x != nil {
		return x.PipelineId
	}
	return 0
}

func (x *OperatorStats) GetDriverSequence() uint64 {
	if x != nil {
		return x.DriverSequence
	}
	return 0
}

func (x *OperatorStats) GetBlockTimingNanos() uint64 {
	if x != nil {
		return x.BlockTimingNanos
	}
	return 0
}

func (x *OperatorStats) GetExtraStatsBinary() []byte {
	if x != nil {
		return x.ExtraStatsBinary
	}
	return nil
}

func (x *OperatorStats) GetExtraStats() string {
	if x != nil {
		return x.ExtraStats
	}
	return ""
}

type isOperatorStats_OpStats interface {
	isOperatorStats_OpStats()
}

type OperatorStats_TableScanStats struct {
	TableScanStats *TableScanStats `protobuf:"bytes,4,opt,name=table_scan_stats,json=tableScanStats,proto3,oneof"`
}

type OperatorStats_TableSinkStats struct {
	TableSinkStats *TableSinkStats `protobuf:"bytes,5,opt,name=table_sink_stats,json=tableSinkStats,proto3,oneof"`
}

type OperatorStats_CalcStats struct {
	CalcStats *CalcStats `protobuf:"bytes,6,opt,name=calc_stats,json=calcStats,proto3,oneof"`
}

type OperatorStats_HashJoinStats struct {
	HashJoinStats *HashJoinStats `protobuf:"bytes,7,opt,name=hash_join_stats,json=hashJoinStats,proto3,oneof"`
}

type OperatorStats_MergeJoinStats struct {
	MergeJoinStats *MergeJoinStats `protobuf:"bytes,8,opt,name=merge_join_stats,json=mergeJoinStats,proto3,oneof"`
}

type OperatorStats_HashAggregateStats struct {
	HashAggregateStats *HashAggregateStats `protobuf:"bytes,9,opt,name=hash_aggregate_stats,json=hashAggregateStats,proto3,oneof"`
}

type OperatorStats_MergeAggregateStats struct {
	MergeAggregateStats *MergeAggregateStats `protobuf:"bytes,10,opt,name=merge_aggregate_stats,json=mergeAggregateStats,proto3,oneof"`
}

type OperatorStats_LocalSortStats struct {
	LocalSortStats *LocalSortStats `protobuf:"bytes,11,opt,name=local_sort_stats,json=localSortStats,proto3,oneof"`
}

type OperatorStats_MergeSortStats struct {
	MergeSortStats *MergeSortStats `protobuf:"bytes,12,opt,name=merge_sort_stats,json=mergeSortStats,proto3,oneof"`
}

type OperatorStats_ValuesStats struct {
	ValuesStats *ValuesStats `protobuf:"bytes,13,opt,name=values_stats,json=valuesStats,proto3,oneof"`
}

type OperatorStats_ExchangeSinkStats struct {
	ExchangeSinkStats *ExchangeSinkStats `protobuf:"bytes,14,opt,name=exchange_sink_stats,json=exchangeSinkStats,proto3,oneof"`
}

type OperatorStats_ExchangeSourceStats struct {
	ExchangeSourceStats *ExchangeSourceStats `protobuf:"bytes,15,opt,name=exchange_source_stats,json=exchangeSourceStats,proto3,oneof"`
}

type OperatorStats_UnionAllStats struct {
	UnionAllStats *UnionAllStats `protobuf:"bytes,16,opt,name=union_all_stats,json=unionAllStats,proto3,oneof"`
}

type OperatorStats_BufferStats struct {
	BufferStats *BufferStats `protobuf:"bytes,17,opt,name=buffer_stats,json=bufferStats,proto3,oneof"`
}

type OperatorStats_WindowStats struct {
	WindowStats *WindowStats `protobuf:"bytes,18,opt,name=window_stats,json=windowStats,proto3,oneof"`
}

type OperatorStats_ExpandStats struct {
	ExpandStats *ExpandStats `protobuf:"bytes,19,opt,name=expand_stats,json=expandStats,proto3,oneof"`
}

type OperatorStats_LateralViewStats struct {
	LateralViewStats *LateralViewStats `protobuf:"bytes,20,opt,name=lateral_view_stats,json=lateralViewStats,proto3,oneof"`
}

type OperatorStats_PartialWindowStats struct {
	PartialWindowStats *PartialWindowStats `protobuf:"bytes,21,opt,name=partial_window_stats,json=partialWindowStats,proto3,oneof"`
}

func (*OperatorStats_TableScanStats) isOperatorStats_OpStats() {}

func (*OperatorStats_TableSinkStats) isOperatorStats_OpStats() {}

func (*OperatorStats_CalcStats) isOperatorStats_OpStats() {}

func (*OperatorStats_HashJoinStats) isOperatorStats_OpStats() {}

func (*OperatorStats_MergeJoinStats) isOperatorStats_OpStats() {}

func (*OperatorStats_HashAggregateStats) isOperatorStats_OpStats() {}

func (*OperatorStats_MergeAggregateStats) isOperatorStats_OpStats() {}

func (*OperatorStats_LocalSortStats) isOperatorStats_OpStats() {}

func (*OperatorStats_MergeSortStats) isOperatorStats_OpStats() {}

func (*OperatorStats_ValuesStats) isOperatorStats_OpStats() {}

func (*OperatorStats_ExchangeSinkStats) isOperatorStats_OpStats() {}

func (*OperatorStats_ExchangeSourceStats) isOperatorStats_OpStats() {}

func (*OperatorStats_UnionAllStats) isOperatorStats_OpStats() {}

func (*OperatorStats_BufferStats) isOperatorStats_OpStats() {}

func (*OperatorStats_WindowStats) isOperatorStats_OpStats() {}

func (*OperatorStats_ExpandStats) isOperatorStats_OpStats() {}

func (*OperatorStats_LateralViewStats) isOperatorStats_OpStats() {}

func (*OperatorStats_PartialWindowStats) isOperatorStats_OpStats() {}

type OrderByDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Order     Order      `protobuf:"varint,2,opt,name=order,proto3,enum=util.Order" json:"order,omitempty"`
}

func (x *OrderByDesc) Reset() {
	*x = OrderByDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByDesc) ProtoMessage() {}

func (x *OrderByDesc) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByDesc.ProtoReflect.Descriptor instead.
func (*OrderByDesc) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{16}
}

func (x *OrderByDesc) GetReference() *Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *OrderByDesc) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ASC
}

type MergeSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders          []*OrderByDesc `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	InputReferences []uint64       `protobuf:"varint,2,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
}

func (x *MergeSort) Reset() {
	*x = MergeSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSort) ProtoMessage() {}

func (x *MergeSort) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSort.ProtoReflect.Descriptor instead.
func (*MergeSort) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{17}
}

func (x *MergeSort) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *MergeSort) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

type UnionAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputReferences []uint64 `protobuf:"varint,1,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
}

func (x *UnionAll) Reset() {
	*x = UnionAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionAll) ProtoMessage() {}

func (x *UnionAll) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionAll.ProtoReflect.Descriptor instead.
func (*UnionAll) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{18}
}

func (x *UnionAll) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

type Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shared bool `protobuf:"varint,1,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *Buffer) Reset() {
	*x = Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffer) ProtoMessage() {}

func (x *Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffer.ProtoReflect.Descriptor instead.
func (*Buffer) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{19}
}

func (x *Buffer) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type PartialWindowFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function *ScalarExpression `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Spec     *WindowSpec       `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Limit    uint64            `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PartialWindowFilter) Reset() {
	*x = PartialWindowFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialWindowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialWindowFilter) ProtoMessage() {}

func (x *PartialWindowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialWindowFilter.ProtoReflect.Descriptor instead.
func (*PartialWindowFilter) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{20}
}

func (x *PartialWindowFilter) GetFunction() *ScalarExpression {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *PartialWindowFilter) GetSpec() *WindowSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PartialWindowFilter) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups          []*WindowGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	InputReferences []uint64       `protobuf:"varint,2,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{21}
}

func (x *Window) GetGroups() []*WindowGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Window) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

type WindowGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions []*WindowCall `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
	Spec      *WindowSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *WindowGroup) Reset() {
	*x = WindowGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowGroup) ProtoMessage() {}

func (x *WindowGroup) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowGroup.ProtoReflect.Descriptor instead.
func (*WindowGroup) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{22}
}

func (x *WindowGroup) GetFunctions() []*WindowCall {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *WindowGroup) GetSpec() *WindowSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type WindowCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function    *ScalarExpression `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Distinct    bool              `protobuf:"varint,2,opt,name=distinct,proto3" json:"distinct,omitempty"`
	PartialType *DataType         `protobuf:"bytes,3,opt,name=partial_type,json=partialType,proto3" json:"partial_type,omitempty"`
}

func (x *WindowCall) Reset() {
	*x = WindowCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowCall) ProtoMessage() {}

func (x *WindowCall) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowCall.ProtoReflect.Descriptor instead.
func (*WindowCall) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{23}
}

func (x *WindowCall) GetFunction() *ScalarExpression {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *WindowCall) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

func (x *WindowCall) GetPartialType() *DataType {
	if x != nil {
		return x.PartialType
	}
	return nil
}

type WindowSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys         []*Reference            `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Orders       []*OrderByDesc          `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	BoundaryType WindowSpec_BoundaryType `protobuf:"varint,3,opt,name=boundary_type,json=boundaryType,proto3,enum=util.WindowSpec_BoundaryType" json:"boundary_type,omitempty"`
	LowerBound   *WindowBoundary         `protobuf:"bytes,4,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound   *WindowBoundary         `protobuf:"bytes,5,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *WindowSpec) Reset() {
	*x = WindowSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowSpec) ProtoMessage() {}

func (x *WindowSpec) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowSpec.ProtoReflect.Descriptor instead.
func (*WindowSpec) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{24}
}

func (x *WindowSpec) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WindowSpec) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *WindowSpec) GetBoundaryType() WindowSpec_BoundaryType {
	if x != nil {
		return x.BoundaryType
	}
	return WindowSpec_ROWS
}

func (x *WindowSpec) GetLowerBound() *WindowBoundary {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *WindowSpec) GetUpperBound() *WindowBoundary {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type WindowBoundary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preceding *bool     `protobuf:"varint,1,opt,name=preceding,proto3,oneof" json:"preceding,omitempty"`
	Offset    *Constant `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *WindowBoundary) Reset() {
	*x = WindowBoundary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowBoundary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowBoundary) ProtoMessage() {}

func (x *WindowBoundary) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowBoundary.ProtoReflect.Descriptor instead.
func (*WindowBoundary) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{25}
}

func (x *WindowBoundary) GetPreceding() bool {
	if x != nil && x.Preceding != nil {
		return *x.Preceding
	}
	return false
}

func (x *WindowBoundary) GetOffset() *Constant {
	if x != nil {
		return x.Offset
	}
	return nil
}

type LateralView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions       []*TableFunctionCall `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
	InputReferences []uint64             `protobuf:"varint,2,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
}

func (x *LateralView) Reset() {
	*x = LateralView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LateralView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LateralView) ProtoMessage() {}

func (x *LateralView) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LateralView.ProtoReflect.Descriptor instead.
func (*LateralView) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{26}
}

func (x *LateralView) GetFunctions() []*TableFunctionCall {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *LateralView) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

type TableFunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function   *ScalarExpression `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Outer      bool              `protobuf:"varint,2,opt,name=outer,proto3" json:"outer,omitempty"`
	UsedFields []uint64          `protobuf:"varint,3,rep,packed,name=used_fields,json=usedFields,proto3" json:"used_fields,omitempty"`
}

func (x *TableFunctionCall) Reset() {
	*x = TableFunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunctionCall) ProtoMessage() {}

func (x *TableFunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunctionCall.ProtoReflect.Descriptor instead.
func (*TableFunctionCall) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{27}
}

func (x *TableFunctionCall) GetFunction() *ScalarExpression {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *TableFunctionCall) GetOuter() bool {
	if x != nil {
		return x.Outer
	}
	return false
}

func (x *TableFunctionCall) GetUsedFields() []uint64 {
	if x != nil {
		return x.UsedFields
	}
	return nil
}

type Spool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpoolId uint64 `protobuf:"varint,1,opt,name=spool_id,json=spoolId,proto3" json:"spool_id,omitempty"`
}

func (x *Spool) Reset() {
	*x = Spool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spool) ProtoMessage() {}

func (x *Spool) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spool.ProtoReflect.Descriptor instead.
func (*Spool) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{28}
}

func (x *Spool) GetSpoolId() uint64 {
	if x != nil {
		return x.SpoolId
	}
	return 0
}

type Calc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*ScalarExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// Types that are assignable to OptionalFilter:
	//
	//	*Calc_NoFilter
	//	*Calc_Filter
	OptionalFilter                 isCalc_OptionalFilter `protobuf_oneof:"optional_filter"`
	Projects                       []uint64              `protobuf:"varint,4,rep,packed,name=projects,proto3" json:"projects,omitempty"`
	Lazy                           []LazyEval            `protobuf:"varint,5,rep,packed,name=lazy,proto3,enum=util.LazyEval" json:"lazy,omitempty"`
	PartialWindowFilterSelectivity *float64              `protobuf:"fixed64,6,opt,name=partial_window_filter_selectivity,json=partialWindowFilterSelectivity,proto3,oneof" json:"partial_window_filter_selectivity,omitempty"`
}

func (x *Calc) Reset() {
	*x = Calc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calc) ProtoMessage() {}

func (x *Calc) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calc.ProtoReflect.Descriptor instead.
func (*Calc) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{29}
}

func (x *Calc) GetExpressions() []*ScalarExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (m *Calc) GetOptionalFilter() isCalc_OptionalFilter {
	if m != nil {
		return m.OptionalFilter
	}
	return nil
}

func (x *Calc) GetNoFilter() bool {
	if x, ok := x.GetOptionalFilter().(*Calc_NoFilter); ok {
		return x.NoFilter
	}
	return false
}

func (x *Calc) GetFilter() uint64 {
	if x, ok := x.GetOptionalFilter().(*Calc_Filter); ok {
		return x.Filter
	}
	return 0
}

func (x *Calc) GetProjects() []uint64 {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Calc) GetLazy() []LazyEval {
	if x != nil {
		return x.Lazy
	}
	return nil
}

func (x *Calc) GetPartialWindowFilterSelectivity() float64 {
	if x != nil && x.PartialWindowFilterSelectivity != nil {
		return *x.PartialWindowFilterSelectivity
	}
	return 0
}

type isCalc_OptionalFilter interface {
	isCalc_OptionalFilter()
}

type Calc_NoFilter struct {
	NoFilter bool `protobuf:"varint,2,opt,name=no_filter,json=noFilter,proto3,oneof"`
}

type Calc_Filter struct {
	Filter uint64 `protobuf:"varint,3,opt,name=filter,proto3,oneof"`
}

func (*Calc_NoFilter) isCalc_OptionalFilter() {}

func (*Calc_Filter) isCalc_OptionalFilter() {}

type LogicalCalc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition                      *ScalarExpression   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Projects                       []*ScalarExpression `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	PartialWindowFilterSelectivity *float64            `protobuf:"fixed64,3,opt,name=partial_window_filter_selectivity,json=partialWindowFilterSelectivity,proto3,oneof" json:"partial_window_filter_selectivity,omitempty"`
}

func (x *LogicalCalc) Reset() {
	*x = LogicalCalc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalCalc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalCalc) ProtoMessage() {}

func (x *LogicalCalc) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalCalc.ProtoReflect.Descriptor instead.
func (*LogicalCalc) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{30}
}

func (x *LogicalCalc) GetCondition() *ScalarExpression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *LogicalCalc) GetProjects() []*ScalarExpression {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *LogicalCalc) GetPartialWindowFilterSelectivity() float64 {
	if x != nil && x.PartialWindowFilterSelectivity != nil {
		return *x.PartialWindowFilterSelectivity
	}
	return 0
}

type Expand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*ScalarExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *Expand) Reset() {
	*x = Expand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expand) ProtoMessage() {}

func (x *Expand) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expand.ProtoReflect.Descriptor instead.
func (*Expand) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{31}
}

func (x *Expand) GetExpressions() []*ScalarExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type GroupingKeySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*Reference `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GroupingKeySet) Reset() {
	*x = GroupingKeySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupingKeySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupingKeySet) ProtoMessage() {}

func (x *GroupingKeySet) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupingKeySet.ProtoReflect.Descriptor instead.
func (*GroupingKeySet) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{32}
}

func (x *GroupingKeySet) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys                []*Reference      `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	KeySets             []*GroupingKeySet `protobuf:"bytes,2,rep,name=keySets,proto3" json:"keySets,omitempty"`
	AggregateCalls      []*AggregateCall  `protobuf:"bytes,3,rep,name=aggregate_calls,json=aggregateCalls,proto3" json:"aggregate_calls,omitempty"`
	GroupingIdStartFrom uint64            `protobuf:"varint,4,opt,name=grouping_id_start_from,json=groupingIdStartFrom,proto3" json:"grouping_id_start_from,omitempty"`
	GroupingIdColOffset *uint64           `protobuf:"varint,5,opt,name=grouping_id_col_offset,json=groupingIdColOffset,proto3,oneof" json:"grouping_id_col_offset,omitempty"`
}

func (x *Grouping) Reset() {
	*x = Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grouping) ProtoMessage() {}

func (x *Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grouping.ProtoReflect.Descriptor instead.
func (*Grouping) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{33}
}

func (x *Grouping) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Grouping) GetKeySets() []*GroupingKeySet {
	if x != nil {
		return x.KeySets
	}
	return nil
}

func (x *Grouping) GetAggregateCalls() []*AggregateCall {
	if x != nil {
		return x.AggregateCalls
	}
	return nil
}

func (x *Grouping) GetGroupingIdStartFrom() uint64 {
	if x != nil {
		return x.GroupingIdStartFrom
	}
	return 0
}

func (x *Grouping) GetGroupingIdColOffset() uint64 {
	if x != nil && x.GroupingIdColOffset != nil {
		return *x.GroupingIdColOffset
	}
	return 0
}

type CalcStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CalcStats) Reset() {
	*x = CalcStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalcStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcStats) ProtoMessage() {}

func (x *CalcStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcStats.ProtoReflect.Descriptor instead.
func (*CalcStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{34}
}

type HashTableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBuckets    uint64 `protobuf:"varint,1,opt,name=num_buckets,json=numBuckets,proto3" json:"num_buckets,omitempty"`
	NumKeys       uint64 `protobuf:"varint,2,opt,name=num_keys,json=numKeys,proto3" json:"num_keys,omitempty"`
	NumResize     uint64 `protobuf:"varint,3,opt,name=num_resize,json=numResize,proto3" json:"num_resize,omitempty"`
	NumAccesses   uint64 `protobuf:"varint,4,opt,name=num_accesses,json=numAccesses,proto3" json:"num_accesses,omitempty"`
	NumCollisions uint64 `protobuf:"varint,5,opt,name=num_collisions,json=numCollisions,proto3" json:"num_collisions,omitempty"`
	UsedMemory    uint64 `protobuf:"varint,6,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
}

func (x *HashTableStats) Reset() {
	*x = HashTableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashTableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashTableStats) ProtoMessage() {}

func (x *HashTableStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashTableStats.ProtoReflect.Descriptor instead.
func (*HashTableStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{35}
}

func (x *HashTableStats) GetNumBuckets() uint64 {
	if x != nil {
		return x.NumBuckets
	}
	return 0
}

func (x *HashTableStats) GetNumKeys() uint64 {
	if x != nil {
		return x.NumKeys
	}
	return 0
}

func (x *HashTableStats) GetNumResize() uint64 {
	if x != nil {
		return x.NumResize
	}
	return 0
}

func (x *HashTableStats) GetNumAccesses() uint64 {
	if x != nil {
		return x.NumAccesses
	}
	return 0
}

func (x *HashTableStats) GetNumCollisions() uint64 {
	if x != nil {
		return x.NumCollisions
	}
	return 0
}

func (x *HashTableStats) GetUsedMemory() uint64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

type HashJoinStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildTiming               *Timing         `protobuf:"bytes,1,opt,name=build_timing,json=buildTiming,proto3" json:"build_timing,omitempty"`
	FinishBuildTiming         *Timing         `protobuf:"bytes,2,opt,name=finish_build_timing,json=finishBuildTiming,proto3" json:"finish_build_timing,omitempty"`
	ProbeTiming               *Timing         `protobuf:"bytes,3,opt,name=probe_timing,json=probeTiming,proto3" json:"probe_timing,omitempty"`
	PostProbeTiming           *Timing         `protobuf:"bytes,4,opt,name=post_probe_timing,json=postProbeTiming,proto3" json:"post_probe_timing,omitempty"`
	HtStats                   *HashTableStats `protobuf:"bytes,5,opt,name=ht_stats,json=htStats,proto3" json:"ht_stats,omitempty"`
	NumBuildRows              uint64          `protobuf:"varint,6,opt,name=num_build_rows,json=numBuildRows,proto3" json:"num_build_rows,omitempty"`
	NumDistinctBuildRows      uint64          `protobuf:"varint,7,opt,name=num_distinct_build_rows,json=numDistinctBuildRows,proto3" json:"num_distinct_build_rows,omitempty"`
	MaxEqualBuildRows         uint64          `protobuf:"varint,8,opt,name=max_equal_build_rows,json=maxEqualBuildRows,proto3" json:"max_equal_build_rows,omitempty"`
	BuildSpillStats           *SpillStats     `protobuf:"bytes,9,opt,name=build_spill_stats,json=buildSpillStats,proto3" json:"build_spill_stats,omitempty"`
	ProbeSpillStats           *SpillStats     `protobuf:"bytes,10,opt,name=probe_spill_stats,json=probeSpillStats,proto3" json:"probe_spill_stats,omitempty"`
	ProbeFindHtTiming         *Timing         `protobuf:"bytes,11,opt,name=probe_find_ht_timing,json=probeFindHtTiming,proto3" json:"probe_find_ht_timing,omitempty"`
	ProbeOutputTiming         *Timing         `protobuf:"bytes,12,opt,name=probe_output_timing,json=probeOutputTiming,proto3" json:"probe_output_timing,omitempty"`
	ProbeEvalConjunctTiming   *Timing         `protobuf:"bytes,13,opt,name=probe_eval_conjunct_timing,json=probeEvalConjunctTiming,proto3" json:"probe_eval_conjunct_timing,omitempty"`
	ProbeOutputConjunctTiming *Timing         `protobuf:"bytes,14,opt,name=probe_output_conjunct_timing,json=probeOutputConjunctTiming,proto3" json:"probe_output_conjunct_timing,omitempty"`
}

func (x *HashJoinStats) Reset() {
	*x = HashJoinStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashJoinStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashJoinStats) ProtoMessage() {}

func (x *HashJoinStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashJoinStats.ProtoReflect.Descriptor instead.
func (*HashJoinStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{36}
}

func (x *HashJoinStats) GetBuildTiming() *Timing {
	if x != nil {
		return x.BuildTiming
	}
	return nil
}

func (x *HashJoinStats) GetFinishBuildTiming() *Timing {
	if x != nil {
		return x.FinishBuildTiming
	}
	return nil
}

func (x *HashJoinStats) GetProbeTiming() *Timing {
	if x != nil {
		return x.ProbeTiming
	}
	return nil
}

func (x *HashJoinStats) GetPostProbeTiming() *Timing {
	if x != nil {
		return x.PostProbeTiming
	}
	return nil
}

func (x *HashJoinStats) GetHtStats() *HashTableStats {
	if x != nil {
		return x.HtStats
	}
	return nil
}

func (x *HashJoinStats) GetNumBuildRows() uint64 {
	if x != nil {
		return x.NumBuildRows
	}
	return 0
}

func (x *HashJoinStats) GetNumDistinctBuildRows() uint64 {
	if x != nil {
		return x.NumDistinctBuildRows
	}
	return 0
}

func (x *HashJoinStats) GetMaxEqualBuildRows() uint64 {
	if x != nil {
		return x.MaxEqualBuildRows
	}
	return 0
}

func (x *HashJoinStats) GetBuildSpillStats() *SpillStats {
	if x != nil {
		return x.BuildSpillStats
	}
	return nil
}

func (x *HashJoinStats) GetProbeSpillStats() *SpillStats {
	if x != nil {
		return x.ProbeSpillStats
	}
	return nil
}

func (x *HashJoinStats) GetProbeFindHtTiming() *Timing {
	if x != nil {
		return x.ProbeFindHtTiming
	}
	return nil
}

func (x *HashJoinStats) GetProbeOutputTiming() *Timing {
	if x != nil {
		return x.ProbeOutputTiming
	}
	return nil
}

func (x *HashJoinStats) GetProbeEvalConjunctTiming() *Timing {
	if x != nil {
		return x.ProbeEvalConjunctTiming
	}
	return nil
}

func (x *HashJoinStats) GetProbeOutputConjunctTiming() *Timing {
	if x != nil {
		return x.ProbeOutputConjunctTiming
	}
	return nil
}

type MergeJoinStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergeJoinStats) Reset() {
	*x = MergeJoinStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeJoinStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeJoinStats) ProtoMessage() {}

func (x *MergeJoinStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeJoinStats.ProtoReflect.Descriptor instead.
func (*MergeJoinStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{37}
}

type HashAggregateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignStatesTiming   *Timing         `protobuf:"bytes,1,opt,name=assign_states_timing,json=assignStatesTiming,proto3" json:"assign_states_timing,omitempty"`
	UpdateStatesTiming   *Timing         `protobuf:"bytes,2,opt,name=update_states_timing,json=updateStatesTiming,proto3" json:"update_states_timing,omitempty"`
	OutputTiming         *Timing         `protobuf:"bytes,3,opt,name=output_timing,json=outputTiming,proto3" json:"output_timing,omitempty"`
	HtStats              *HashTableStats `protobuf:"bytes,4,opt,name=ht_stats,json=htStats,proto3" json:"ht_stats,omitempty"`
	StatesUsedMemory     uint64          `protobuf:"varint,5,opt,name=states_used_memory,json=statesUsedMemory,proto3" json:"states_used_memory,omitempty"`
	PassThroughRows      uint64          `protobuf:"varint,6,opt,name=pass_through_rows,json=passThroughRows,proto3" json:"pass_through_rows,omitempty"`
	InputSpillStats      *SpillStats     `protobuf:"bytes,7,opt,name=input_spill_stats,json=inputSpillStats,proto3" json:"input_spill_stats,omitempty"`
	AggregatedSpillStats *SpillStats     `protobuf:"bytes,8,opt,name=aggregated_spill_stats,json=aggregatedSpillStats,proto3" json:"aggregated_spill_stats,omitempty"`
}

func (x *HashAggregateStats) Reset() {
	*x = HashAggregateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashAggregateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashAggregateStats) ProtoMessage() {}

func (x *HashAggregateStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashAggregateStats.ProtoReflect.Descriptor instead.
func (*HashAggregateStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{38}
}

func (x *HashAggregateStats) GetAssignStatesTiming() *Timing {
	if x != nil {
		return x.AssignStatesTiming
	}
	return nil
}

func (x *HashAggregateStats) GetUpdateStatesTiming() *Timing {
	if x != nil {
		return x.UpdateStatesTiming
	}
	return nil
}

func (x *HashAggregateStats) GetOutputTiming() *Timing {
	if x != nil {
		return x.OutputTiming
	}
	return nil
}

func (x *HashAggregateStats) GetHtStats() *HashTableStats {
	if x != nil {
		return x.HtStats
	}
	return nil
}

func (x *HashAggregateStats) GetStatesUsedMemory() uint64 {
	if x != nil {
		return x.StatesUsedMemory
	}
	return 0
}

func (x *HashAggregateStats) GetPassThroughRows() uint64 {
	if x != nil {
		return x.PassThroughRows
	}
	return 0
}

func (x *HashAggregateStats) GetInputSpillStats() *SpillStats {
	if x != nil {
		return x.InputSpillStats
	}
	return nil
}

func (x *HashAggregateStats) GetAggregatedSpillStats() *SpillStats {
	if x != nil {
		return x.AggregatedSpillStats
	}
	return nil
}

type MergeAggregateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignStatesTiming *Timing `protobuf:"bytes,1,opt,name=assign_states_timing,json=assignStatesTiming,proto3" json:"assign_states_timing,omitempty"`
	UpdateStatesTiming *Timing `protobuf:"bytes,2,opt,name=update_states_timing,json=updateStatesTiming,proto3" json:"update_states_timing,omitempty"`
	OutputTiming       *Timing `protobuf:"bytes,3,opt,name=output_timing,json=outputTiming,proto3" json:"output_timing,omitempty"`
}

func (x *MergeAggregateStats) Reset() {
	*x = MergeAggregateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeAggregateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeAggregateStats) ProtoMessage() {}

func (x *MergeAggregateStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeAggregateStats.ProtoReflect.Descriptor instead.
func (*MergeAggregateStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{39}
}

func (x *MergeAggregateStats) GetAssignStatesTiming() *Timing {
	if x != nil {
		return x.AssignStatesTiming
	}
	return nil
}

func (x *MergeAggregateStats) GetUpdateStatesTiming() *Timing {
	if x != nil {
		return x.UpdateStatesTiming
	}
	return nil
}

func (x *MergeAggregateStats) GetOutputTiming() *Timing {
	if x != nil {
		return x.OutputTiming
	}
	return nil
}

type LocalSortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpillStats        *SpillStats `protobuf:"bytes,1,opt,name=spill_stats,json=spillStats,proto3" json:"spill_stats,omitempty"`
	GenerateRunTiming *Timing     `protobuf:"bytes,2,opt,name=generate_run_timing,json=generateRunTiming,proto3" json:"generate_run_timing,omitempty"`
	MergeRunTiming    *Timing     `protobuf:"bytes,3,opt,name=merge_run_timing,json=mergeRunTiming,proto3" json:"merge_run_timing,omitempty"`
	InitMergeTiming   *Timing     `protobuf:"bytes,4,opt,name=init_merge_timing,json=initMergeTiming,proto3" json:"init_merge_timing,omitempty"`
	// included in generate_run_timing
	AccumulateBlockTiming *Timing `protobuf:"bytes,5,opt,name=accumulate_block_timing,json=accumulateBlockTiming,proto3" json:"accumulate_block_timing,omitempty"`
	SortKeyTiming         *Timing `protobuf:"bytes,6,opt,name=sort_key_timing,json=sortKeyTiming,proto3" json:"sort_key_timing,omitempty"`
	PermutePayloadTiming  *Timing `protobuf:"bytes,7,opt,name=permute_payload_timing,json=permutePayloadTiming,proto3" json:"permute_payload_timing,omitempty"`
	SpillRunTiming        *Timing `protobuf:"bytes,8,opt,name=spill_run_timing,json=spillRunTiming,proto3" json:"spill_run_timing,omitempty"`
}

func (x *LocalSortStats) Reset() {
	*x = LocalSortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSortStats) ProtoMessage() {}

func (x *LocalSortStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSortStats.ProtoReflect.Descriptor instead.
func (*LocalSortStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{40}
}

func (x *LocalSortStats) GetSpillStats() *SpillStats {
	if x != nil {
		return x.SpillStats
	}
	return nil
}

func (x *LocalSortStats) GetGenerateRunTiming() *Timing {
	if x != nil {
		return x.GenerateRunTiming
	}
	return nil
}

func (x *LocalSortStats) GetMergeRunTiming() *Timing {
	if x != nil {
		return x.MergeRunTiming
	}
	return nil
}

func (x *LocalSortStats) GetInitMergeTiming() *Timing {
	if x != nil {
		return x.InitMergeTiming
	}
	return nil
}

func (x *LocalSortStats) GetAccumulateBlockTiming() *Timing {
	if x != nil {
		return x.AccumulateBlockTiming
	}
	return nil
}

func (x *LocalSortStats) GetSortKeyTiming() *Timing {
	if x != nil {
		return x.SortKeyTiming
	}
	return nil
}

func (x *LocalSortStats) GetPermutePayloadTiming() *Timing {
	if x != nil {
		return x.PermutePayloadTiming
	}
	return nil
}

func (x *LocalSortStats) GetSpillRunTiming() *Timing {
	if x != nil {
		return x.SpillRunTiming
	}
	return nil
}

type MergeSortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergeSortStats) Reset() {
	*x = MergeSortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSortStats) ProtoMessage() {}

func (x *MergeSortStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSortStats.ProtoReflect.Descriptor instead.
func (*MergeSortStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{41}
}

type UnionAllStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnionAllStats) Reset() {
	*x = UnionAllStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionAllStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionAllStats) ProtoMessage() {}

func (x *UnionAllStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionAllStats.ProtoReflect.Descriptor instead.
func (*UnionAllStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{42}
}

type ValuesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValuesStats) Reset() {
	*x = ValuesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesStats) ProtoMessage() {}

func (x *ValuesStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesStats.ProtoReflect.Descriptor instead.
func (*ValuesStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{43}
}

type BufferStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpillStats *SpillStats `protobuf:"bytes,1,opt,name=spill_stats,json=spillStats,proto3" json:"spill_stats,omitempty"`
}

func (x *BufferStats) Reset() {
	*x = BufferStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferStats) ProtoMessage() {}

func (x *BufferStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferStats.ProtoReflect.Descriptor instead.
func (*BufferStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{44}
}

func (x *BufferStats) GetSpillStats() *SpillStats {
	if x != nil {
		return x.SpillStats
	}
	return nil
}

type WindowStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WindowStats) Reset() {
	*x = WindowStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowStats) ProtoMessage() {}

func (x *WindowStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowStats.ProtoReflect.Descriptor instead.
func (*WindowStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{45}
}

type PartialWindowStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartialWindowStats) Reset() {
	*x = PartialWindowStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialWindowStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialWindowStats) ProtoMessage() {}

func (x *PartialWindowStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialWindowStats.ProtoReflect.Descriptor instead.
func (*PartialWindowStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{46}
}

type ExpandStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExpandStats) Reset() {
	*x = ExpandStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandStats) ProtoMessage() {}

func (x *ExpandStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandStats.ProtoReflect.Descriptor instead.
func (*ExpandStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{47}
}

type LateralViewStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LateralViewStats) Reset() {
	*x = LateralViewStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LateralViewStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LateralViewStats) ProtoMessage() {}

func (x *LateralViewStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LateralViewStats.ProtoReflect.Descriptor instead.
func (*LateralViewStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{48}
}

type ExchangeSinkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentByteCount           uint64  `protobuf:"varint,1,opt,name=sent_byte_count,json=sentByteCount,proto3" json:"sent_byte_count,omitempty"`
	CompressInputByteCount  uint64  `protobuf:"varint,2,opt,name=compress_input_byte_count,json=compressInputByteCount,proto3" json:"compress_input_byte_count,omitempty"`
	SerializeWriteTiming    *Timing `protobuf:"bytes,3,opt,name=serialize_write_timing,json=serializeWriteTiming,proto3" json:"serialize_write_timing,omitempty"`
	SerializeFlushTiming    *Timing `protobuf:"bytes,4,opt,name=serialize_flush_timing,json=serializeFlushTiming,proto3" json:"serialize_flush_timing,omitempty"`
	CompressTiming          *Timing `protobuf:"bytes,5,opt,name=compress_timing,json=compressTiming,proto3" json:"compress_timing,omitempty"`
	AcquireBufferTiming     *Timing `protobuf:"bytes,6,opt,name=acquire_buffer_timing,json=acquireBufferTiming,proto3" json:"acquire_buffer_timing,omitempty"`
	SubmitBufferTiming      *Timing `protobuf:"bytes,7,opt,name=submit_buffer_timing,json=submitBufferTiming,proto3" json:"submit_buffer_timing,omitempty"`
	CloseTiming             *Timing `protobuf:"bytes,8,opt,name=close_timing,json=closeTiming,proto3" json:"close_timing,omitempty"`
	SubmitBufferAsyncTiming *Timing `protobuf:"bytes,9,opt,name=submit_buffer_async_timing,json=submitBufferAsyncTiming,proto3" json:"submit_buffer_async_timing,omitempty"`
}

func (x *ExchangeSinkStats) Reset() {
	*x = ExchangeSinkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSinkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSinkStats) ProtoMessage() {}

func (x *ExchangeSinkStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSinkStats.ProtoReflect.Descriptor instead.
func (*ExchangeSinkStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{49}
}

func (x *ExchangeSinkStats) GetSentByteCount() uint64 {
	if x != nil {
		return x.SentByteCount
	}
	return 0
}

func (x *ExchangeSinkStats) GetCompressInputByteCount() uint64 {
	if x != nil {
		return x.CompressInputByteCount
	}
	return 0
}

func (x *ExchangeSinkStats) GetSerializeWriteTiming() *Timing {
	if x != nil {
		return x.SerializeWriteTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetSerializeFlushTiming() *Timing {
	if x != nil {
		return x.SerializeFlushTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetCompressTiming() *Timing {
	if x != nil {
		return x.CompressTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetAcquireBufferTiming() *Timing {
	if x != nil {
		return x.AcquireBufferTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetSubmitBufferTiming() *Timing {
	if x != nil {
		return x.SubmitBufferTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetCloseTiming() *Timing {
	if x != nil {
		return x.CloseTiming
	}
	return nil
}

func (x *ExchangeSinkStats) GetSubmitBufferAsyncTiming() *Timing {
	if x != nil {
		return x.SubmitBufferAsyncTiming
	}
	return nil
}

type ExchangeSourceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedByteCount         uint64      `protobuf:"varint,1,opt,name=received_byte_count,json=receivedByteCount,proto3" json:"received_byte_count,omitempty"`
	DecompressOutputByteCount uint64      `protobuf:"varint,2,opt,name=decompress_output_byte_count,json=decompressOutputByteCount,proto3" json:"decompress_output_byte_count,omitempty"`
	DeserializeTiming         *Timing     `protobuf:"bytes,3,opt,name=deserialize_timing,json=deserializeTiming,proto3" json:"deserialize_timing,omitempty"`
	DecompressTiming          *Timing     `protobuf:"bytes,4,opt,name=decompress_timing,json=decompressTiming,proto3" json:"decompress_timing,omitempty"`
	ReadBufferTiming          *Timing     `protobuf:"bytes,5,opt,name=read_buffer_timing,json=readBufferTiming,proto3" json:"read_buffer_timing,omitempty"`
	SortTiming                *Timing     `protobuf:"bytes,6,opt,name=sort_timing,json=sortTiming,proto3" json:"sort_timing,omitempty"`
	SorterSpillStats          *SpillStats `protobuf:"bytes,7,opt,name=sorter_spill_stats,json=sorterSpillStats,proto3" json:"sorter_spill_stats,omitempty"`
}

func (x *ExchangeSourceStats) Reset() {
	*x = ExchangeSourceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSourceStats) ProtoMessage() {}

func (x *ExchangeSourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSourceStats.ProtoReflect.Descriptor instead.
func (*ExchangeSourceStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{50}
}

func (x *ExchangeSourceStats) GetReceivedByteCount() uint64 {
	if x != nil {
		return x.ReceivedByteCount
	}
	return 0
}

func (x *ExchangeSourceStats) GetDecompressOutputByteCount() uint64 {
	if x != nil {
		return x.DecompressOutputByteCount
	}
	return 0
}

func (x *ExchangeSourceStats) GetDeserializeTiming() *Timing {
	if x != nil {
		return x.DeserializeTiming
	}
	return nil
}

func (x *ExchangeSourceStats) GetDecompressTiming() *Timing {
	if x != nil {
		return x.DecompressTiming
	}
	return nil
}

func (x *ExchangeSourceStats) GetReadBufferTiming() *Timing {
	if x != nil {
		return x.ReadBufferTiming
	}
	return nil
}

func (x *ExchangeSourceStats) GetSortTiming() *Timing {
	if x != nil {
		return x.SortTiming
	}
	return nil
}

func (x *ExchangeSourceStats) GetSorterSpillStats() *SpillStats {
	if x != nil {
		return x.SorterSpillStats
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       []string   `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	TableMeta  *TableMeta `protobuf:"bytes,2,opt,name=table_meta,json=tableMeta,proto3" json:"table_meta,omitempty"`
	InstanceId int64      `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{51}
}

func (x *Table) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Table) GetTableMeta() *TableMeta {
	if x != nil {
		return x.TableMeta
	}
	return nil
}

func (x *Table) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount  uint32              `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	ColCount  uint32              `protobuf:"varint,2,opt,name=col_count,json=colCount,proto3" json:"col_count,omitempty"`
	Data      []*ScalarExpression `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Broadcast bool                `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
}

func (x *Values) Reset() {
	*x = Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Values) ProtoMessage() {}

func (x *Values) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Values.ProtoReflect.Descriptor instead.
func (*Values) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{52}
}

func (x *Values) GetRowCount() uint32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *Values) GetColCount() uint32 {
	if x != nil {
		return x.ColCount
	}
	return 0
}

func (x *Values) GetData() []*ScalarExpression {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Values) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

type SortKeyDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order Order  `protobuf:"varint,2,opt,name=order,proto3,enum=util.Order" json:"order,omitempty"`
}

func (x *SortKeyDesc) Reset() {
	*x = SortKeyDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortKeyDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortKeyDesc) ProtoMessage() {}

func (x *SortKeyDesc) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortKeyDesc.ProtoReflect.Descriptor instead.
func (*SortKeyDesc) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{53}
}

func (x *SortKeyDesc) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SortKeyDesc) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ASC
}

type TableScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table                    *Table                    `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	DataSourceInfoId         int32                     `protobuf:"varint,2,opt,name=data_source_info_id,json=dataSourceInfoId,proto3" json:"data_source_info_id,omitempty"`
	Cols                     []uint64                  `protobuf:"varint,3,rep,packed,name=cols,proto3" json:"cols,omitempty"`
	Filter                   *ScalarExpression         `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	EnsuredFilter            *ScalarExpression         `protobuf:"bytes,5,opt,name=ensuredFilter,proto3" json:"ensuredFilter,omitempty"`
	Props                    map[string]string         `protobuf:"bytes,6,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Align                    bool                      `protobuf:"varint,7,opt,name=align,proto3" json:"align,omitempty"`
	AlignDop                 uint64                    `protobuf:"varint,8,opt,name=alignDop,proto3" json:"alignDop,omitempty"`
	Orders                   []*SortKeyDesc            `protobuf:"bytes,9,rep,name=orders,proto3" json:"orders,omitempty"`
	RangeKeys                []uint32                  `protobuf:"varint,10,rep,packed,name=range_keys,json=rangeKeys,proto3" json:"range_keys,omitempty"`
	RangeDistributionId      uint32                    `protobuf:"varint,11,opt,name=range_distribution_id,json=rangeDistributionId,proto3" json:"range_distribution_id,omitempty"`
	IncrementalTableProperty *IncrementalTableProperty `protobuf:"bytes,12,opt,name=incremental_table_property,json=incrementalTableProperty,proto3" json:"incremental_table_property,omitempty"`
	Filter4Meta              *ScalarExpression         `protobuf:"bytes,13,opt,name=filter4Meta,proto3" json:"filter4Meta,omitempty"`
}

func (x *TableScan) Reset() {
	*x = TableScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableScan) ProtoMessage() {}

func (x *TableScan) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableScan.ProtoReflect.Descriptor instead.
func (*TableScan) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{54}
}

func (x *TableScan) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *TableScan) GetDataSourceInfoId() int32 {
	if x != nil {
		return x.DataSourceInfoId
	}
	return 0
}

func (x *TableScan) GetCols() []uint64 {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *TableScan) GetFilter() *ScalarExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TableScan) GetEnsuredFilter() *ScalarExpression {
	if x != nil {
		return x.EnsuredFilter
	}
	return nil
}

func (x *TableScan) GetProps() map[string]string {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *TableScan) GetAlign() bool {
	if x != nil {
		return x.Align
	}
	return false
}

func (x *TableScan) GetAlignDop() uint64 {
	if x != nil {
		return x.AlignDop
	}
	return 0
}

func (x *TableScan) GetOrders() []*SortKeyDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *TableScan) GetRangeKeys() []uint32 {
	if x != nil {
		return x.RangeKeys
	}
	return nil
}

func (x *TableScan) GetRangeDistributionId() uint32 {
	if x != nil {
		return x.RangeDistributionId
	}
	return 0
}

func (x *TableScan) GetIncrementalTableProperty() *IncrementalTableProperty {
	if x != nil {
		return x.IncrementalTableProperty
	}
	return nil
}

func (x *TableScan) GetFilter4Meta() *ScalarExpression {
	if x != nil {
		return x.Filter4Meta
	}
	return nil
}

type TableScanStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputStats *DataInputStats `protobuf:"bytes,1,opt,name=input_stats,json=inputStats,proto3" json:"input_stats,omitempty"`
}

func (x *TableScanStats) Reset() {
	*x = TableScanStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableScanStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableScanStats) ProtoMessage() {}

func (x *TableScanStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableScanStats.ProtoReflect.Descriptor instead.
func (*TableScanStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{55}
}

func (x *TableScanStats) GetInputStats() *DataInputStats {
	if x != nil {
		return x.InputStats
	}
	return nil
}

type IncrementalTableProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From            int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To              int64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Consolidate     bool  `protobuf:"varint,3,opt,name=consolidate,proto3" json:"consolidate,omitempty"` // no longer used
	FromMetaVersion int64 `protobuf:"varint,4,opt,name=fromMetaVersion,proto3" json:"fromMetaVersion,omitempty"`
	ToMetaVersion   int64 `protobuf:"varint,5,opt,name=toMetaVersion,proto3" json:"toMetaVersion,omitempty"`
	RowCount        int64 `protobuf:"varint,6,opt,name=rowCount,proto3" json:"rowCount,omitempty"`
	BaseRowCount    int64 `protobuf:"varint,7,opt,name=baseRowCount,proto3" json:"baseRowCount,omitempty"`
}

func (x *IncrementalTableProperty) Reset() {
	*x = IncrementalTableProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementalTableProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementalTableProperty) ProtoMessage() {}

func (x *IncrementalTableProperty) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementalTableProperty.ProtoReflect.Descriptor instead.
func (*IncrementalTableProperty) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{56}
}

func (x *IncrementalTableProperty) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *IncrementalTableProperty) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *IncrementalTableProperty) GetConsolidate() bool {
	if x != nil {
		return x.Consolidate
	}
	return false
}

func (x *IncrementalTableProperty) GetFromMetaVersion() int64 {
	if x != nil {
		return x.FromMetaVersion
	}
	return 0
}

func (x *IncrementalTableProperty) GetToMetaVersion() int64 {
	if x != nil {
		return x.ToMetaVersion
	}
	return 0
}

func (x *IncrementalTableProperty) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *IncrementalTableProperty) GetBaseRowCount() int64 {
	if x != nil {
		return x.BaseRowCount
	}
	return 0
}

// The shuffle type. Wrapping a message to avoid enum name conflict
type ShuffleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ShuffleType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=util.ShuffleType_Type" json:"type,omitempty"`
}

func (x *ShuffleType) Reset() {
	*x = ShuffleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleType) ProtoMessage() {}

func (x *ShuffleType) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleType.ProtoReflect.Descriptor instead.
func (*ShuffleType) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{57}
}

func (x *ShuffleType) GetType() ShuffleType_Type {
	if x != nil {
		return x.Type
	}
	return ShuffleType_HASH
}

type TableSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table            *Table            `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Overwrite        bool              `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	DataSourceInfoId int32             `protobuf:"varint,3,opt,name=data_source_info_id,json=dataSourceInfoId,proto3" json:"data_source_info_id,omitempty"`
	Keys             []*Reference      `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty"`
	Flags            uint32            `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	PartSortKeys     []*Reference      `protobuf:"bytes,6,rep,name=part_sort_keys,json=partSortKeys,proto3" json:"part_sort_keys,omitempty"`
	InputFields      []uint64          `protobuf:"varint,7,rep,packed,name=input_fields,json=inputFields,proto3" json:"input_fields,omitempty"`
	FileSliceKeys    []*Reference      `protobuf:"bytes,8,rep,name=file_slice_keys,json=fileSliceKeys,proto3" json:"file_slice_keys,omitempty"`
	StaticPartition  bool              `protobuf:"varint,9,opt,name=static_partition,json=staticPartition,proto3" json:"static_partition,omitempty"`
	PartValues       *VirtualValueInfo `protobuf:"bytes,10,opt,name=part_values,json=partValues,proto3" json:"part_values,omitempty"`
	Nop              bool              `protobuf:"varint,11,opt,name=nop,proto3" json:"nop,omitempty"`
}

func (x *TableSink) Reset() {
	*x = TableSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSink) ProtoMessage() {}

func (x *TableSink) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSink.ProtoReflect.Descriptor instead.
func (*TableSink) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{58}
}

func (x *TableSink) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *TableSink) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *TableSink) GetDataSourceInfoId() int32 {
	if x != nil {
		return x.DataSourceInfoId
	}
	return 0
}

func (x *TableSink) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TableSink) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TableSink) GetPartSortKeys() []*Reference {
	if x != nil {
		return x.PartSortKeys
	}
	return nil
}

func (x *TableSink) GetInputFields() []uint64 {
	if x != nil {
		return x.InputFields
	}
	return nil
}

func (x *TableSink) GetFileSliceKeys() []*Reference {
	if x != nil {
		return x.FileSliceKeys
	}
	return nil
}

func (x *TableSink) GetStaticPartition() bool {
	if x != nil {
		return x.StaticPartition
	}
	return false
}

func (x *TableSink) GetPartValues() *VirtualValueInfo {
	if x != nil {
		return x.PartValues
	}
	return nil
}

func (x *TableSink) GetNop() bool {
	if x != nil {
		return x.Nop
	}
	return false
}

type ShuffleWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffleType         *ShuffleType   `protobuf:"bytes,1,opt,name=shuffleType,proto3" json:"shuffleType,omitempty"`
	Keys                []*Reference   `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Orders              []*OrderByDesc `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	Limit               uint32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"` // 0 means no limit
	FunctionVersion     uint32         `protobuf:"varint,5,opt,name=function_version,json=functionVersion,proto3" json:"function_version,omitempty"`
	BucketType          HashBucketType `protobuf:"varint,6,opt,name=bucket_type,json=bucketType,proto3,enum=util.HashBucketType" json:"bucket_type,omitempty"`
	RangeDistributionId uint32         `protobuf:"varint,7,opt,name=range_distribution_id,json=rangeDistributionId,proto3" json:"range_distribution_id,omitempty"`
}

func (x *ShuffleWrite) Reset() {
	*x = ShuffleWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleWrite) ProtoMessage() {}

func (x *ShuffleWrite) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleWrite.ProtoReflect.Descriptor instead.
func (*ShuffleWrite) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{59}
}

func (x *ShuffleWrite) GetShuffleType() *ShuffleType {
	if x != nil {
		return x.ShuffleType
	}
	return nil
}

func (x *ShuffleWrite) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ShuffleWrite) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ShuffleWrite) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ShuffleWrite) GetFunctionVersion() uint32 {
	if x != nil {
		return x.FunctionVersion
	}
	return 0
}

func (x *ShuffleWrite) GetBucketType() HashBucketType {
	if x != nil {
		return x.BucketType
	}
	return HashBucketType_HASH_MOD
}

func (x *ShuffleWrite) GetRangeDistributionId() uint32 {
	if x != nil {
		return x.RangeDistributionId
	}
	return 0
}

type ShuffleRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders        []*OrderByDesc `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Limit         uint32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` // 0 means no limit
	Offset        uint32         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	ShuffleType   *ShuffleType   `protobuf:"bytes,4,opt,name=shuffleType,proto3" json:"shuffleType,omitempty"`
	MultiAccessed bool           `protobuf:"varint,5,opt,name=multi_accessed,json=multiAccessed,proto3" json:"multi_accessed,omitempty"`
	PreStart      bool           `protobuf:"varint,6,opt,name=pre_start,json=preStart,proto3" json:"pre_start,omitempty"`
	MergeSort     bool           `protobuf:"varint,7,opt,name=merge_sort,json=mergeSort,proto3" json:"merge_sort,omitempty"`
}

func (x *ShuffleRead) Reset() {
	*x = ShuffleRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleRead) ProtoMessage() {}

func (x *ShuffleRead) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleRead.ProtoReflect.Descriptor instead.
func (*ShuffleRead) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{60}
}

func (x *ShuffleRead) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ShuffleRead) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ShuffleRead) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ShuffleRead) GetShuffleType() *ShuffleType {
	if x != nil {
		return x.ShuffleType
	}
	return nil
}

func (x *ShuffleRead) GetMultiAccessed() bool {
	if x != nil {
		return x.MultiAccessed
	}
	return false
}

func (x *ShuffleRead) GetPreStart() bool {
	if x != nil {
		return x.PreStart
	}
	return false
}

func (x *ShuffleRead) GetMergeSort() bool {
	if x != nil {
		return x.MergeSort
	}
	return false
}

type LocalExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffleType     *ShuffleType   `protobuf:"bytes,1,opt,name=shuffleType,proto3" json:"shuffleType,omitempty"`
	Keys            []*Reference   `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Orders          []*OrderByDesc `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	Limit           uint32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"` // 0 means no limit
	Offset          uint32         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	FunctionVersion uint32         `protobuf:"varint,6,opt,name=function_version,json=functionVersion,proto3" json:"function_version,omitempty"`
}

func (x *LocalExchange) Reset() {
	*x = LocalExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalExchange) ProtoMessage() {}

func (x *LocalExchange) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalExchange.ProtoReflect.Descriptor instead.
func (*LocalExchange) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{61}
}

func (x *LocalExchange) GetShuffleType() *ShuffleType {
	if x != nil {
		return x.ShuffleType
	}
	return nil
}

func (x *LocalExchange) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LocalExchange) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *LocalExchange) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LocalExchange) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LocalExchange) GetFunctionVersion() uint32 {
	if x != nil {
		return x.FunctionVersion
	}
	return 0
}

type LocalSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*OrderByDesc `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Limit  uint64         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LocalSort) Reset() {
	*x = LocalSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSort) ProtoMessage() {}

func (x *LocalSort) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSort.ProtoReflect.Descriptor instead.
func (*LocalSort) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{62}
}

func (x *LocalSort) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *LocalSort) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LocalSort) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type LogicalSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   []*Reference      `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Orders []*OrderByDesc    `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	Limit  *ScalarExpression `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset *ScalarExpression `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Global bool              `protobuf:"varint,5,opt,name=global,proto3" json:"global,omitempty"`
}

func (x *LogicalSort) Reset() {
	*x = LogicalSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalSort) ProtoMessage() {}

func (x *LogicalSort) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalSort.ProtoReflect.Descriptor instead.
func (*LogicalSort) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{63}
}

func (x *LogicalSort) GetKeys() []*Reference {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LogicalSort) GetOrders() []*OrderByDesc {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *LogicalSort) GetLimit() *ScalarExpression {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *LogicalSort) GetOffset() *ScalarExpression {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *LogicalSort) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

type SetOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            SetOpType `protobuf:"varint,1,opt,name=type,proto3,enum=util.SetOpType" json:"type,omitempty"`
	All             bool      `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	InputReferences []uint64  `protobuf:"varint,3,rep,packed,name=input_references,json=inputReferences,proto3" json:"input_references,omitempty"`
}

func (x *SetOperator) Reset() {
	*x = SetOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperator) ProtoMessage() {}

func (x *SetOperator) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperator.ProtoReflect.Descriptor instead.
func (*SetOperator) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{64}
}

func (x *SetOperator) GetType() SetOpType {
	if x != nil {
		return x.Type
	}
	return SetOpType_UNION
}

func (x *SetOperator) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SetOperator) GetInputReferences() []uint64 {
	if x != nil {
		return x.InputReferences
	}
	return nil
}

type DataInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawInputByteCount uint64 `protobuf:"varint,1,opt,name=raw_input_byte_count,json=rawInputByteCount,proto3" json:"raw_input_byte_count,omitempty"`
	RowCount          uint64 `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Types that are assignable to InputStats:
	//
	//	*DataInputStats_FileInputStats
	//	*DataInputStats_FileFormatStats
	InputStats    isDataInputStats_InputStats `protobuf_oneof:"input_stats"`
	TimeElapsedUs uint64                      `protobuf:"varint,5,opt,name=time_elapsed_us,json=timeElapsedUs,proto3" json:"time_elapsed_us,omitempty"` // including decoding/decompression/io...
}

func (x *DataInputStats) Reset() {
	*x = DataInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataInputStats) ProtoMessage() {}

func (x *DataInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataInputStats.ProtoReflect.Descriptor instead.
func (*DataInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{65}
}

func (x *DataInputStats) GetRawInputByteCount() uint64 {
	if x != nil {
		return x.RawInputByteCount
	}
	return 0
}

func (x *DataInputStats) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (m *DataInputStats) GetInputStats() isDataInputStats_InputStats {
	if m != nil {
		return m.InputStats
	}
	return nil
}

func (x *DataInputStats) GetFileInputStats() *FileRangesInputStats {
	if x, ok := x.GetInputStats().(*DataInputStats_FileInputStats); ok {
		return x.FileInputStats
	}
	return nil
}

func (x *DataInputStats) GetFileFormatStats() *FileInputStats {
	if x, ok := x.GetInputStats().(*DataInputStats_FileFormatStats); ok {
		return x.FileFormatStats
	}
	return nil
}

func (x *DataInputStats) GetTimeElapsedUs() uint64 {
	if x != nil {
		return x.TimeElapsedUs
	}
	return 0
}

type isDataInputStats_InputStats interface {
	isDataInputStats_InputStats()
}

type DataInputStats_FileInputStats struct {
	FileInputStats *FileRangesInputStats `protobuf:"bytes,3,opt,name=file_input_stats,json=fileInputStats,proto3,oneof"`
}

type DataInputStats_FileFormatStats struct {
	FileFormatStats *FileInputStats `protobuf:"bytes,4,opt,name=file_format_stats,json=fileFormatStats,proto3,oneof"`
}

func (*DataInputStats_FileInputStats) isDataInputStats_InputStats() {}

func (*DataInputStats_FileFormatStats) isDataInputStats_InputStats() {}

type FileRangesInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInputStats []*DataInputStats `protobuf:"bytes,1,rep,name=file_input_stats,json=fileInputStats,proto3" json:"file_input_stats,omitempty"`
}

func (x *FileRangesInputStats) Reset() {
	*x = FileRangesInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRangesInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRangesInputStats) ProtoMessage() {}

func (x *FileRangesInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRangesInputStats.ProtoReflect.Descriptor instead.
func (*FileRangesInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{66}
}

func (x *FileRangesInputStats) GetFileInputStats() []*DataInputStats {
	if x != nil {
		return x.FileInputStats
	}
	return nil
}

type FileInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatType FileFormatType `protobuf:"varint,1,opt,name=format_type,json=formatType,proto3,enum=util.FileFormatType" json:"format_type,omitempty"`
	Range      *FileRange     `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	// Types that are assignable to FileFormatInputStats:
	//
	//	*FileInputStats_TextInputStats
	//	*FileInputStats_ParquetInputStats
	//	*FileInputStats_MemoryInputStats
	//	*FileInputStats_OrcInputStats
	//	*FileInputStats_DummyInputStats
	//	*FileInputStats_CsvInputStats
	//	*FileInputStats_AvroInputStats
	//	*FileInputStats_ArrowInputStats
	FileFormatInputStats isFileInputStats_FileFormatInputStats `protobuf_oneof:"file_format_input_stats"`
	IoStats              *FileIOInputStats                     `protobuf:"bytes,6,opt,name=io_stats,json=ioStats,proto3" json:"io_stats,omitempty"`
	DeltaFileStats       []*DataInputStats                     `protobuf:"bytes,7,rep,name=delta_file_stats,json=deltaFileStats,proto3" json:"delta_file_stats,omitempty"`
}

func (x *FileInputStats) Reset() {
	*x = FileInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInputStats) ProtoMessage() {}

func (x *FileInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInputStats.ProtoReflect.Descriptor instead.
func (*FileInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{67}
}

func (x *FileInputStats) GetFormatType() FileFormatType {
	if x != nil {
		return x.FormatType
	}
	return FileFormatType_TEXT
}

func (x *FileInputStats) GetRange() *FileRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (m *FileInputStats) GetFileFormatInputStats() isFileInputStats_FileFormatInputStats {
	if m != nil {
		return m.FileFormatInputStats
	}
	return nil
}

func (x *FileInputStats) GetTextInputStats() *TextInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_TextInputStats); ok {
		return x.TextInputStats
	}
	return nil
}

func (x *FileInputStats) GetParquetInputStats() *ParquetInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_ParquetInputStats); ok {
		return x.ParquetInputStats
	}
	return nil
}

func (x *FileInputStats) GetMemoryInputStats() *MemoryTableInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_MemoryInputStats); ok {
		return x.MemoryInputStats
	}
	return nil
}

func (x *FileInputStats) GetOrcInputStats() *OrcInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_OrcInputStats); ok {
		return x.OrcInputStats
	}
	return nil
}

func (x *FileInputStats) GetDummyInputStats() *DummyInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_DummyInputStats); ok {
		return x.DummyInputStats
	}
	return nil
}

func (x *FileInputStats) GetCsvInputStats() *CSVInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_CsvInputStats); ok {
		return x.CsvInputStats
	}
	return nil
}

func (x *FileInputStats) GetAvroInputStats() *AvroInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_AvroInputStats); ok {
		return x.AvroInputStats
	}
	return nil
}

func (x *FileInputStats) GetArrowInputStats() *ArrowInputStats {
	if x, ok := x.GetFileFormatInputStats().(*FileInputStats_ArrowInputStats); ok {
		return x.ArrowInputStats
	}
	return nil
}

func (x *FileInputStats) GetIoStats() *FileIOInputStats {
	if x != nil {
		return x.IoStats
	}
	return nil
}

func (x *FileInputStats) GetDeltaFileStats() []*DataInputStats {
	if x != nil {
		return x.DeltaFileStats
	}
	return nil
}

type isFileInputStats_FileFormatInputStats interface {
	isFileInputStats_FileFormatInputStats()
}

type FileInputStats_TextInputStats struct {
	TextInputStats *TextInputStats `protobuf:"bytes,3,opt,name=text_input_stats,json=textInputStats,proto3,oneof"`
}

type FileInputStats_ParquetInputStats struct {
	ParquetInputStats *ParquetInputStats `protobuf:"bytes,4,opt,name=parquet_input_stats,json=parquetInputStats,proto3,oneof"`
}

type FileInputStats_MemoryInputStats struct {
	MemoryInputStats *MemoryTableInputStats `protobuf:"bytes,5,opt,name=memory_input_stats,json=memoryInputStats,proto3,oneof"`
}

type FileInputStats_OrcInputStats struct {
	OrcInputStats *OrcInputStats `protobuf:"bytes,8,opt,name=orc_input_stats,json=orcInputStats,proto3,oneof"`
}

type FileInputStats_DummyInputStats struct {
	DummyInputStats *DummyInputStats `protobuf:"bytes,9,opt,name=dummy_input_stats,json=dummyInputStats,proto3,oneof"`
}

type FileInputStats_CsvInputStats struct {
	CsvInputStats *CSVInputStats `protobuf:"bytes,10,opt,name=csv_input_stats,json=csvInputStats,proto3,oneof"`
}

type FileInputStats_AvroInputStats struct {
	AvroInputStats *AvroInputStats `protobuf:"bytes,11,opt,name=avro_input_stats,json=avroInputStats,proto3,oneof"`
}

type FileInputStats_ArrowInputStats struct {
	ArrowInputStats *ArrowInputStats `protobuf:"bytes,12,opt,name=arrow_input_stats,json=arrowInputStats,proto3,oneof"`
}

func (*FileInputStats_TextInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_ParquetInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_MemoryInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_OrcInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_DummyInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_CsvInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_AvroInputStats) isFileInputStats_FileFormatInputStats() {}

func (*FileInputStats_ArrowInputStats) isFileInputStats_FileFormatInputStats() {}

type DeltaFileInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseFileStats *FileInputStats `protobuf:"bytes,1,opt,name=baseFileStats,proto3" json:"baseFileStats,omitempty"`
}

func (x *DeltaFileInputStats) Reset() {
	*x = DeltaFileInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaFileInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaFileInputStats) ProtoMessage() {}

func (x *DeltaFileInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaFileInputStats.ProtoReflect.Descriptor instead.
func (*DeltaFileInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{68}
}

func (x *DeltaFileInputStats) GetBaseFileStats() *FileInputStats {
	if x != nil {
		return x.BaseFileStats
	}
	return nil
}

type FileIOInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadCount     uint64                `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`               // io request count
	ReadBytes     uint64                `protobuf:"varint,2,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`               // io bytes
	TimeElapsedUs uint64                `protobuf:"varint,3,opt,name=time_elapsed_us,json=timeElapsedUs,proto3" json:"time_elapsed_us,omitempty"` // io stream time, including benefit of prefetch
	PrefetchStats *PrefetchStats        `protobuf:"bytes,4,opt,name=prefetch_stats,json=prefetchStats,proto3" json:"prefetch_stats,omitempty"`
	InputStats    *FileInputStreamStats `protobuf:"bytes,5,opt,name=input_stats,json=inputStats,proto3" json:"input_stats,omitempty"`
}

func (x *FileIOInputStats) Reset() {
	*x = FileIOInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIOInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIOInputStats) ProtoMessage() {}

func (x *FileIOInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIOInputStats.ProtoReflect.Descriptor instead.
func (*FileIOInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{69}
}

func (x *FileIOInputStats) GetReadCount() uint64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *FileIOInputStats) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *FileIOInputStats) GetTimeElapsedUs() uint64 {
	if x != nil {
		return x.TimeElapsedUs
	}
	return 0
}

func (x *FileIOInputStats) GetPrefetchStats() *PrefetchStats {
	if x != nil {
		return x.PrefetchStats
	}
	return nil
}

func (x *FileIOInputStats) GetInputStats() *FileInputStreamStats {
	if x != nil {
		return x.InputStats
	}
	return nil
}

type FileIOOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeElapsedUs uint64 `protobuf:"varint,1,opt,name=time_elapsed_us,json=timeElapsedUs,proto3" json:"time_elapsed_us,omitempty"` // io stream time, means the time blocking on io(SYNC).
}

func (x *FileIOOutputStats) Reset() {
	*x = FileIOOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIOOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIOOutputStats) ProtoMessage() {}

func (x *FileIOOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIOOutputStats.ProtoReflect.Descriptor instead.
func (*FileIOOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{70}
}

func (x *FileIOOutputStats) GetTimeElapsedUs() uint64 {
	if x != nil {
		return x.TimeElapsedUs
	}
	return 0
}

type PrefetchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType        string `protobuf:"bytes,8,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"`
	ReadCount         uint64 `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                             // io request from outside
	ReadBytes         uint64 `protobuf:"varint,2,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`                             // io bytes from prefetch cache
	ReadHitCache      uint64 `protobuf:"varint,3,opt,name=read_hit_cache,json=readHitCache,proto3" json:"read_hit_cache,omitempty"`                  // prefetch cache hit count
	ReadTimeElapsedUs uint64 `protobuf:"varint,4,opt,name=read_time_elapsed_us,json=readTimeElapsedUs,proto3" json:"read_time_elapsed_us,omitempty"` // total io request cost(SYNC)
	IoCount           uint64 `protobuf:"varint,5,opt,name=io_count,json=ioCount,proto3" json:"io_count,omitempty"`                                   // merged io count in prefetch thread/fiber
	IoBytes           uint64 `protobuf:"varint,6,opt,name=io_bytes,json=ioBytes,proto3" json:"io_bytes,omitempty"`                                   // merged io bytes in prefetch thread/fiber
	IoTimeElapsedUs   uint64 `protobuf:"varint,7,opt,name=io_time_elapsed_us,json=ioTimeElapsedUs,proto3" json:"io_time_elapsed_us,omitempty"`       // merged io cost(ASYNC)
}

func (x *PrefetchStats) Reset() {
	*x = PrefetchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefetchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefetchStats) ProtoMessage() {}

func (x *PrefetchStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefetchStats.ProtoReflect.Descriptor instead.
func (*PrefetchStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{71}
}

func (x *PrefetchStats) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *PrefetchStats) GetReadCount() uint64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *PrefetchStats) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *PrefetchStats) GetReadHitCache() uint64 {
	if x != nil {
		return x.ReadHitCache
	}
	return 0
}

func (x *PrefetchStats) GetReadTimeElapsedUs() uint64 {
	if x != nil {
		return x.ReadTimeElapsedUs
	}
	return 0
}

func (x *PrefetchStats) GetIoCount() uint64 {
	if x != nil {
		return x.IoCount
	}
	return 0
}

func (x *PrefetchStats) GetIoBytes() uint64 {
	if x != nil {
		return x.IoBytes
	}
	return 0
}

func (x *PrefetchStats) GetIoTimeElapsedUs() uint64 {
	if x != nil {
		return x.IoTimeElapsedUs
	}
	return 0
}

type FileInputStreamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSystemType FileSystemType `protobuf:"varint,1,opt,name=file_system_type,json=fileSystemType,proto3,enum=util.FileSystemType" json:"file_system_type,omitempty"`
	// Types that are assignable to FileInputStreamStats:
	//
	//	*FileInputStreamStats_CacheFileInputStreamStats
	FileInputStreamStats isFileInputStreamStats_FileInputStreamStats `protobuf_oneof:"file_input_stream_stats"`
}

func (x *FileInputStreamStats) Reset() {
	*x = FileInputStreamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInputStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInputStreamStats) ProtoMessage() {}

func (x *FileInputStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInputStreamStats.ProtoReflect.Descriptor instead.
func (*FileInputStreamStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{72}
}

func (x *FileInputStreamStats) GetFileSystemType() FileSystemType {
	if x != nil {
		return x.FileSystemType
	}
	return FileSystemType_LOCAL
}

func (m *FileInputStreamStats) GetFileInputStreamStats() isFileInputStreamStats_FileInputStreamStats {
	if m != nil {
		return m.FileInputStreamStats
	}
	return nil
}

func (x *FileInputStreamStats) GetCacheFileInputStreamStats() *CacheFileInputStreamStats {
	if x, ok := x.GetFileInputStreamStats().(*FileInputStreamStats_CacheFileInputStreamStats); ok {
		return x.CacheFileInputStreamStats
	}
	return nil
}

type isFileInputStreamStats_FileInputStreamStats interface {
	isFileInputStreamStats_FileInputStreamStats()
}

type FileInputStreamStats_CacheFileInputStreamStats struct {
	CacheFileInputStreamStats *CacheFileInputStreamStats `protobuf:"bytes,4,opt,name=cache_file_input_stream_stats,json=cacheFileInputStreamStats,proto3,oneof"`
}

func (*FileInputStreamStats_CacheFileInputStreamStats) isFileInputStreamStats_FileInputStreamStats() {
}

type CacheFileInputStreamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheHit                bool   `protobuf:"varint,1,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	ShortCircuitStreamType  string `protobuf:"bytes,2,opt,name=short_circuit_stream_type,json=shortCircuitStreamType,proto3" json:"short_circuit_stream_type,omitempty"`
	SegmentMode             bool   `protobuf:"varint,3,opt,name=segment_mode,json=segmentMode,proto3" json:"segment_mode,omitempty"`
	NonReadTimeElapsedUs    uint64 `protobuf:"varint,4,opt,name=non_read_time_elapsed_us,json=nonReadTimeElapsedUs,proto3" json:"non_read_time_elapsed_us,omitempty"`
	RpcReadBytes            uint64 `protobuf:"varint,5,opt,name=rpc_read_bytes,json=rpcReadBytes,proto3" json:"rpc_read_bytes,omitempty"`
	RpcReadTimeElapsedUs    uint64 `protobuf:"varint,6,opt,name=rpc_read_time_elapsed_us,json=rpcReadTimeElapsedUs,proto3" json:"rpc_read_time_elapsed_us,omitempty"`
	DirectReadBytes         uint64 `protobuf:"varint,7,opt,name=direct_read_bytes,json=directReadBytes,proto3" json:"direct_read_bytes,omitempty"`
	DirectReadTimeElapsedUs uint64 `protobuf:"varint,8,opt,name=direct_read_time_elapsed_us,json=directReadTimeElapsedUs,proto3" json:"direct_read_time_elapsed_us,omitempty"`
}

func (x *CacheFileInputStreamStats) Reset() {
	*x = CacheFileInputStreamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheFileInputStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheFileInputStreamStats) ProtoMessage() {}

func (x *CacheFileInputStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheFileInputStreamStats.ProtoReflect.Descriptor instead.
func (*CacheFileInputStreamStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{73}
}

func (x *CacheFileInputStreamStats) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *CacheFileInputStreamStats) GetShortCircuitStreamType() string {
	if x != nil {
		return x.ShortCircuitStreamType
	}
	return ""
}

func (x *CacheFileInputStreamStats) GetSegmentMode() bool {
	if x != nil {
		return x.SegmentMode
	}
	return false
}

func (x *CacheFileInputStreamStats) GetNonReadTimeElapsedUs() uint64 {
	if x != nil {
		return x.NonReadTimeElapsedUs
	}
	return 0
}

func (x *CacheFileInputStreamStats) GetRpcReadBytes() uint64 {
	if x != nil {
		return x.RpcReadBytes
	}
	return 0
}

func (x *CacheFileInputStreamStats) GetRpcReadTimeElapsedUs() uint64 {
	if x != nil {
		return x.RpcReadTimeElapsedUs
	}
	return 0
}

func (x *CacheFileInputStreamStats) GetDirectReadBytes() uint64 {
	if x != nil {
		return x.DirectReadBytes
	}
	return 0
}

func (x *CacheFileInputStreamStats) GetDirectReadTimeElapsedUs() uint64 {
	if x != nil {
		return x.DirectReadTimeElapsedUs
	}
	return 0
}

type TextInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingFieldWarnedCount uint64 `protobuf:"varint,1,opt,name=missing_field_warned_count,json=missingFieldWarnedCount,proto3" json:"missing_field_warned_count,omitempty"`
	ExtraFieldWarnedCount   uint64 `protobuf:"varint,2,opt,name=extra_field_warned_count,json=extraFieldWarnedCount,proto3" json:"extra_field_warned_count,omitempty"`
}

func (x *TextInputStats) Reset() {
	*x = TextInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInputStats) ProtoMessage() {}

func (x *TextInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInputStats.ProtoReflect.Descriptor instead.
func (*TextInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{74}
}

func (x *TextInputStats) GetMissingFieldWarnedCount() uint64 {
	if x != nil {
		return x.MissingFieldWarnedCount
	}
	return 0
}

func (x *TextInputStats) GetExtraFieldWarnedCount() uint64 {
	if x != nil {
		return x.ExtraFieldWarnedCount
	}
	return 0
}

type MemoryTableInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchCount uint64 `protobuf:"varint,1,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *MemoryTableInputStats) Reset() {
	*x = MemoryTableInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTableInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTableInputStats) ProtoMessage() {}

func (x *MemoryTableInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTableInputStats.ProtoReflect.Descriptor instead.
func (*MemoryTableInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{75}
}

func (x *MemoryTableInputStats) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type ParquetInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchCount               uint64 `protobuf:"varint,1,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
	DecompressionLatencyNs   uint64 `protobuf:"varint,2,opt,name=decompression_latency_ns,json=decompressionLatencyNs,proto3" json:"decompression_latency_ns,omitempty"`
	LevelsDecodingLatencyNs  uint64 `protobuf:"varint,3,opt,name=levels_decoding_latency_ns,json=levelsDecodingLatencyNs,proto3" json:"levels_decoding_latency_ns,omitempty"`
	DataLoadingLatencyNs     uint64 `protobuf:"varint,4,opt,name=data_loading_latency_ns,json=dataLoadingLatencyNs,proto3" json:"data_loading_latency_ns,omitempty"`
	PpdInclusiveLatencyNs    uint64 `protobuf:"varint,5,opt,name=ppd_inclusive_latency_ns,json=ppdInclusiveLatencyNs,proto3" json:"ppd_inclusive_latency_ns,omitempty"`
	ReaderInclusiveLatencyNs uint64 `protobuf:"varint,6,opt,name=reader_inclusive_latency_ns,json=readerInclusiveLatencyNs,proto3" json:"reader_inclusive_latency_ns,omitempty"`
	RequestedRowCount        uint64 `protobuf:"varint,7,opt,name=requested_row_count,json=requestedRowCount,proto3" json:"requested_row_count,omitempty"`
	ReadRowCount             uint64 `protobuf:"varint,8,opt,name=read_row_count,json=readRowCount,proto3" json:"read_row_count,omitempty"`
}

func (x *ParquetInputStats) Reset() {
	*x = ParquetInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetInputStats) ProtoMessage() {}

func (x *ParquetInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetInputStats.ProtoReflect.Descriptor instead.
func (*ParquetInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{76}
}

func (x *ParquetInputStats) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

func (x *ParquetInputStats) GetDecompressionLatencyNs() uint64 {
	if x != nil {
		return x.DecompressionLatencyNs
	}
	return 0
}

func (x *ParquetInputStats) GetLevelsDecodingLatencyNs() uint64 {
	if x != nil {
		return x.LevelsDecodingLatencyNs
	}
	return 0
}

func (x *ParquetInputStats) GetDataLoadingLatencyNs() uint64 {
	if x != nil {
		return x.DataLoadingLatencyNs
	}
	return 0
}

func (x *ParquetInputStats) GetPpdInclusiveLatencyNs() uint64 {
	if x != nil {
		return x.PpdInclusiveLatencyNs
	}
	return 0
}

func (x *ParquetInputStats) GetReaderInclusiveLatencyNs() uint64 {
	if x != nil {
		return x.ReaderInclusiveLatencyNs
	}
	return 0
}

func (x *ParquetInputStats) GetRequestedRowCount() uint64 {
	if x != nil {
		return x.RequestedRowCount
	}
	return 0
}

func (x *ParquetInputStats) GetReadRowCount() uint64 {
	if x != nil {
		return x.ReadRowCount
	}
	return 0
}

type OrcInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchCount uint64 `protobuf:"varint,1,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *OrcInputStats) Reset() {
	*x = OrcInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrcInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrcInputStats) ProtoMessage() {}

func (x *OrcInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrcInputStats.ProtoReflect.Descriptor instead.
func (*OrcInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{77}
}

func (x *OrcInputStats) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type CSVInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSVInputStats) Reset() {
	*x = CSVInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVInputStats) ProtoMessage() {}

func (x *CSVInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVInputStats.ProtoReflect.Descriptor instead.
func (*CSVInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{78}
}

type DummyInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchCount uint64 `protobuf:"varint,1,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *DummyInputStats) Reset() {
	*x = DummyInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyInputStats) ProtoMessage() {}

func (x *DummyInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyInputStats.ProtoReflect.Descriptor instead.
func (*DummyInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{79}
}

func (x *DummyInputStats) GetBatchCount() uint64 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type AvroInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvroInputStats) Reset() {
	*x = AvroInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvroInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroInputStats) ProtoMessage() {}

func (x *AvroInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroInputStats.ProtoReflect.Descriptor instead.
func (*AvroInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{80}
}

type ArrowInputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArrowInputStats) Reset() {
	*x = ArrowInputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowInputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowInputStats) ProtoMessage() {}

func (x *ArrowInputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowInputStats.ProtoReflect.Descriptor instead.
func (*ArrowInputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{81}
}

type DataOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawOutputByteCount uint64 `protobuf:"varint,1,opt,name=raw_output_byte_count,json=rawOutputByteCount,proto3" json:"raw_output_byte_count,omitempty"`
	RowCount           uint64 `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Types that are assignable to OutputStats:
	//
	//	*DataOutputStats_FileOutputStats
	//	*DataOutputStats_MultipleFileOutputStats
	OutputStats isDataOutputStats_OutputStats `protobuf_oneof:"outputStats"`
}

func (x *DataOutputStats) Reset() {
	*x = DataOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataOutputStats) ProtoMessage() {}

func (x *DataOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataOutputStats.ProtoReflect.Descriptor instead.
func (*DataOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{82}
}

func (x *DataOutputStats) GetRawOutputByteCount() uint64 {
	if x != nil {
		return x.RawOutputByteCount
	}
	return 0
}

func (x *DataOutputStats) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (m *DataOutputStats) GetOutputStats() isDataOutputStats_OutputStats {
	if m != nil {
		return m.OutputStats
	}
	return nil
}

func (x *DataOutputStats) GetFileOutputStats() *FileOutputStats {
	if x, ok := x.GetOutputStats().(*DataOutputStats_FileOutputStats); ok {
		return x.FileOutputStats
	}
	return nil
}

func (x *DataOutputStats) GetMultipleFileOutputStats() *MultipleFileOutputStats {
	if x, ok := x.GetOutputStats().(*DataOutputStats_MultipleFileOutputStats); ok {
		return x.MultipleFileOutputStats
	}
	return nil
}

type isDataOutputStats_OutputStats interface {
	isDataOutputStats_OutputStats()
}

type DataOutputStats_FileOutputStats struct {
	FileOutputStats *FileOutputStats `protobuf:"bytes,3,opt,name=file_output_stats,json=fileOutputStats,proto3,oneof"`
}

type DataOutputStats_MultipleFileOutputStats struct {
	MultipleFileOutputStats *MultipleFileOutputStats `protobuf:"bytes,4,opt,name=multiple_file_output_stats,json=multipleFileOutputStats,proto3,oneof"`
}

func (*DataOutputStats_FileOutputStats) isDataOutputStats_OutputStats() {}

func (*DataOutputStats_MultipleFileOutputStats) isDataOutputStats_OutputStats() {}

type FileOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileMetaData *FileMetaData `protobuf:"bytes,1,opt,name=file_meta_data,json=fileMetaData,proto3" json:"file_meta_data,omitempty"`
	// Types that are assignable to FileFormatOutputStats:
	//
	//	*FileOutputStats_TextOutputStats
	//	*FileOutputStats_ParquetOutputStats
	//	*FileOutputStats_OrcOutputStats
	//	*FileOutputStats_AvroOutputStats
	//	*FileOutputStats_ArrowOutputStats
	FileFormatOutputStats isFileOutputStats_FileFormatOutputStats `protobuf_oneof:"file_format_output_stats"`
	IoStats               *FileIOOutputStats                      `protobuf:"bytes,4,opt,name=io_stats,json=ioStats,proto3" json:"io_stats,omitempty"`
	DeleteFileMetas       []*FileMetaData                         `protobuf:"bytes,5,rep,name=delete_file_metas,json=deleteFileMetas,proto3" json:"delete_file_metas,omitempty"`
}

func (x *FileOutputStats) Reset() {
	*x = FileOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOutputStats) ProtoMessage() {}

func (x *FileOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOutputStats.ProtoReflect.Descriptor instead.
func (*FileOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{83}
}

func (x *FileOutputStats) GetFileMetaData() *FileMetaData {
	if x != nil {
		return x.FileMetaData
	}
	return nil
}

func (m *FileOutputStats) GetFileFormatOutputStats() isFileOutputStats_FileFormatOutputStats {
	if m != nil {
		return m.FileFormatOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetTextOutputStats() *TextOutputStats {
	if x, ok := x.GetFileFormatOutputStats().(*FileOutputStats_TextOutputStats); ok {
		return x.TextOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetParquetOutputStats() *ParquetOutputStats {
	if x, ok := x.GetFileFormatOutputStats().(*FileOutputStats_ParquetOutputStats); ok {
		return x.ParquetOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetOrcOutputStats() *OrcOutputStats {
	if x, ok := x.GetFileFormatOutputStats().(*FileOutputStats_OrcOutputStats); ok {
		return x.OrcOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetAvroOutputStats() *AvroOutputStats {
	if x, ok := x.GetFileFormatOutputStats().(*FileOutputStats_AvroOutputStats); ok {
		return x.AvroOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetArrowOutputStats() *ArrowOutputStats {
	if x, ok := x.GetFileFormatOutputStats().(*FileOutputStats_ArrowOutputStats); ok {
		return x.ArrowOutputStats
	}
	return nil
}

func (x *FileOutputStats) GetIoStats() *FileIOOutputStats {
	if x != nil {
		return x.IoStats
	}
	return nil
}

func (x *FileOutputStats) GetDeleteFileMetas() []*FileMetaData {
	if x != nil {
		return x.DeleteFileMetas
	}
	return nil
}

type isFileOutputStats_FileFormatOutputStats interface {
	isFileOutputStats_FileFormatOutputStats()
}

type FileOutputStats_TextOutputStats struct {
	TextOutputStats *TextOutputStats `protobuf:"bytes,2,opt,name=text_output_stats,json=textOutputStats,proto3,oneof"`
}

type FileOutputStats_ParquetOutputStats struct {
	ParquetOutputStats *ParquetOutputStats `protobuf:"bytes,3,opt,name=parquet_output_stats,json=parquetOutputStats,proto3,oneof"`
}

type FileOutputStats_OrcOutputStats struct {
	OrcOutputStats *OrcOutputStats `protobuf:"bytes,6,opt,name=orc_output_stats,json=orcOutputStats,proto3,oneof"`
}

type FileOutputStats_AvroOutputStats struct {
	AvroOutputStats *AvroOutputStats `protobuf:"bytes,7,opt,name=avro_output_stats,json=avroOutputStats,proto3,oneof"`
}

type FileOutputStats_ArrowOutputStats struct {
	ArrowOutputStats *ArrowOutputStats `protobuf:"bytes,8,opt,name=arrow_output_stats,json=arrowOutputStats,proto3,oneof"`
}

func (*FileOutputStats_TextOutputStats) isFileOutputStats_FileFormatOutputStats() {}

func (*FileOutputStats_ParquetOutputStats) isFileOutputStats_FileFormatOutputStats() {}

func (*FileOutputStats_OrcOutputStats) isFileOutputStats_FileFormatOutputStats() {}

func (*FileOutputStats_AvroOutputStats) isFileOutputStats_FileFormatOutputStats() {}

func (*FileOutputStats_ArrowOutputStats) isFileOutputStats_FileFormatOutputStats() {}

type MultipleFileOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileOutputStats []*DataOutputStats `protobuf:"bytes,1,rep,name=file_output_stats,json=fileOutputStats,proto3" json:"file_output_stats,omitempty"`
}

func (x *MultipleFileOutputStats) Reset() {
	*x = MultipleFileOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleFileOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleFileOutputStats) ProtoMessage() {}

func (x *MultipleFileOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleFileOutputStats.ProtoReflect.Descriptor instead.
func (*MultipleFileOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{84}
}

func (x *MultipleFileOutputStats) GetFileOutputStats() []*DataOutputStats {
	if x != nil {
		return x.FileOutputStats
	}
	return nil
}

type TextOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TextOutputStats) Reset() {
	*x = TextOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextOutputStats) ProtoMessage() {}

func (x *TextOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextOutputStats.ProtoReflect.Descriptor instead.
func (*TextOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{85}
}

type ParquetOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowCastingTime uint64 `protobuf:"varint,1,opt,name=arrow_casting_time,json=arrowCastingTime,proto3" json:"arrow_casting_time,omitempty"`
	PageCompressTime uint64 `protobuf:"varint,2,opt,name=page_compress_time,json=pageCompressTime,proto3" json:"page_compress_time,omitempty"`
	EncodingTime     uint64 `protobuf:"varint,3,opt,name=encoding_time,json=encodingTime,proto3" json:"encoding_time,omitempty"`
}

func (x *ParquetOutputStats) Reset() {
	*x = ParquetOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetOutputStats) ProtoMessage() {}

func (x *ParquetOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetOutputStats.ProtoReflect.Descriptor instead.
func (*ParquetOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{86}
}

func (x *ParquetOutputStats) GetArrowCastingTime() uint64 {
	if x != nil {
		return x.ArrowCastingTime
	}
	return 0
}

func (x *ParquetOutputStats) GetPageCompressTime() uint64 {
	if x != nil {
		return x.PageCompressTime
	}
	return 0
}

func (x *ParquetOutputStats) GetEncodingTime() uint64 {
	if x != nil {
		return x.EncodingTime
	}
	return 0
}

type OrcOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrcOutputStats) Reset() {
	*x = OrcOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrcOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrcOutputStats) ProtoMessage() {}

func (x *OrcOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrcOutputStats.ProtoReflect.Descriptor instead.
func (*OrcOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{87}
}

type AvroOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvroOutputStats) Reset() {
	*x = AvroOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvroOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroOutputStats) ProtoMessage() {}

func (x *AvroOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroOutputStats.ProtoReflect.Descriptor instead.
func (*AvroOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{88}
}

type ArrowOutputStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArrowOutputStats) Reset() {
	*x = ArrowOutputStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowOutputStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowOutputStats) ProtoMessage() {}

func (x *ArrowOutputStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowOutputStats.ProtoReflect.Descriptor instead.
func (*ArrowOutputStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{89}
}

type TableSinkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputStats *DataOutputStats `protobuf:"bytes,1,opt,name=output_stats,json=outputStats,proto3" json:"output_stats,omitempty"`
}

func (x *TableSinkStats) Reset() {
	*x = TableSinkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSinkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSinkStats) ProtoMessage() {}

func (x *TableSinkStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSinkStats.ProtoReflect.Descriptor instead.
func (*TableSinkStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{90}
}

func (x *TableSinkStats) GetOutputStats() *DataOutputStats {
	if x != nil {
		return x.OutputStats
	}
	return nil
}

type SpillStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressedSize uint64 `protobuf:"varint,1,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	RawSize        uint64 `protobuf:"varint,2,opt,name=raw_size,json=rawSize,proto3" json:"raw_size,omitempty"`
	SpillCount     uint64 `protobuf:"varint,3,opt,name=spill_count,json=spillCount,proto3" json:"spill_count,omitempty"`
	RowCount       uint64 `protobuf:"varint,4,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (x *SpillStats) Reset() {
	*x = SpillStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_operator_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpillStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpillStats) ProtoMessage() {}

func (x *SpillStats) ProtoReflect() protoreflect.Message {
	mi := &file_util_operator_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpillStats.ProtoReflect.Descriptor instead.
func (*SpillStats) Descriptor() ([]byte, []int) {
	return file_util_operator_proto_rawDescGZIP(), []int{91}
}

func (x *SpillStats) GetCompressedSize() uint64 {
	if x != nil {
		return x.CompressedSize
	}
	return 0
}

func (x *SpillStats) GetRawSize() uint64 {
	if x != nil {
		return x.RawSize
	}
	return 0
}

func (x *SpillStats) GetSpillCount() uint64 {
	if x != nil {
		return x.SpillCount
	}
	return 0
}

func (x *SpillStats) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

var File_util_operator_proto protoreflect.FileDescriptor

var file_util_operator_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x1a, 0x15, 0x75, 0x74, 0x69,
	0x6c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x74, 0x69,
	0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0xfd, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x67,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x41, 0x67, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x67, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x67, 0x67, 0x12,
	0x34, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a,
	0x0c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x09,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x36, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09,
	0x61, 0x67, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x67, 0x67, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x65,
	0x61, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x65,
	0x61, 0x66, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0x95, 0x03, 0x0a, 0x0d, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41,
	0x67, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x6c, 0x0a,
	0x0e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x11,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x4a,
	0x6f, 0x69, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x69, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x68, 0x69, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x08, 0x54, 0x72, 0x65,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x72,
	0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x0c,
	0x54, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x68, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x68, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x68, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x6c, 0x68, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x68, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x72, 0x68, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x4a, 0x6f,
	0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0xff, 0x0d, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x49, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x69,
	0x6e, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xff, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x09,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x35, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x5e, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x63, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2e, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x35, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x0c, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x57, 0x53,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x22, 0x69, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x35, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x22, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c,
	0x63, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x6e,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04,
	0x6c, 0x61, 0x7a, 0x79, 0x12, 0x4e, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xed, 0x01,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x34, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a,
	0x06, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x35, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x08, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x38, 0x0a,
	0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x43, 0x6f, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xd6, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xbb, 0x06, 0x0a, 0x0d, 0x48, 0x61, 0x73,
	0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x13, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x11, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e,
	0x75, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75,
	0x6d, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x3c, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3c,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x1a,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x17,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x12, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x3e, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x16, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x14, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x14, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xeb,
	0x03, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x15, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x42, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x10, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x70,
	0x69, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x10, 0x0a, 0x0e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x0f,
	0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x0d, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x40,
	0x0a, 0x0b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x0d, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x14, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x15, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xa9,
	0x03, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x11, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x64,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x3a, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0b, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x12, 0x73, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x70,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x93, 0x05, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0d, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x44, 0x6f, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x44, 0x6f, 0x70, 0x12,
	0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a,
	0x1a, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x34, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x34, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x47, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f,
	0x4d, 0x65, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0b,
	0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x41, 0x49, 0x52, 0x5f, 0x57, 0x49, 0x5a, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49,
	0x4e, 0x10, 0x08, 0x22, 0xbf, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e,
	0x6b, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6e, 0x6f, 0x70, 0x22, 0xbf, 0x02, 0x0a, 0x0c, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd3,
	0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x22, 0x6f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x6f,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0xa0, 0x06, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x4b, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f,
	0x6f, 0x72, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4f, 0x72, 0x63,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x72,
	0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x75,
	0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x73, 0x76, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x43, 0x53, 0x56, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x73, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x10, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x41, 0x76, 0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x76, 0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x07, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x4f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x55, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x4f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69,
	0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x55, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x1d,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x19, 0x63, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x96, 0x03, 0x0a,
	0x19, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x70, 0x63, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x70, 0x63, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x55, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x38,
	0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x70, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x0d, 0x4f,
	0x72, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x43, 0x53, 0x56, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x32,
	0x0a, 0x0f, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x76, 0x72, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72,
	0x61, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x61, 0x77, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x5c, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xbd, 0x04,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x11, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x10, 0x6f, 0x72, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4f, 0x72, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x6f, 0x72, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x11, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x41, 0x76, 0x72, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x76, 0x72, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x4f, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x42, 0x1a, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5c, 0x0a,
	0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x54,
	0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x4f, 0x72, 0x63, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x76, 0x72, 0x6f,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x4a, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a,
	0x53, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x4e, 0x0a, 0x08,
	0x41, 0x67, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x32, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x08,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x10, 0x05,
	0x2a, 0x52, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x46, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x46, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x46, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x08, 0x4c, 0x61, 0x7a, 0x79, 0x45, 0x76, 0x61, 0x6c,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x5a, 0x59, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x41, 0x5a, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f,
	0x4c, 0x41, 0x5a, 0x59, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74,
	0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2f,
	0x75, 0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_operator_proto_rawDescOnce sync.Once
	file_util_operator_proto_rawDescData = file_util_operator_proto_rawDesc
)

func file_util_operator_proto_rawDescGZIP() []byte {
	file_util_operator_proto_rawDescOnce.Do(func() {
		file_util_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_operator_proto_rawDescData)
	})
	return file_util_operator_proto_rawDescData
}

var file_util_operator_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_util_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_util_operator_proto_goTypes = []interface{}{
	(AggStage)(0),                     // 0: util.AggStage
	(JoinType)(0),                     // 1: util.JoinType
	(DynamicFilterType)(0),            // 2: util.DynamicFilterType
	(LazyEval)(0),                     // 3: util.LazyEval
	(SetOpType)(0),                    // 4: util.SetOpType
	(WindowSpec_BoundaryType)(0),      // 5: util.WindowSpec.BoundaryType
	(ShuffleType_Type)(0),             // 6: util.ShuffleType.Type
	(*ColumnMapping)(nil),             // 7: util.ColumnMapping
	(*Operator)(nil),                  // 8: util.Operator
	(*AggregateCall)(nil),             // 9: util.AggregateCall
	(*LogicalAggregate)(nil),          // 10: util.LogicalAggregate
	(*HashAggregate)(nil),             // 11: util.HashAggregate
	(*SortedAggregate)(nil),           // 12: util.SortedAggregate
	(*AggregatePhase)(nil),            // 13: util.AggregatePhase
	(*DynamicFilterInfo)(nil),         // 14: util.DynamicFilterInfo
	(*JoinHintInfo)(nil),              // 15: util.JoinHintInfo
	(*TreeJoin)(nil),                  // 16: util.TreeJoin
	(*TreeJoinLeaf)(nil),              // 17: util.TreeJoinLeaf
	(*LogicalJoin)(nil),               // 18: util.LogicalJoin
	(*SortMergeJoin)(nil),             // 19: util.SortMergeJoin
	(*HashJoin)(nil),                  // 20: util.HashJoin
	(*Timing)(nil),                    // 21: util.Timing
	(*OperatorStats)(nil),             // 22: util.OperatorStats
	(*OrderByDesc)(nil),               // 23: util.OrderByDesc
	(*MergeSort)(nil),                 // 24: util.MergeSort
	(*UnionAll)(nil),                  // 25: util.UnionAll
	(*Buffer)(nil),                    // 26: util.Buffer
	(*PartialWindowFilter)(nil),       // 27: util.PartialWindowFilter
	(*Window)(nil),                    // 28: util.Window
	(*WindowGroup)(nil),               // 29: util.WindowGroup
	(*WindowCall)(nil),                // 30: util.WindowCall
	(*WindowSpec)(nil),                // 31: util.WindowSpec
	(*WindowBoundary)(nil),            // 32: util.WindowBoundary
	(*LateralView)(nil),               // 33: util.LateralView
	(*TableFunctionCall)(nil),         // 34: util.TableFunctionCall
	(*Spool)(nil),                     // 35: util.Spool
	(*Calc)(nil),                      // 36: util.Calc
	(*LogicalCalc)(nil),               // 37: util.LogicalCalc
	(*Expand)(nil),                    // 38: util.Expand
	(*GroupingKeySet)(nil),            // 39: util.GroupingKeySet
	(*Grouping)(nil),                  // 40: util.Grouping
	(*CalcStats)(nil),                 // 41: util.CalcStats
	(*HashTableStats)(nil),            // 42: util.HashTableStats
	(*HashJoinStats)(nil),             // 43: util.HashJoinStats
	(*MergeJoinStats)(nil),            // 44: util.MergeJoinStats
	(*HashAggregateStats)(nil),        // 45: util.HashAggregateStats
	(*MergeAggregateStats)(nil),       // 46: util.MergeAggregateStats
	(*LocalSortStats)(nil),            // 47: util.LocalSortStats
	(*MergeSortStats)(nil),            // 48: util.MergeSortStats
	(*UnionAllStats)(nil),             // 49: util.UnionAllStats
	(*ValuesStats)(nil),               // 50: util.ValuesStats
	(*BufferStats)(nil),               // 51: util.BufferStats
	(*WindowStats)(nil),               // 52: util.WindowStats
	(*PartialWindowStats)(nil),        // 53: util.PartialWindowStats
	(*ExpandStats)(nil),               // 54: util.ExpandStats
	(*LateralViewStats)(nil),          // 55: util.LateralViewStats
	(*ExchangeSinkStats)(nil),         // 56: util.ExchangeSinkStats
	(*ExchangeSourceStats)(nil),       // 57: util.ExchangeSourceStats
	(*Table)(nil),                     // 58: util.Table
	(*Values)(nil),                    // 59: util.Values
	(*SortKeyDesc)(nil),               // 60: util.SortKeyDesc
	(*TableScan)(nil),                 // 61: util.TableScan
	(*TableScanStats)(nil),            // 62: util.TableScanStats
	(*IncrementalTableProperty)(nil),  // 63: util.IncrementalTableProperty
	(*ShuffleType)(nil),               // 64: util.ShuffleType
	(*TableSink)(nil),                 // 65: util.TableSink
	(*ShuffleWrite)(nil),              // 66: util.ShuffleWrite
	(*ShuffleRead)(nil),               // 67: util.ShuffleRead
	(*LocalExchange)(nil),             // 68: util.LocalExchange
	(*LocalSort)(nil),                 // 69: util.LocalSort
	(*LogicalSort)(nil),               // 70: util.LogicalSort
	(*SetOperator)(nil),               // 71: util.SetOperator
	(*DataInputStats)(nil),            // 72: util.DataInputStats
	(*FileRangesInputStats)(nil),      // 73: util.FileRangesInputStats
	(*FileInputStats)(nil),            // 74: util.FileInputStats
	(*DeltaFileInputStats)(nil),       // 75: util.DeltaFileInputStats
	(*FileIOInputStats)(nil),          // 76: util.FileIOInputStats
	(*FileIOOutputStats)(nil),         // 77: util.FileIOOutputStats
	(*PrefetchStats)(nil),             // 78: util.PrefetchStats
	(*FileInputStreamStats)(nil),      // 79: util.FileInputStreamStats
	(*CacheFileInputStreamStats)(nil), // 80: util.CacheFileInputStreamStats
	(*TextInputStats)(nil),            // 81: util.TextInputStats
	(*MemoryTableInputStats)(nil),     // 82: util.MemoryTableInputStats
	(*ParquetInputStats)(nil),         // 83: util.ParquetInputStats
	(*OrcInputStats)(nil),             // 84: util.OrcInputStats
	(*CSVInputStats)(nil),             // 85: util.CSVInputStats
	(*DummyInputStats)(nil),           // 86: util.DummyInputStats
	(*AvroInputStats)(nil),            // 87: util.AvroInputStats
	(*ArrowInputStats)(nil),           // 88: util.ArrowInputStats
	(*DataOutputStats)(nil),           // 89: util.DataOutputStats
	(*FileOutputStats)(nil),           // 90: util.FileOutputStats
	(*MultipleFileOutputStats)(nil),   // 91: util.MultipleFileOutputStats
	(*TextOutputStats)(nil),           // 92: util.TextOutputStats
	(*ParquetOutputStats)(nil),        // 93: util.ParquetOutputStats
	(*OrcOutputStats)(nil),            // 94: util.OrcOutputStats
	(*AvroOutputStats)(nil),           // 95: util.AvroOutputStats
	(*ArrowOutputStats)(nil),          // 96: util.ArrowOutputStats
	(*TableSinkStats)(nil),            // 97: util.TableSinkStats
	(*SpillStats)(nil),                // 98: util.SpillStats
	nil,                               // 99: util.TableScan.PropsEntry
	(*DataType)(nil),                  // 100: util.DataType
	(*ScalarExpression)(nil),          // 101: util.ScalarExpression
	(*Reference)(nil),                 // 102: util.Reference
	(Order)(0),                        // 103: util.Order
	(*Constant)(nil),                  // 104: util.Constant
	(*TableMeta)(nil),                 // 105: util.TableMeta
	(*VirtualValueInfo)(nil),          // 106: util.VirtualValueInfo
	(HashBucketType)(0),               // 107: util.HashBucketType
	(FileFormatType)(0),               // 108: util.FileFormatType
	(*FileRange)(nil),                 // 109: util.FileRange
	(FileSystemType)(0),               // 110: util.FileSystemType
	(*FileMetaData)(nil),              // 111: util.FileMetaData
}
var file_util_operator_proto_depIdxs = []int32{
	100, // 0: util.Operator.schema:type_name -> util.DataType
	7,   // 1: util.Operator.columnMappings:type_name -> util.ColumnMapping
	61,  // 2: util.Operator.table_scan:type_name -> util.TableScan
	65,  // 3: util.Operator.table_sink:type_name -> util.TableSink
	36,  // 4: util.Operator.calc:type_name -> util.Calc
	24,  // 5: util.Operator.merge_sort:type_name -> util.MergeSort
	66,  // 6: util.Operator.shuffle_write:type_name -> util.ShuffleWrite
	67,  // 7: util.Operator.shuffle_read:type_name -> util.ShuffleRead
	59,  // 8: util.Operator.values:type_name -> util.Values
	11,  // 9: util.Operator.hash_agg:type_name -> util.HashAggregate
	12,  // 10: util.Operator.sorted_agg:type_name -> util.SortedAggregate
	19,  // 11: util.Operator.merge_join:type_name -> util.SortMergeJoin
	20,  // 12: util.Operator.hash_join:type_name -> util.HashJoin
	69,  // 13: util.Operator.local_sort:type_name -> util.LocalSort
	25,  // 14: util.Operator.union_all:type_name -> util.UnionAll
	26,  // 15: util.Operator.buffer:type_name -> util.Buffer
	28,  // 16: util.Operator.window:type_name -> util.Window
	38,  // 17: util.Operator.expand:type_name -> util.Expand
	33,  // 18: util.Operator.lateral_view:type_name -> util.LateralView
	40,  // 19: util.Operator.grouping:type_name -> util.Grouping
	18,  // 20: util.Operator.join:type_name -> util.LogicalJoin
	10,  // 21: util.Operator.aggregate:type_name -> util.LogicalAggregate
	37,  // 22: util.Operator.logical_calc:type_name -> util.LogicalCalc
	70,  // 23: util.Operator.logical_sort:type_name -> util.LogicalSort
	71,  // 24: util.Operator.set_operator:type_name -> util.SetOperator
	13,  // 25: util.Operator.agg_phase:type_name -> util.AggregatePhase
	35,  // 26: util.Operator.spool:type_name -> util.Spool
	27,  // 27: util.Operator.partial_window_filter:type_name -> util.PartialWindowFilter
	16,  // 28: util.Operator.tree_join:type_name -> util.TreeJoin
	17,  // 29: util.Operator.tree_join_leaf:type_name -> util.TreeJoinLeaf
	68,  // 30: util.Operator.local_exchange:type_name -> util.LocalExchange
	101, // 31: util.AggregateCall.function:type_name -> util.ScalarExpression
	0,   // 32: util.AggregateCall.stage:type_name -> util.AggStage
	23,  // 33: util.AggregateCall.orders:type_name -> util.OrderByDesc
	102, // 34: util.AggregateCall.filter:type_name -> util.Reference
	100, // 35: util.AggregateCall.initial_Type:type_name -> util.DataType
	100, // 36: util.AggregateCall.partial_Type:type_name -> util.DataType
	100, // 37: util.AggregateCall.output_Type:type_name -> util.DataType
	102, // 38: util.LogicalAggregate.keys:type_name -> util.Reference
	9,   // 39: util.LogicalAggregate.aggregate_calls:type_name -> util.AggregateCall
	10,  // 40: util.HashAggregate.aggregate:type_name -> util.LogicalAggregate
	0,   // 41: util.HashAggregate.stage:type_name -> util.AggStage
	10,  // 42: util.SortedAggregate.aggregate:type_name -> util.LogicalAggregate
	0,   // 43: util.SortedAggregate.stage:type_name -> util.AggStage
	23,  // 44: util.SortedAggregate.orders:type_name -> util.OrderByDesc
	10,  // 45: util.AggregatePhase.aggregate:type_name -> util.LogicalAggregate
	0,   // 46: util.AggregatePhase.stage:type_name -> util.AggStage
	2,   // 47: util.DynamicFilterInfo.type:type_name -> util.DynamicFilterType
	8,   // 48: util.TreeJoin.root_operators:type_name -> util.Operator
	1,   // 49: util.LogicalJoin.type:type_name -> util.JoinType
	101, // 50: util.LogicalJoin.condition:type_name -> util.ScalarExpression
	14,  // 51: util.LogicalJoin.dynamic_filter:type_name -> util.DynamicFilterInfo
	15,  // 52: util.LogicalJoin.hintInfo:type_name -> util.JoinHintInfo
	18,  // 53: util.SortMergeJoin.join:type_name -> util.LogicalJoin
	23,  // 54: util.SortMergeJoin.lhs_orders:type_name -> util.OrderByDesc
	23,  // 55: util.SortMergeJoin.rhs_orders:type_name -> util.OrderByDesc
	18,  // 56: util.HashJoin.join:type_name -> util.LogicalJoin
	21,  // 57: util.OperatorStats.timing:type_name -> util.Timing
	62,  // 58: util.OperatorStats.table_scan_stats:type_name -> util.TableScanStats
	97,  // 59: util.OperatorStats.table_sink_stats:type_name -> util.TableSinkStats
	41,  // 60: util.OperatorStats.calc_stats:type_name -> util.CalcStats
	43,  // 61: util.OperatorStats.hash_join_stats:type_name -> util.HashJoinStats
	44,  // 62: util.OperatorStats.merge_join_stats:type_name -> util.MergeJoinStats
	45,  // 63: util.OperatorStats.hash_aggregate_stats:type_name -> util.HashAggregateStats
	46,  // 64: util.OperatorStats.merge_aggregate_stats:type_name -> util.MergeAggregateStats
	47,  // 65: util.OperatorStats.local_sort_stats:type_name -> util.LocalSortStats
	48,  // 66: util.OperatorStats.merge_sort_stats:type_name -> util.MergeSortStats
	50,  // 67: util.OperatorStats.values_stats:type_name -> util.ValuesStats
	56,  // 68: util.OperatorStats.exchange_sink_stats:type_name -> util.ExchangeSinkStats
	57,  // 69: util.OperatorStats.exchange_source_stats:type_name -> util.ExchangeSourceStats
	49,  // 70: util.OperatorStats.union_all_stats:type_name -> util.UnionAllStats
	51,  // 71: util.OperatorStats.buffer_stats:type_name -> util.BufferStats
	52,  // 72: util.OperatorStats.window_stats:type_name -> util.WindowStats
	54,  // 73: util.OperatorStats.expand_stats:type_name -> util.ExpandStats
	55,  // 74: util.OperatorStats.lateral_view_stats:type_name -> util.LateralViewStats
	53,  // 75: util.OperatorStats.partial_window_stats:type_name -> util.PartialWindowStats
	21,  // 76: util.OperatorStats.init_timing:type_name -> util.Timing
	102, // 77: util.OrderByDesc.reference:type_name -> util.Reference
	103, // 78: util.OrderByDesc.order:type_name -> util.Order
	23,  // 79: util.MergeSort.orders:type_name -> util.OrderByDesc
	101, // 80: util.PartialWindowFilter.function:type_name -> util.ScalarExpression
	31,  // 81: util.PartialWindowFilter.spec:type_name -> util.WindowSpec
	29,  // 82: util.Window.groups:type_name -> util.WindowGroup
	30,  // 83: util.WindowGroup.functions:type_name -> util.WindowCall
	31,  // 84: util.WindowGroup.spec:type_name -> util.WindowSpec
	101, // 85: util.WindowCall.function:type_name -> util.ScalarExpression
	100, // 86: util.WindowCall.partial_type:type_name -> util.DataType
	102, // 87: util.WindowSpec.keys:type_name -> util.Reference
	23,  // 88: util.WindowSpec.orders:type_name -> util.OrderByDesc
	5,   // 89: util.WindowSpec.boundary_type:type_name -> util.WindowSpec.BoundaryType
	32,  // 90: util.WindowSpec.lower_bound:type_name -> util.WindowBoundary
	32,  // 91: util.WindowSpec.upper_bound:type_name -> util.WindowBoundary
	104, // 92: util.WindowBoundary.offset:type_name -> util.Constant
	34,  // 93: util.LateralView.functions:type_name -> util.TableFunctionCall
	101, // 94: util.TableFunctionCall.function:type_name -> util.ScalarExpression
	101, // 95: util.Calc.expressions:type_name -> util.ScalarExpression
	3,   // 96: util.Calc.lazy:type_name -> util.LazyEval
	101, // 97: util.LogicalCalc.condition:type_name -> util.ScalarExpression
	101, // 98: util.LogicalCalc.projects:type_name -> util.ScalarExpression
	101, // 99: util.Expand.expressions:type_name -> util.ScalarExpression
	102, // 100: util.GroupingKeySet.keys:type_name -> util.Reference
	102, // 101: util.Grouping.keys:type_name -> util.Reference
	39,  // 102: util.Grouping.keySets:type_name -> util.GroupingKeySet
	9,   // 103: util.Grouping.aggregate_calls:type_name -> util.AggregateCall
	21,  // 104: util.HashJoinStats.build_timing:type_name -> util.Timing
	21,  // 105: util.HashJoinStats.finish_build_timing:type_name -> util.Timing
	21,  // 106: util.HashJoinStats.probe_timing:type_name -> util.Timing
	21,  // 107: util.HashJoinStats.post_probe_timing:type_name -> util.Timing
	42,  // 108: util.HashJoinStats.ht_stats:type_name -> util.HashTableStats
	98,  // 109: util.HashJoinStats.build_spill_stats:type_name -> util.SpillStats
	98,  // 110: util.HashJoinStats.probe_spill_stats:type_name -> util.SpillStats
	21,  // 111: util.HashJoinStats.probe_find_ht_timing:type_name -> util.Timing
	21,  // 112: util.HashJoinStats.probe_output_timing:type_name -> util.Timing
	21,  // 113: util.HashJoinStats.probe_eval_conjunct_timing:type_name -> util.Timing
	21,  // 114: util.HashJoinStats.probe_output_conjunct_timing:type_name -> util.Timing
	21,  // 115: util.HashAggregateStats.assign_states_timing:type_name -> util.Timing
	21,  // 116: util.HashAggregateStats.update_states_timing:type_name -> util.Timing
	21,  // 117: util.HashAggregateStats.output_timing:type_name -> util.Timing
	42,  // 118: util.HashAggregateStats.ht_stats:type_name -> util.HashTableStats
	98,  // 119: util.HashAggregateStats.input_spill_stats:type_name -> util.SpillStats
	98,  // 120: util.HashAggregateStats.aggregated_spill_stats:type_name -> util.SpillStats
	21,  // 121: util.MergeAggregateStats.assign_states_timing:type_name -> util.Timing
	21,  // 122: util.MergeAggregateStats.update_states_timing:type_name -> util.Timing
	21,  // 123: util.MergeAggregateStats.output_timing:type_name -> util.Timing
	98,  // 124: util.LocalSortStats.spill_stats:type_name -> util.SpillStats
	21,  // 125: util.LocalSortStats.generate_run_timing:type_name -> util.Timing
	21,  // 126: util.LocalSortStats.merge_run_timing:type_name -> util.Timing
	21,  // 127: util.LocalSortStats.init_merge_timing:type_name -> util.Timing
	21,  // 128: util.LocalSortStats.accumulate_block_timing:type_name -> util.Timing
	21,  // 129: util.LocalSortStats.sort_key_timing:type_name -> util.Timing
	21,  // 130: util.LocalSortStats.permute_payload_timing:type_name -> util.Timing
	21,  // 131: util.LocalSortStats.spill_run_timing:type_name -> util.Timing
	98,  // 132: util.BufferStats.spill_stats:type_name -> util.SpillStats
	21,  // 133: util.ExchangeSinkStats.serialize_write_timing:type_name -> util.Timing
	21,  // 134: util.ExchangeSinkStats.serialize_flush_timing:type_name -> util.Timing
	21,  // 135: util.ExchangeSinkStats.compress_timing:type_name -> util.Timing
	21,  // 136: util.ExchangeSinkStats.acquire_buffer_timing:type_name -> util.Timing
	21,  // 137: util.ExchangeSinkStats.submit_buffer_timing:type_name -> util.Timing
	21,  // 138: util.ExchangeSinkStats.close_timing:type_name -> util.Timing
	21,  // 139: util.ExchangeSinkStats.submit_buffer_async_timing:type_name -> util.Timing
	21,  // 140: util.ExchangeSourceStats.deserialize_timing:type_name -> util.Timing
	21,  // 141: util.ExchangeSourceStats.decompress_timing:type_name -> util.Timing
	21,  // 142: util.ExchangeSourceStats.read_buffer_timing:type_name -> util.Timing
	21,  // 143: util.ExchangeSourceStats.sort_timing:type_name -> util.Timing
	98,  // 144: util.ExchangeSourceStats.sorter_spill_stats:type_name -> util.SpillStats
	105, // 145: util.Table.table_meta:type_name -> util.TableMeta
	101, // 146: util.Values.data:type_name -> util.ScalarExpression
	103, // 147: util.SortKeyDesc.order:type_name -> util.Order
	58,  // 148: util.TableScan.table:type_name -> util.Table
	101, // 149: util.TableScan.filter:type_name -> util.ScalarExpression
	101, // 150: util.TableScan.ensuredFilter:type_name -> util.ScalarExpression
	99,  // 151: util.TableScan.props:type_name -> util.TableScan.PropsEntry
	60,  // 152: util.TableScan.orders:type_name -> util.SortKeyDesc
	63,  // 153: util.TableScan.incremental_table_property:type_name -> util.IncrementalTableProperty
	101, // 154: util.TableScan.filter4Meta:type_name -> util.ScalarExpression
	72,  // 155: util.TableScanStats.input_stats:type_name -> util.DataInputStats
	6,   // 156: util.ShuffleType.type:type_name -> util.ShuffleType.Type
	58,  // 157: util.TableSink.table:type_name -> util.Table
	102, // 158: util.TableSink.keys:type_name -> util.Reference
	102, // 159: util.TableSink.part_sort_keys:type_name -> util.Reference
	102, // 160: util.TableSink.file_slice_keys:type_name -> util.Reference
	106, // 161: util.TableSink.part_values:type_name -> util.VirtualValueInfo
	64,  // 162: util.ShuffleWrite.shuffleType:type_name -> util.ShuffleType
	102, // 163: util.ShuffleWrite.keys:type_name -> util.Reference
	23,  // 164: util.ShuffleWrite.orders:type_name -> util.OrderByDesc
	107, // 165: util.ShuffleWrite.bucket_type:type_name -> util.HashBucketType
	23,  // 166: util.ShuffleRead.orders:type_name -> util.OrderByDesc
	64,  // 167: util.ShuffleRead.shuffleType:type_name -> util.ShuffleType
	64,  // 168: util.LocalExchange.shuffleType:type_name -> util.ShuffleType
	102, // 169: util.LocalExchange.keys:type_name -> util.Reference
	23,  // 170: util.LocalExchange.orders:type_name -> util.OrderByDesc
	23,  // 171: util.LocalSort.orders:type_name -> util.OrderByDesc
	102, // 172: util.LogicalSort.keys:type_name -> util.Reference
	23,  // 173: util.LogicalSort.orders:type_name -> util.OrderByDesc
	101, // 174: util.LogicalSort.limit:type_name -> util.ScalarExpression
	101, // 175: util.LogicalSort.offset:type_name -> util.ScalarExpression
	4,   // 176: util.SetOperator.type:type_name -> util.SetOpType
	73,  // 177: util.DataInputStats.file_input_stats:type_name -> util.FileRangesInputStats
	74,  // 178: util.DataInputStats.file_format_stats:type_name -> util.FileInputStats
	72,  // 179: util.FileRangesInputStats.file_input_stats:type_name -> util.DataInputStats
	108, // 180: util.FileInputStats.format_type:type_name -> util.FileFormatType
	109, // 181: util.FileInputStats.range:type_name -> util.FileRange
	81,  // 182: util.FileInputStats.text_input_stats:type_name -> util.TextInputStats
	83,  // 183: util.FileInputStats.parquet_input_stats:type_name -> util.ParquetInputStats
	82,  // 184: util.FileInputStats.memory_input_stats:type_name -> util.MemoryTableInputStats
	84,  // 185: util.FileInputStats.orc_input_stats:type_name -> util.OrcInputStats
	86,  // 186: util.FileInputStats.dummy_input_stats:type_name -> util.DummyInputStats
	85,  // 187: util.FileInputStats.csv_input_stats:type_name -> util.CSVInputStats
	87,  // 188: util.FileInputStats.avro_input_stats:type_name -> util.AvroInputStats
	88,  // 189: util.FileInputStats.arrow_input_stats:type_name -> util.ArrowInputStats
	76,  // 190: util.FileInputStats.io_stats:type_name -> util.FileIOInputStats
	72,  // 191: util.FileInputStats.delta_file_stats:type_name -> util.DataInputStats
	74,  // 192: util.DeltaFileInputStats.baseFileStats:type_name -> util.FileInputStats
	78,  // 193: util.FileIOInputStats.prefetch_stats:type_name -> util.PrefetchStats
	79,  // 194: util.FileIOInputStats.input_stats:type_name -> util.FileInputStreamStats
	110, // 195: util.FileInputStreamStats.file_system_type:type_name -> util.FileSystemType
	80,  // 196: util.FileInputStreamStats.cache_file_input_stream_stats:type_name -> util.CacheFileInputStreamStats
	90,  // 197: util.DataOutputStats.file_output_stats:type_name -> util.FileOutputStats
	91,  // 198: util.DataOutputStats.multiple_file_output_stats:type_name -> util.MultipleFileOutputStats
	111, // 199: util.FileOutputStats.file_meta_data:type_name -> util.FileMetaData
	92,  // 200: util.FileOutputStats.text_output_stats:type_name -> util.TextOutputStats
	93,  // 201: util.FileOutputStats.parquet_output_stats:type_name -> util.ParquetOutputStats
	94,  // 202: util.FileOutputStats.orc_output_stats:type_name -> util.OrcOutputStats
	95,  // 203: util.FileOutputStats.avro_output_stats:type_name -> util.AvroOutputStats
	96,  // 204: util.FileOutputStats.arrow_output_stats:type_name -> util.ArrowOutputStats
	77,  // 205: util.FileOutputStats.io_stats:type_name -> util.FileIOOutputStats
	111, // 206: util.FileOutputStats.delete_file_metas:type_name -> util.FileMetaData
	89,  // 207: util.MultipleFileOutputStats.file_output_stats:type_name -> util.DataOutputStats
	89,  // 208: util.TableSinkStats.output_stats:type_name -> util.DataOutputStats
	209, // [209:209] is the sub-list for method output_type
	209, // [209:209] is the sub-list for method input_type
	209, // [209:209] is the sub-list for extension type_name
	209, // [209:209] is the sub-list for extension extendee
	0,   // [0:209] is the sub-list for field type_name
}

func init() { file_util_operator_proto_init() }
func file_util_operator_proto_init() {
	if File_util_operator_proto != nil {
		return
	}
	file_util_table_meta_proto_init()
	file_util_table_common_proto_init()
	file_util_data_type_proto_init()
	file_util_expression_proto_init()
	file_util_file_format_type_proto_init()
	file_util_file_meta_data_proto_init()
	file_util_input_split_proto_init()
	file_util_file_system_proto_init()
	file_util_virtual_value_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_util_operator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortedAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatePhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFilterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinHintInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeJoinLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortMergeJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialWindowFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowBoundary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LateralView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalCalc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupingKeySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalcStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashTableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashJoinStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeJoinStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashAggregateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeAggregateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionAllStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialWindowStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LateralViewStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSinkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSourceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortKeyDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableScanStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementalTableProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRangesInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaFileInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIOInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIOOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefetchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInputStreamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheFileInputStreamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTableInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrcInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvroInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrowInputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleFileOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrcOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvroOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrowOutputStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSinkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_operator_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpillStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_util_operator_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Operator_TableScan)(nil),
		(*Operator_TableSink)(nil),
		(*Operator_Calc)(nil),
		(*Operator_MergeSort)(nil),
		(*Operator_ShuffleWrite)(nil),
		(*Operator_ShuffleRead)(nil),
		(*Operator_Values)(nil),
		(*Operator_HashAgg)(nil),
		(*Operator_SortedAgg)(nil),
		(*Operator_MergeJoin)(nil),
		(*Operator_HashJoin)(nil),
		(*Operator_LocalSort)(nil),
		(*Operator_UnionAll)(nil),
		(*Operator_Buffer)(nil),
		(*Operator_Window)(nil),
		(*Operator_Expand)(nil),
		(*Operator_LateralView)(nil),
		(*Operator_Grouping)(nil),
		(*Operator_Join)(nil),
		(*Operator_Aggregate)(nil),
		(*Operator_LogicalCalc)(nil),
		(*Operator_LogicalSort)(nil),
		(*Operator_SetOperator)(nil),
		(*Operator_AggPhase)(nil),
		(*Operator_Spool)(nil),
		(*Operator_PartialWindowFilter)(nil),
		(*Operator_TreeJoin)(nil),
		(*Operator_TreeJoinLeaf)(nil),
		(*Operator_LocalExchange)(nil),
	}
	file_util_operator_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*OperatorStats_TableScanStats)(nil),
		(*OperatorStats_TableSinkStats)(nil),
		(*OperatorStats_CalcStats)(nil),
		(*OperatorStats_HashJoinStats)(nil),
		(*OperatorStats_MergeJoinStats)(nil),
		(*OperatorStats_HashAggregateStats)(nil),
		(*OperatorStats_MergeAggregateStats)(nil),
		(*OperatorStats_LocalSortStats)(nil),
		(*OperatorStats_MergeSortStats)(nil),
		(*OperatorStats_ValuesStats)(nil),
		(*OperatorStats_ExchangeSinkStats)(nil),
		(*OperatorStats_ExchangeSourceStats)(nil),
		(*OperatorStats_UnionAllStats)(nil),
		(*OperatorStats_BufferStats)(nil),
		(*OperatorStats_WindowStats)(nil),
		(*OperatorStats_ExpandStats)(nil),
		(*OperatorStats_LateralViewStats)(nil),
		(*OperatorStats_PartialWindowStats)(nil),
	}
	file_util_operator_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_util_operator_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Calc_NoFilter)(nil),
		(*Calc_Filter)(nil),
	}
	file_util_operator_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_util_operator_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_util_operator_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*DataInputStats_FileInputStats)(nil),
		(*DataInputStats_FileFormatStats)(nil),
	}
	file_util_operator_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*FileInputStats_TextInputStats)(nil),
		(*FileInputStats_ParquetInputStats)(nil),
		(*FileInputStats_MemoryInputStats)(nil),
		(*FileInputStats_OrcInputStats)(nil),
		(*FileInputStats_DummyInputStats)(nil),
		(*FileInputStats_CsvInputStats)(nil),
		(*FileInputStats_AvroInputStats)(nil),
		(*FileInputStats_ArrowInputStats)(nil),
	}
	file_util_operator_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*FileInputStreamStats_CacheFileInputStreamStats)(nil),
	}
	file_util_operator_proto_msgTypes[82].OneofWrappers = []interface{}{
		(*DataOutputStats_FileOutputStats)(nil),
		(*DataOutputStats_MultipleFileOutputStats)(nil),
	}
	file_util_operator_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*FileOutputStats_TextOutputStats)(nil),
		(*FileOutputStats_ParquetOutputStats)(nil),
		(*FileOutputStats_OrcOutputStats)(nil),
		(*FileOutputStats_AvroOutputStats)(nil),
		(*FileOutputStats_ArrowOutputStats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_operator_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_operator_proto_goTypes,
		DependencyIndexes: file_util_operator_proto_depIdxs,
		EnumInfos:         file_util_operator_proto_enumTypes,
		MessageInfos:      file_util_operator_proto_msgTypes,
	}.Build()
	File_util_operator_proto = out.File
	file_util_operator_proto_rawDesc = nil
	file_util_operator_proto_goTypes = nil
	file_util_operator_proto_depIdxs = nil
}
