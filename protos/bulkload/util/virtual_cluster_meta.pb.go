// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: util/virtual_cluster_meta.proto

package util

import (
	rm "github.com/clickzetta/goclickzetta/protos/bulkload/rm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyticsProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinReplicas              *int32          `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3,oneof" json:"min_replicas,omitempty"`
	MaxReplicas              *int32          `protobuf:"varint,2,opt,name=max_replicas,json=maxReplicas,proto3,oneof" json:"max_replicas,omitempty"`
	MaxConcurrencyPerReplica *int32          `protobuf:"varint,3,opt,name=max_concurrency_per_replica,json=maxConcurrencyPerReplica,proto3,oneof" json:"max_concurrency_per_replica,omitempty"`
	ScalePolicy              *rm.ScalePolicy `protobuf:"varint,4,opt,name=scale_policy,json=scalePolicy,proto3,enum=rm.ScalePolicy,oneof" json:"scale_policy,omitempty"`
	CurReplicas              *int32          `protobuf:"varint,5,opt,name=cur_replicas,json=curReplicas,proto3,oneof" json:"cur_replicas,omitempty"`
	PreloadTables            *string         `protobuf:"bytes,6,opt,name=preload_tables,json=preloadTables,proto3,oneof" json:"preload_tables,omitempty"`
}

func (x *AnalyticsProperties) Reset() {
	*x = AnalyticsProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_virtual_cluster_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsProperties) ProtoMessage() {}

func (x *AnalyticsProperties) ProtoReflect() protoreflect.Message {
	mi := &file_util_virtual_cluster_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsProperties.ProtoReflect.Descriptor instead.
func (*AnalyticsProperties) Descriptor() ([]byte, []int) {
	return file_util_virtual_cluster_meta_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsProperties) GetMinReplicas() int32 {
	if x != nil && x.MinReplicas != nil {
		return *x.MinReplicas
	}
	return 0
}

func (x *AnalyticsProperties) GetMaxReplicas() int32 {
	if x != nil && x.MaxReplicas != nil {
		return *x.MaxReplicas
	}
	return 0
}

func (x *AnalyticsProperties) GetMaxConcurrencyPerReplica() int32 {
	if x != nil && x.MaxConcurrencyPerReplica != nil {
		return *x.MaxConcurrencyPerReplica
	}
	return 0
}

func (x *AnalyticsProperties) GetScalePolicy() rm.ScalePolicy {
	if x != nil && x.ScalePolicy != nil {
		return *x.ScalePolicy
	}
	return rm.ScalePolicy(0)
}

func (x *AnalyticsProperties) GetCurReplicas() int32 {
	if x != nil && x.CurReplicas != nil {
		return *x.CurReplicas
	}
	return 0
}

func (x *AnalyticsProperties) GetPreloadTables() string {
	if x != nil && x.PreloadTables != nil {
		return *x.PreloadTables
	}
	return ""
}

type GeneralProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterMaxSize *rm.VClusterSize `protobuf:"varint,1,opt,name=cluster_max_size,json=clusterMaxSize,proto3,enum=rm.VClusterSize,oneof" json:"cluster_max_size,omitempty"`
}

func (x *GeneralProperties) Reset() {
	*x = GeneralProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_virtual_cluster_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralProperties) ProtoMessage() {}

func (x *GeneralProperties) ProtoReflect() protoreflect.Message {
	mi := &file_util_virtual_cluster_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralProperties.ProtoReflect.Descriptor instead.
func (*GeneralProperties) Descriptor() ([]byte, []int) {
	return file_util_virtual_cluster_meta_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralProperties) GetClusterMaxSize() rm.VClusterSize {
	if x != nil && x.ClusterMaxSize != nil {
		return *x.ClusterMaxSize
	}
	return rm.VClusterSize(0)
}

type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobsRunning *int32 `protobuf:"varint,1,opt,name=jobs_running,json=jobsRunning,proto3,oneof" json:"jobs_running,omitempty"`
	JobsInQueue *int32 `protobuf:"varint,2,opt,name=jobs_in_queue,json=jobsInQueue,proto3,oneof" json:"jobs_in_queue,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_virtual_cluster_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_util_virtual_cluster_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_util_virtual_cluster_meta_proto_rawDescGZIP(), []int{2}
}

func (x *JobInfo) GetJobsRunning() int32 {
	if x != nil && x.JobsRunning != nil {
		return *x.JobsRunning
	}
	return 0
}

func (x *JobInfo) GetJobsInQueue() int32 {
	if x != nil && x.JobsInQueue != nil {
		return *x.JobsInQueue
	}
	return 0
}

type VirtualClusterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterType rm.VClusterType  `protobuf:"varint,1,opt,name=cluster_type,json=clusterType,proto3,enum=rm.VClusterType" json:"cluster_type,omitempty"`
	ClusterSize *rm.VClusterSize `protobuf:"varint,2,opt,name=cluster_size,json=clusterSize,proto3,enum=rm.VClusterSize,oneof" json:"cluster_size,omitempty"`
	// Types that are assignable to ResourceOneof:
	//
	//	*VirtualClusterMeta_AnalyticsProperties
	//	*VirtualClusterMeta_GeneralProperties
	ResourceOneof            isVirtualClusterMeta_ResourceOneof `protobuf_oneof:"resource_oneof"`
	AutoStopLatencySec       *int32                             `protobuf:"varint,5,opt,name=auto_stop_latency_sec,json=autoStopLatencySec,proto3,oneof" json:"auto_stop_latency_sec,omitempty"`
	AutoStartEnabled         *bool                              `protobuf:"varint,6,opt,name=auto_start_enabled,json=autoStartEnabled,proto3,oneof" json:"auto_start_enabled,omitempty"`
	Tag                      map[string]string                  `protobuf:"bytes,7,rep,name=tag,proto3" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueryProcessTimeLimitSec *int32                             `protobuf:"varint,9,opt,name=query_process_time_limit_sec,json=queryProcessTimeLimitSec,proto3,oneof" json:"query_process_time_limit_sec,omitempty"`
	State                    *rm.VirtualClusterState            `protobuf:"varint,10,opt,name=state,proto3,enum=rm.VirtualClusterState,oneof" json:"state,omitempty"`
	PreState                 *rm.VirtualClusterState            `protobuf:"varint,11,opt,name=pre_state,json=preState,proto3,enum=rm.VirtualClusterState,oneof" json:"pre_state,omitempty"`
	ErrorMsg                 *string                            `protobuf:"bytes,12,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
	// job info is not stored in meta
	JobInfo     *JobInfo `protobuf:"bytes,13,opt,name=job_info,json=jobInfo,proto3,oneof" json:"job_info,omitempty"`
	WorkspaceId *int64   `protobuf:"varint,14,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
	VcId        *int64   `protobuf:"varint,15,opt,name=vc_id,json=vcId,proto3,oneof" json:"vc_id,omitempty"`
	StateInfo   *string  `protobuf:"bytes,16,opt,name=state_info,json=stateInfo,proto3,oneof" json:"state_info,omitempty"`
	Version     *string  `protobuf:"bytes,17,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *VirtualClusterMeta) Reset() {
	*x = VirtualClusterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_virtual_cluster_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualClusterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualClusterMeta) ProtoMessage() {}

func (x *VirtualClusterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_util_virtual_cluster_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualClusterMeta.ProtoReflect.Descriptor instead.
func (*VirtualClusterMeta) Descriptor() ([]byte, []int) {
	return file_util_virtual_cluster_meta_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualClusterMeta) GetClusterType() rm.VClusterType {
	if x != nil {
		return x.ClusterType
	}
	return rm.VClusterType(0)
}

func (x *VirtualClusterMeta) GetClusterSize() rm.VClusterSize {
	if x != nil && x.ClusterSize != nil {
		return *x.ClusterSize
	}
	return rm.VClusterSize(0)
}

func (m *VirtualClusterMeta) GetResourceOneof() isVirtualClusterMeta_ResourceOneof {
	if m != nil {
		return m.ResourceOneof
	}
	return nil
}

func (x *VirtualClusterMeta) GetAnalyticsProperties() *AnalyticsProperties {
	if x, ok := x.GetResourceOneof().(*VirtualClusterMeta_AnalyticsProperties); ok {
		return x.AnalyticsProperties
	}
	return nil
}

func (x *VirtualClusterMeta) GetGeneralProperties() *GeneralProperties {
	if x, ok := x.GetResourceOneof().(*VirtualClusterMeta_GeneralProperties); ok {
		return x.GeneralProperties
	}
	return nil
}

func (x *VirtualClusterMeta) GetAutoStopLatencySec() int32 {
	if x != nil && x.AutoStopLatencySec != nil {
		return *x.AutoStopLatencySec
	}
	return 0
}

func (x *VirtualClusterMeta) GetAutoStartEnabled() bool {
	if x != nil && x.AutoStartEnabled != nil {
		return *x.AutoStartEnabled
	}
	return false
}

func (x *VirtualClusterMeta) GetTag() map[string]string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *VirtualClusterMeta) GetQueryProcessTimeLimitSec() int32 {
	if x != nil && x.QueryProcessTimeLimitSec != nil {
		return *x.QueryProcessTimeLimitSec
	}
	return 0
}

func (x *VirtualClusterMeta) GetState() rm.VirtualClusterState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return rm.VirtualClusterState(0)
}

func (x *VirtualClusterMeta) GetPreState() rm.VirtualClusterState {
	if x != nil && x.PreState != nil {
		return *x.PreState
	}
	return rm.VirtualClusterState(0)
}

func (x *VirtualClusterMeta) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *VirtualClusterMeta) GetJobInfo() *JobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

func (x *VirtualClusterMeta) GetWorkspaceId() int64 {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return 0
}

func (x *VirtualClusterMeta) GetVcId() int64 {
	if x != nil && x.VcId != nil {
		return *x.VcId
	}
	return 0
}

func (x *VirtualClusterMeta) GetStateInfo() string {
	if x != nil && x.StateInfo != nil {
		return *x.StateInfo
	}
	return ""
}

func (x *VirtualClusterMeta) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type isVirtualClusterMeta_ResourceOneof interface {
	isVirtualClusterMeta_ResourceOneof()
}

type VirtualClusterMeta_AnalyticsProperties struct {
	AnalyticsProperties *AnalyticsProperties `protobuf:"bytes,3,opt,name=analytics_properties,json=analyticsProperties,proto3,oneof"`
}

type VirtualClusterMeta_GeneralProperties struct {
	GeneralProperties *GeneralProperties `protobuf:"bytes,4,opt,name=general_properties,json=generalProperties,proto3,oneof"`
}

func (*VirtualClusterMeta_AnalyticsProperties) isVirtualClusterMeta_ResourceOneof() {}

func (*VirtualClusterMeta_GeneralProperties) isVirtualClusterMeta_ResourceOneof() {}

var File_util_virtual_cluster_meta_proto protoreflect.FileDescriptor

var file_util_virtual_cluster_meta_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x1a, 0x18, 0x72, 0x6d, 0x2f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xad, 0x03, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x6d, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x69, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7d, 0x0a, 0x07,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x73, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0b, 0x6a, 0x6f, 0x62, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x73, 0x49, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0xdd, 0x08, 0x0a, 0x12,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x72, 0x6d, 0x2e, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x1c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x6d, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x06, 0x52, 0x08, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x08, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x04, 0x76, 0x63, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x63, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x39, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a,
	0x65, 0x74, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65, 0x74, 0x74,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_virtual_cluster_meta_proto_rawDescOnce sync.Once
	file_util_virtual_cluster_meta_proto_rawDescData = file_util_virtual_cluster_meta_proto_rawDesc
)

func file_util_virtual_cluster_meta_proto_rawDescGZIP() []byte {
	file_util_virtual_cluster_meta_proto_rawDescOnce.Do(func() {
		file_util_virtual_cluster_meta_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_virtual_cluster_meta_proto_rawDescData)
	})
	return file_util_virtual_cluster_meta_proto_rawDescData
}

var file_util_virtual_cluster_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_util_virtual_cluster_meta_proto_goTypes = []interface{}{
	(*AnalyticsProperties)(nil), // 0: util.AnalyticsProperties
	(*GeneralProperties)(nil),   // 1: util.GeneralProperties
	(*JobInfo)(nil),             // 2: util.JobInfo
	(*VirtualClusterMeta)(nil),  // 3: util.VirtualClusterMeta
	nil,                         // 4: util.VirtualClusterMeta.TagEntry
	(rm.ScalePolicy)(0),         // 5: rm.ScalePolicy
	(rm.VClusterSize)(0),        // 6: rm.VClusterSize
	(rm.VClusterType)(0),        // 7: rm.VClusterType
	(rm.VirtualClusterState)(0), // 8: rm.VirtualClusterState
}
var file_util_virtual_cluster_meta_proto_depIdxs = []int32{
	5,  // 0: util.AnalyticsProperties.scale_policy:type_name -> rm.ScalePolicy
	6,  // 1: util.GeneralProperties.cluster_max_size:type_name -> rm.VClusterSize
	7,  // 2: util.VirtualClusterMeta.cluster_type:type_name -> rm.VClusterType
	6,  // 3: util.VirtualClusterMeta.cluster_size:type_name -> rm.VClusterSize
	0,  // 4: util.VirtualClusterMeta.analytics_properties:type_name -> util.AnalyticsProperties
	1,  // 5: util.VirtualClusterMeta.general_properties:type_name -> util.GeneralProperties
	4,  // 6: util.VirtualClusterMeta.tag:type_name -> util.VirtualClusterMeta.TagEntry
	8,  // 7: util.VirtualClusterMeta.state:type_name -> rm.VirtualClusterState
	8,  // 8: util.VirtualClusterMeta.pre_state:type_name -> rm.VirtualClusterState
	2,  // 9: util.VirtualClusterMeta.job_info:type_name -> util.JobInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_util_virtual_cluster_meta_proto_init() }
func file_util_virtual_cluster_meta_proto_init() {
	if File_util_virtual_cluster_meta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_util_virtual_cluster_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_virtual_cluster_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_virtual_cluster_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_virtual_cluster_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualClusterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_util_virtual_cluster_meta_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_util_virtual_cluster_meta_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_util_virtual_cluster_meta_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_util_virtual_cluster_meta_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*VirtualClusterMeta_AnalyticsProperties)(nil),
		(*VirtualClusterMeta_GeneralProperties)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_virtual_cluster_meta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_virtual_cluster_meta_proto_goTypes,
		DependencyIndexes: file_util_virtual_cluster_meta_proto_depIdxs,
		MessageInfos:      file_util_virtual_cluster_meta_proto_msgTypes,
	}.Build()
	File_util_virtual_cluster_meta_proto = out.File
	file_util_virtual_cluster_meta_proto_rawDesc = nil
	file_util_virtual_cluster_meta_proto_goTypes = nil
	file_util_virtual_cluster_meta_proto_depIdxs = nil
}
