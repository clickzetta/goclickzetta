// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: util/expression.proto

package util

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReferenceType int32

const (
	ReferenceType_LOGICAL_FIELD  ReferenceType = 0
	ReferenceType_REF_LOCAL      ReferenceType = 1
	ReferenceType_PHYSICAL_FIELD ReferenceType = 2
	ReferenceType_REF_VARIABLE   ReferenceType = 3
)

// Enum value maps for ReferenceType.
var (
	ReferenceType_name = map[int32]string{
		0: "LOGICAL_FIELD",
		1: "REF_LOCAL",
		2: "PHYSICAL_FIELD",
		3: "REF_VARIABLE",
	}
	ReferenceType_value = map[string]int32{
		"LOGICAL_FIELD":  0,
		"REF_LOCAL":      1,
		"PHYSICAL_FIELD": 2,
		"REF_VARIABLE":   3,
	}
)

func (x ReferenceType) Enum() *ReferenceType {
	p := new(ReferenceType)
	*p = x
	return p
}

func (x ReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_util_expression_proto_enumTypes[0].Descriptor()
}

func (ReferenceType) Type() protoreflect.EnumType {
	return &file_util_expression_proto_enumTypes[0]
}

func (x ReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceType.Descriptor instead.
func (ReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{0}
}

type IntervalDayTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *IntervalDayTime) Reset() {
	*x = IntervalDayTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalDayTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalDayTime) ProtoMessage() {}

func (x *IntervalDayTime) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalDayTime.ProtoReflect.Descriptor instead.
func (*IntervalDayTime) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{0}
}

func (x *IntervalDayTime) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *IntervalDayTime) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type ArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Constant `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{1}
}

func (x *ArrayValue) GetElements() []*Constant {
	if x != nil {
		return x.Elements
	}
	return nil
}

type MapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   []*Constant `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Values []*Constant `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MapValue) Reset() {
	*x = MapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValue) ProtoMessage() {}

func (x *MapValue) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValue.ProtoReflect.Descriptor instead.
func (*MapValue) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{2}
}

func (x *MapValue) GetKeys() []*Constant {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapValue) GetValues() []*Constant {
	if x != nil {
		return x.Values
	}
	return nil
}

type StructValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Constant `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *StructValue) Reset() {
	*x = StructValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructValue) ProtoMessage() {}

func (x *StructValue) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructValue.ProtoReflect.Descriptor instead.
func (*StructValue) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{3}
}

func (x *StructValue) GetFields() []*Constant {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Constant_Null
	//	*Constant_Tinyint
	//	*Constant_SmallInt
	//	*Constant_Int
	//	*Constant_Bigint
	//	*Constant_Float
	//	*Constant_Double
	//	*Constant_Decimal
	//	*Constant_Boolean
	//	*Constant_Char
	//	*Constant_Varchar
	//	*Constant_String_
	//	*Constant_Binary
	//	*Constant_Date
	//	*Constant_Timestamp
	//	*Constant_IntervalYearMonth
	//	*Constant_IntervalDayTime
	//	*Constant_Array
	//	*Constant_Map
	//	*Constant_Struct
	Value isConstant_Value `protobuf_oneof:"value"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{4}
}

func (m *Constant) GetValue() isConstant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Constant) GetNull() bool {
	if x, ok := x.GetValue().(*Constant_Null); ok {
		return x.Null
	}
	return false
}

func (x *Constant) GetTinyint() int32 {
	if x, ok := x.GetValue().(*Constant_Tinyint); ok {
		return x.Tinyint
	}
	return 0
}

func (x *Constant) GetSmallInt() int32 {
	if x, ok := x.GetValue().(*Constant_SmallInt); ok {
		return x.SmallInt
	}
	return 0
}

func (x *Constant) GetInt() int32 {
	if x, ok := x.GetValue().(*Constant_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Constant) GetBigint() int64 {
	if x, ok := x.GetValue().(*Constant_Bigint); ok {
		return x.Bigint
	}
	return 0
}

func (x *Constant) GetFloat() float32 {
	if x, ok := x.GetValue().(*Constant_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Constant) GetDouble() float64 {
	if x, ok := x.GetValue().(*Constant_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Constant) GetDecimal() string {
	if x, ok := x.GetValue().(*Constant_Decimal); ok {
		return x.Decimal
	}
	return ""
}

func (x *Constant) GetBoolean() bool {
	if x, ok := x.GetValue().(*Constant_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Constant) GetChar() string {
	if x, ok := x.GetValue().(*Constant_Char); ok {
		return x.Char
	}
	return ""
}

func (x *Constant) GetVarchar() string {
	if x, ok := x.GetValue().(*Constant_Varchar); ok {
		return x.Varchar
	}
	return ""
}

func (x *Constant) GetString_() string {
	if x, ok := x.GetValue().(*Constant_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Constant) GetBinary() []byte {
	if x, ok := x.GetValue().(*Constant_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Constant) GetDate() int32 {
	if x, ok := x.GetValue().(*Constant_Date); ok {
		return x.Date
	}
	return 0
}

func (x *Constant) GetTimestamp() int64 {
	if x, ok := x.GetValue().(*Constant_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *Constant) GetIntervalYearMonth() int64 {
	if x, ok := x.GetValue().(*Constant_IntervalYearMonth); ok {
		return x.IntervalYearMonth
	}
	return 0
}

func (x *Constant) GetIntervalDayTime() *IntervalDayTime {
	if x, ok := x.GetValue().(*Constant_IntervalDayTime); ok {
		return x.IntervalDayTime
	}
	return nil
}

func (x *Constant) GetArray() *ArrayValue {
	if x, ok := x.GetValue().(*Constant_Array); ok {
		return x.Array
	}
	return nil
}

func (x *Constant) GetMap() *MapValue {
	if x, ok := x.GetValue().(*Constant_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Constant) GetStruct() *StructValue {
	if x, ok := x.GetValue().(*Constant_Struct); ok {
		return x.Struct
	}
	return nil
}

type isConstant_Value interface {
	isConstant_Value()
}

type Constant_Null struct {
	Null bool `protobuf:"varint,1,opt,name=null,proto3,oneof"`
}

type Constant_Tinyint struct {
	Tinyint int32 `protobuf:"varint,2,opt,name=tinyint,proto3,oneof"`
}

type Constant_SmallInt struct {
	SmallInt int32 `protobuf:"varint,3,opt,name=smallInt,proto3,oneof"`
}

type Constant_Int struct {
	Int int32 `protobuf:"varint,4,opt,name=int,proto3,oneof"`
}

type Constant_Bigint struct {
	Bigint int64 `protobuf:"varint,5,opt,name=bigint,proto3,oneof"`
}

type Constant_Float struct {
	Float float32 `protobuf:"fixed32,6,opt,name=float,proto3,oneof"`
}

type Constant_Double struct {
	Double float64 `protobuf:"fixed64,7,opt,name=double,proto3,oneof"`
}

type Constant_Decimal struct {
	Decimal string `protobuf:"bytes,8,opt,name=decimal,proto3,oneof"`
}

type Constant_Boolean struct {
	Boolean bool `protobuf:"varint,9,opt,name=boolean,proto3,oneof"`
}

type Constant_Char struct {
	Char string `protobuf:"bytes,10,opt,name=char,proto3,oneof"`
}

type Constant_Varchar struct {
	Varchar string `protobuf:"bytes,11,opt,name=varchar,proto3,oneof"`
}

type Constant_String_ struct {
	String_ string `protobuf:"bytes,12,opt,name=string,proto3,oneof"`
}

type Constant_Binary struct {
	Binary []byte `protobuf:"bytes,13,opt,name=binary,proto3,oneof"`
}

type Constant_Date struct {
	Date int32 `protobuf:"varint,14,opt,name=date,proto3,oneof"`
}

type Constant_Timestamp struct {
	Timestamp int64 `protobuf:"varint,15,opt,name=timestamp,proto3,oneof"`
}

type Constant_IntervalYearMonth struct {
	IntervalYearMonth int64 `protobuf:"varint,16,opt,name=IntervalYearMonth,proto3,oneof"`
}

type Constant_IntervalDayTime struct {
	IntervalDayTime *IntervalDayTime `protobuf:"bytes,17,opt,name=IntervalDayTime,proto3,oneof"`
}

type Constant_Array struct {
	Array *ArrayValue `protobuf:"bytes,100,opt,name=array,proto3,oneof"`
}

type Constant_Map struct {
	Map *MapValue `protobuf:"bytes,101,opt,name=map,proto3,oneof"`
}

type Constant_Struct struct {
	Struct *StructValue `protobuf:"bytes,102,opt,name=struct,proto3,oneof"`
}

func (*Constant_Null) isConstant_Value() {}

func (*Constant_Tinyint) isConstant_Value() {}

func (*Constant_SmallInt) isConstant_Value() {}

func (*Constant_Int) isConstant_Value() {}

func (*Constant_Bigint) isConstant_Value() {}

func (*Constant_Float) isConstant_Value() {}

func (*Constant_Double) isConstant_Value() {}

func (*Constant_Decimal) isConstant_Value() {}

func (*Constant_Boolean) isConstant_Value() {}

func (*Constant_Char) isConstant_Value() {}

func (*Constant_Varchar) isConstant_Value() {}

func (*Constant_String_) isConstant_Value() {}

func (*Constant_Binary) isConstant_Value() {}

func (*Constant_Date) isConstant_Value() {}

func (*Constant_Timestamp) isConstant_Value() {}

func (*Constant_IntervalYearMonth) isConstant_Value() {}

func (*Constant_IntervalDayTime) isConstant_Value() {}

func (*Constant_Array) isConstant_Value() {}

func (*Constant_Map) isConstant_Value() {}

func (*Constant_Struct) isConstant_Value() {}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Local   bool          `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	From    string        `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Name    string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RefType ReferenceType `protobuf:"varint,5,opt,name=ref_type,json=refType,proto3,enum=util.ReferenceType" json:"ref_type,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{5}
}

func (x *Reference) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reference) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *Reference) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetRefType() ReferenceType {
	if x != nil {
		return x.RefType
	}
	return ReferenceType_LOGICAL_FIELD
}

type ScalarFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From               string              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Name               string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BuiltIn            bool                `protobuf:"varint,3,opt,name=builtIn,proto3" json:"builtIn,omitempty"`
	Arguments          []*ScalarExpression `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Properties         *Properties         `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	ExecDesc           string              `protobuf:"bytes,6,opt,name=execDesc,proto3" json:"execDesc,omitempty"`
	FunctionProperties *Properties         `protobuf:"bytes,7,opt,name=functionProperties,proto3" json:"functionProperties,omitempty"`
}

func (x *ScalarFunction) Reset() {
	*x = ScalarFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunction) ProtoMessage() {}

func (x *ScalarFunction) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunction.ProtoReflect.Descriptor instead.
func (*ScalarFunction) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{6}
}

func (x *ScalarFunction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ScalarFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScalarFunction) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

func (x *ScalarFunction) GetArguments() []*ScalarExpression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ScalarFunction) GetProperties() *Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ScalarFunction) GetExecDesc() string {
	if x != nil {
		return x.ExecDesc
	}
	return ""
}

func (x *ScalarFunction) GetFunctionProperties() *Properties {
	if x != nil {
		return x.FunctionProperties
	}
	return nil
}

type VariableDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *DataType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VariableDef) Reset() {
	*x = VariableDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDef) ProtoMessage() {}

func (x *VariableDef) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDef.ProtoReflect.Descriptor instead.
func (*VariableDef) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{7}
}

func (x *VariableDef) GetType() *DataType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VariableDef) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type LambdaFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*VariableDef    `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Impl   *ScalarExpression `protobuf:"bytes,2,opt,name=impl,proto3" json:"impl,omitempty"`
}

func (x *LambdaFunction) Reset() {
	*x = LambdaFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambdaFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambdaFunction) ProtoMessage() {}

func (x *LambdaFunction) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambdaFunction.ProtoReflect.Descriptor instead.
func (*LambdaFunction) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{8}
}

func (x *LambdaFunction) GetParams() []*VariableDef {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *LambdaFunction) GetImpl() *ScalarExpression {
	if x != nil {
		return x.Impl
	}
	return nil
}

type ScalarExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *DataType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ScalarExpression_Constant
	//	*ScalarExpression_Reference
	//	*ScalarExpression_Function
	//	*ScalarExpression_Lambda
	Value isScalarExpression_Value `protobuf_oneof:"value"`
}

func (x *ScalarExpression) Reset() {
	*x = ScalarExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_expression_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarExpression) ProtoMessage() {}

func (x *ScalarExpression) ProtoReflect() protoreflect.Message {
	mi := &file_util_expression_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarExpression.ProtoReflect.Descriptor instead.
func (*ScalarExpression) Descriptor() ([]byte, []int) {
	return file_util_expression_proto_rawDescGZIP(), []int{9}
}

func (x *ScalarExpression) GetType() *DataType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *ScalarExpression) GetValue() isScalarExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarExpression) GetConstant() *Constant {
	if x, ok := x.GetValue().(*ScalarExpression_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *ScalarExpression) GetReference() *Reference {
	if x, ok := x.GetValue().(*ScalarExpression_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ScalarExpression) GetFunction() *ScalarFunction {
	if x, ok := x.GetValue().(*ScalarExpression_Function); ok {
		return x.Function
	}
	return nil
}

func (x *ScalarExpression) GetLambda() *LambdaFunction {
	if x, ok := x.GetValue().(*ScalarExpression_Lambda); ok {
		return x.Lambda
	}
	return nil
}

type isScalarExpression_Value interface {
	isScalarExpression_Value()
}

type ScalarExpression_Constant struct {
	Constant *Constant `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type ScalarExpression_Reference struct {
	Reference *Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

type ScalarExpression_Function struct {
	Function *ScalarFunction `protobuf:"bytes,5,opt,name=function,proto3,oneof"`
}

type ScalarExpression_Lambda struct {
	Lambda *LambdaFunction `protobuf:"bytes,6,opt,name=lambda,proto3,oneof"`
}

func (*ScalarExpression_Constant) isScalarExpression_Value() {}

func (*ScalarExpression_Reference) isScalarExpression_Value() {}

func (*ScalarExpression_Function) isScalarExpression_Value() {}

func (*ScalarExpression_Lambda) isScalarExpression_Value() {}

var File_util_expression_proto protoreflect.FileDescriptor

var file_util_expression_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x74, 0x69, 0x6c, 0x1a, 0x14, 0x75,
	0x74, 0x69, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x35, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x69, 0x6e, 0x79, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6e, 0x79,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x68, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x34, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x40, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x0e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22,
	0x82, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x6c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x59, 0x53, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x46, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x7a, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x7a, 0x65,
	0x74, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_expression_proto_rawDescOnce sync.Once
	file_util_expression_proto_rawDescData = file_util_expression_proto_rawDesc
)

func file_util_expression_proto_rawDescGZIP() []byte {
	file_util_expression_proto_rawDescOnce.Do(func() {
		file_util_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_expression_proto_rawDescData)
	})
	return file_util_expression_proto_rawDescData
}

var file_util_expression_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_util_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_util_expression_proto_goTypes = []interface{}{
	(ReferenceType)(0),       // 0: util.ReferenceType
	(*IntervalDayTime)(nil),  // 1: util.IntervalDayTime
	(*ArrayValue)(nil),       // 2: util.ArrayValue
	(*MapValue)(nil),         // 3: util.MapValue
	(*StructValue)(nil),      // 4: util.StructValue
	(*Constant)(nil),         // 5: util.Constant
	(*Reference)(nil),        // 6: util.Reference
	(*ScalarFunction)(nil),   // 7: util.ScalarFunction
	(*VariableDef)(nil),      // 8: util.VariableDef
	(*LambdaFunction)(nil),   // 9: util.LambdaFunction
	(*ScalarExpression)(nil), // 10: util.ScalarExpression
	(*Properties)(nil),       // 11: util.Properties
	(*DataType)(nil),         // 12: util.DataType
}
var file_util_expression_proto_depIdxs = []int32{
	5,  // 0: util.ArrayValue.elements:type_name -> util.Constant
	5,  // 1: util.MapValue.keys:type_name -> util.Constant
	5,  // 2: util.MapValue.values:type_name -> util.Constant
	5,  // 3: util.StructValue.fields:type_name -> util.Constant
	1,  // 4: util.Constant.IntervalDayTime:type_name -> util.IntervalDayTime
	2,  // 5: util.Constant.array:type_name -> util.ArrayValue
	3,  // 6: util.Constant.map:type_name -> util.MapValue
	4,  // 7: util.Constant.struct:type_name -> util.StructValue
	0,  // 8: util.Reference.ref_type:type_name -> util.ReferenceType
	10, // 9: util.ScalarFunction.arguments:type_name -> util.ScalarExpression
	11, // 10: util.ScalarFunction.properties:type_name -> util.Properties
	11, // 11: util.ScalarFunction.functionProperties:type_name -> util.Properties
	12, // 12: util.VariableDef.type:type_name -> util.DataType
	8,  // 13: util.LambdaFunction.params:type_name -> util.VariableDef
	10, // 14: util.LambdaFunction.impl:type_name -> util.ScalarExpression
	12, // 15: util.ScalarExpression.type:type_name -> util.DataType
	5,  // 16: util.ScalarExpression.constant:type_name -> util.Constant
	6,  // 17: util.ScalarExpression.reference:type_name -> util.Reference
	7,  // 18: util.ScalarExpression.function:type_name -> util.ScalarFunction
	9,  // 19: util.ScalarExpression.lambda:type_name -> util.LambdaFunction
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_util_expression_proto_init() }
func file_util_expression_proto_init() {
	if File_util_expression_proto != nil {
		return
	}
	file_util_data_type_proto_init()
	file_util_property_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_util_expression_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalDayTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LambdaFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_expression_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_util_expression_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Constant_Null)(nil),
		(*Constant_Tinyint)(nil),
		(*Constant_SmallInt)(nil),
		(*Constant_Int)(nil),
		(*Constant_Bigint)(nil),
		(*Constant_Float)(nil),
		(*Constant_Double)(nil),
		(*Constant_Decimal)(nil),
		(*Constant_Boolean)(nil),
		(*Constant_Char)(nil),
		(*Constant_Varchar)(nil),
		(*Constant_String_)(nil),
		(*Constant_Binary)(nil),
		(*Constant_Date)(nil),
		(*Constant_Timestamp)(nil),
		(*Constant_IntervalYearMonth)(nil),
		(*Constant_IntervalDayTime)(nil),
		(*Constant_Array)(nil),
		(*Constant_Map)(nil),
		(*Constant_Struct)(nil),
	}
	file_util_expression_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ScalarExpression_Constant)(nil),
		(*ScalarExpression_Reference)(nil),
		(*ScalarExpression_Function)(nil),
		(*ScalarExpression_Lambda)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_expression_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_util_expression_proto_goTypes,
		DependencyIndexes: file_util_expression_proto_depIdxs,
		EnumInfos:         file_util_expression_proto_enumTypes,
		MessageInfos:      file_util_expression_proto_msgTypes,
	}.Build()
	File_util_expression_proto = out.File
	file_util_expression_proto_rawDesc = nil
	file_util_expression_proto_goTypes = nil
	file_util_expression_proto_depIdxs = nil
}
